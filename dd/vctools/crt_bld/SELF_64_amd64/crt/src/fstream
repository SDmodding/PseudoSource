// File Line: 151
// RVA: 0x12DE418
void __fastcall std::filebuf::~filebuf<char,std::char_traits<char>>(std::filebuf *this)
{
  bool v1; // zf
  char **IGfirst; // rcx
  char *Set_egptr; // rdx
  std::locale *Plocale; // rbx
  std::_Facet_base *v6; // rax

  v1 = this->_Myfile == 0i64;
  this->vfptr = (std::streambufVtbl *)&std::filebuf::`vftable;
  if ( !v1 )
  {
    IGfirst = this->_IGfirst;
    if ( *IGfirst == &this->_Mychar )
    {
      Set_egptr = this->_Set_egptr;
      *IGfirst = this->_Set_eback;
      *this->_IGnext = Set_egptr;
      *this->_IGcount = 0;
    }
  }
  if ( this->_Closef )
  {
    if ( this->_Myfile )
    {
      std::filebuf::_Endwrite(this);
      fclose(this->_Myfile);
    }
    std::filebuf::_Init(this, 0i64, _Closefl);
  }
  this->vfptr = (std::streambufVtbl *)&std::streambuf::`vftable;
  Plocale = this->_Plocale;
  if ( Plocale )
  {
    if ( Plocale->_Ptr )
    {
      v6 = Plocale->_Ptr->vfptr->_Decref(Plocale->_Ptr);
      if ( v6 )
        v6->vfptr->__vecDelDtor(v6, 1u);
    }
    Illusion::ShaderParam::operator delete(Plocale);
  }
}

// File Line: 355
// RVA: 0x12DE8B0
void __fastcall std::filebuf::_Lock(std::filebuf *this)
{
  _iobuf *Myfile; // rcx

  Myfile = this->_Myfile;
  if ( Myfile )
    lock_file(Myfile);
}

// File Line: 361
// RVA: 0x12DE8CC
void __fastcall std::filebuf::_Unlock(std::filebuf *this)
{
  _iobuf *Myfile; // rcx

  Myfile = this->_Myfile;
  if ( Myfile )
    unlock_file(Myfile);
}

// File Line: 369
// RVA: 0x12DE954
__int64 __fastcall std::filebuf::overflow(std::filebuf *this, unsigned int _Meta)
{
  unsigned int v4; // ebx
  char **IPnext; // rax
  int *IPcount; // rdx
  char **v8; // rdx
  char *v9; // r8
  char **IGfirst; // rdx
  char *Set_egptr; // rcx
  std::string *Ptr; // rdx
  std::string *v13; // r8
  std::codecvt<char,char,int> *Pcvt; // rcx
  std::_Facet_baseVtbl *vfptr; // r10
  int v16; // eax
  std::string *v17; // rax
  signed __int64 v18; // r14
  std::string *v19; // rcx
  char v20; // [rsp+18h] [rbp-19h] BYREF
  char v21[7]; // [rsp+19h] [rbp-18h] BYREF
  char *v22; // [rsp+20h] [rbp-11h] BYREF
  std::string *v23; // [rsp+28h] [rbp-9h] BYREF
  __int64 v24; // [rsp+30h] [rbp-1h]
  std::string v25; // [rsp+38h] [rbp+7h] BYREF

  v24 = -2i64;
  v4 = -1;
  if ( _Meta == -1 )
    return 0i64;
  IPnext = this->_IPnext;
  if ( *IPnext && (IPcount = this->_IPcount, *IPnext < &(*IPnext)[*IPcount]) )
  {
    --*IPcount;
    v8 = this->_IPnext;
    v9 = (*v8)++;
    *v9 = _Meta;
    return _Meta;
  }
  else
  {
    if ( this->_Myfile )
    {
      IGfirst = this->_IGfirst;
      if ( *IGfirst == &this->_Mychar )
      {
        Set_egptr = this->_Set_egptr;
        *IGfirst = this->_Set_eback;
        *this->_IGnext = Set_egptr;
        *this->_IGcount = 0;
      }
      if ( this->_Pcvt )
      {
        v25._Myres = 15i64;
        v25._Mysize = 0i64;
        v25._Bx._Buf[0] = 0;
        std::string::assign(&v25, 8ui64, 0);
        while ( 1 )
        {
          Ptr = &v25;
          if ( v25._Myres >= 0x10 )
            Ptr = (std::string *)v25._Bx._Ptr;
          v13 = &v25;
          if ( v25._Myres >= 0x10 )
            v13 = (std::string *)v25._Bx._Ptr;
          Pcvt = this->_Pcvt;
          vfptr = Pcvt->vfptr;
          v25._Bx._Ptr = (char *)&v23;
          v24 = (__int64)Ptr + v25._Mysize;
          v23 = v13;
          v22 = (char *)&v22;
          v16 = ((__int64 (__fastcall *)(std::codecvt<char,char,int> *, int *, char *, char *))vfptr[2]._Incref)(
                  Pcvt,
                  &this->_State,
                  &v20,
                  v21);
          if ( v16 < 0 )
            break;
          if ( v16 > 1 )
          {
            if ( v16 == 3 && (unsigned int)fputc(v20, this->_Myfile) != -1 )
              v4 = _Meta;
            break;
          }
          v17 = &v25;
          if ( v25._Myres >= 0x10 )
            v17 = (std::string *)v25._Bx._Ptr;
          v18 = (char *)v23 - (char *)v17;
          if ( v23 != v17 )
          {
            v19 = &v25;
            if ( v25._Myres >= 0x10 )
              v19 = (std::string *)v25._Bx._Ptr;
            if ( v18 != fwrite(v19->_Bx._Buf, 1ui64, (char *)v23 - (char *)v17, this->_Myfile) )
              break;
          }
          this->_Wrotesome = 1;
          if ( v22 != &v20 )
          {
            v4 = _Meta;
            break;
          }
          if ( !v18 )
          {
            if ( v25._Mysize >= 0x20 )
              break;
            std::string::append(&v25, 8ui64, 0);
          }
        }
        if ( v25._Myres >= 0x10 )
          Illusion::ShaderParam::operator delete(v25._Bx._Ptr);
      }
      else if ( (unsigned int)fputc((char)_Meta, this->_Myfile) != -1 )
      {
        return _Meta;
      }
    }
    return v4;
  }
}

// File Line: 430
// RVA: 0x12DEB78
__int64 __fastcall std::filebuf::pbackfail(std::filebuf *this, unsigned int _Meta)
{
  char *v4; // rdx
  unsigned int v5; // ecx
  _iobuf *Myfile; // rdx
  char **IGnext; // r8
  char *p_Mychar; // rdx
  char **IGfirst; // r9

  v4 = *this->_IGnext;
  v5 = 0;
  if ( !v4 || *this->_IGfirst >= v4 || _Meta != -1 && (unsigned __int8)*(v4 - 1) != _Meta )
  {
    Myfile = this->_Myfile;
    if ( Myfile && _Meta != -1 )
    {
      if ( !this->_Pcvt && (unsigned int)ungetc((unsigned __int8)_Meta, Myfile) != -1 )
        return _Meta;
      IGnext = this->_IGnext;
      p_Mychar = &this->_Mychar;
      if ( *IGnext != &this->_Mychar )
      {
        IGfirst = this->_IGfirst;
        *p_Mychar = _Meta;
        if ( *IGfirst != p_Mychar )
        {
          this->_Set_eback = *IGfirst;
          this->_Set_egptr = &(*IGnext)[*this->_IGcount];
        }
        *IGfirst = p_Mychar;
        *this->_IGnext = p_Mychar;
        *this->_IGcount = 1;
        return _Meta;
      }
    }
    return 0xFFFFFFFFi64;
  }
  ++*this->_IGcount;
  --*this->_IGnext;
  if ( _Meta != -1 )
    return _Meta;
  return v5;
}

// File Line: 455
// RVA: 0x12DF120
__int64 __fastcall std::filebuf::underflow(std::filebuf *this)
{
  char *v2; // rcx
  __int64 result; // rax
  unsigned int v4; // edi

  v2 = *this->_IGnext;
  if ( v2 && v2 < &v2[*this->_IGcount] )
    return (unsigned __int8)*v2;
  v4 = this->vfptr->uflow(this);
  result = 0xFFFFFFFFi64;
  if ( v4 != -1 )
  {
    this->vfptr->pbackfail(this, v4);
    return v4;
  }
  return result;
}

// File Line: 470
// RVA: 0x12DEED4
__int64 __fastcall std::filebuf::uflow(std::filebuf *this)
{
  char *v2; // rcx
  int *IGcount; // rdx
  __int64 v4; // r8
  char **IGnext; // rcx
  char *v6; // rdx
  char **IGfirst; // rdx
  char *Set_egptr; // rcx
  int v10; // eax
  unsigned int i; // edi
  int v12; // eax
  std::string *Ptr; // rdx
  std::string *v14; // r8
  std::codecvt<char,char,int> *Pcvt; // rcx
  std::_Facet_baseVtbl *vfptr; // r10
  int v17; // eax
  std::string *v18; // rax
  std::string *v19; // r8
  __int64 v20; // rcx
  int v21; // eax
  __int64 v22; // rdi
  __int64 *dst; // [rsp+28h] [rbp-9h] BYREF
  __int64 v24; // [rsp+30h] [rbp-1h] BYREF
  __int64 v25[2]; // [rsp+38h] [rbp+7h] BYREF
  std::string v26; // [rsp+48h] [rbp+17h] BYREF

  v25[1] = -2i64;
  v2 = *this->_IGnext;
  if ( v2 && (IGcount = this->_IGcount, v4 = *IGcount, v2 < &v2[v4]) )
  {
    *IGcount = v4 - 1;
    IGnext = this->_IGnext;
    v6 = (*IGnext)++;
    return (unsigned __int8)*v6;
  }
  else if ( this->_Myfile )
  {
    IGfirst = this->_IGfirst;
    if ( *IGfirst == &this->_Mychar )
    {
      Set_egptr = this->_Set_egptr;
      *IGfirst = this->_Set_eback;
      *this->_IGnext = Set_egptr;
      *this->_IGcount = 0;
    }
    if ( this->_Pcvt )
    {
      v26._Myres = 15i64;
      v26._Mysize = 0i64;
      v26._Bx._Buf[0] = 0;
      v12 = fgetc(this->_Myfile);
      for ( i = -1; v12 != -1; v12 = fgetc(this->_Myfile) )
      {
        std::string::append(&v26, 1ui64, v12);
        Ptr = &v26;
        if ( v26._Myres >= 0x10 )
          Ptr = (std::string *)v26._Bx._Ptr;
        v14 = &v26;
        if ( v26._Myres >= 0x10 )
          v14 = (std::string *)v26._Bx._Ptr;
        Pcvt = this->_Pcvt;
        vfptr = Pcvt->vfptr;
        v25[0] = (__int64)v25;
        v24 = (__int64)&dst + 1;
        dst = (__int64 *)&dst;
        v17 = ((__int64 (__fastcall *)(std::codecvt<char,char,int> *, int *, std::string *, unsigned __int64, __int64 *))vfptr[2].__vecDelDtor)(
                Pcvt,
                &this->_State,
                v14,
                (unsigned __int64)Ptr + v26._Mysize,
                &v24);
        if ( v17 < 0 )
          break;
        if ( v17 <= 1 )
        {
          v18 = &v26;
          if ( (__int64 **)v25[0] != &dst )
          {
            if ( v26._Myres >= 0x10 )
              LODWORD(v18) = *(_DWORD *)v26._Bx._Buf;
            v20 = v24;
            v21 = LODWORD(v26._Mysize) + (_DWORD)v18 - v24;
            v22 = v21;
            if ( v21 > 0 )
            {
              while ( 1 )
              {
                ungetc(*(char *)(--v22 + v20), this->_Myfile);
                if ( v22 <= 0 )
                  break;
                v20 = v24;
              }
            }
            goto LABEL_35;
          }
          if ( v26._Myres >= 0x10 )
            v18 = (std::string *)v26._Bx._Ptr;
          std::string::erase(&v26, 0i64, v24 - (_QWORD)v18);
        }
        else
        {
          if ( v17 != 3 )
            break;
          if ( v26._Mysize )
          {
            v19 = &v26;
            if ( v26._Myres >= 0x10 )
              v19 = (std::string *)v26._Bx._Ptr;
            memcpy_s(&dst, 1ui64, v19, 1ui64);
LABEL_35:
            i = (unsigned __int8)dst;
            break;
          }
        }
      }
      if ( v26._Myres >= 0x10 )
        Illusion::ShaderParam::operator delete(v26._Bx._Ptr);
    }
    else
    {
      v10 = fgetc(this->_Myfile);
      i = -1;
      if ( v10 != -1 )
        return (unsigned __int8)v10;
    }
    return i;
  }
  else
  {
    return 0xFFFFFFFFi64;
  }
}

// File Line: 537
// RVA: 0x12DEC48
std::fpos<int> *__fastcall std::filebuf::seekoff(
        std::filebuf *this,
        std::fpos<int> *result,
        __int64 _Off,
        unsigned int _Way)
{
  char *p_Mychar; // r14
  __int64 v6; // rsi
  char **IGfirst; // rdx
  char *Set_egptr; // rcx
  __int64 v11; // rax
  __int64 pos; // [rsp+40h] [rbp+8h] BYREF

  p_Mychar = &this->_Mychar;
  v6 = _Off;
  if ( *(std::filebuf **)this->_IGnext == (std::filebuf *)&this->_Mychar && _Way == 1 && !this->_Pcvt )
    v6 = _Off - 1;
  if ( !this->_Myfile
    || !std::filebuf::_Endwrite(this)
    || (v6 || _Way != 1) && (unsigned int)fseeki64(this->_Myfile, v6, _Way)
    || fgetpos(this->_Myfile, &pos) )
  {
    result->_Fpos = 0i64;
    result->_Mystate = 0;
    result->_Myoff = std::_BADOFF;
  }
  else
  {
    IGfirst = this->_IGfirst;
    if ( *IGfirst == p_Mychar )
    {
      Set_egptr = this->_Set_egptr;
      *IGfirst = this->_Set_eback;
      *this->_IGnext = Set_egptr;
      *this->_IGcount = 0;
    }
    v11 = pos;
    result->_Myoff = 0i64;
    result->_Fpos = v11;
    result->_Mystate = this->_State;
  }
  return result;
}

// File Line: 559
// RVA: 0x12DED34
std::fpos<int> *__fastcall std::filebuf::seekpos(
        std::filebuf *this,
        std::fpos<int> *result,
        std::fpos<int> *_Pos,
        int __formal)
{
  bool v4; // zf
  __int64 Myoff; // rsi
  char **IGfirst; // rdx
  char *Set_egptr; // rcx
  __int64 v11; // rax
  __int64 pos; // [rsp+30h] [rbp+8h] BYREF

  v4 = this->_Myfile == 0i64;
  Myoff = _Pos->_Myoff;
  pos = _Pos->_Fpos;
  if ( v4
    || !std::filebuf::_Endwrite(this)
    || fsetpos(this->_Myfile, &pos)
    || Myoff && (unsigned int)fseeki64(this->_Myfile, Myoff, 1u)
    || fgetpos(this->_Myfile, &pos) )
  {
    result->_Fpos = 0i64;
    result->_Mystate = 0;
    result->_Myoff = std::_BADOFF;
  }
  else
  {
    IGfirst = this->_IGfirst;
    this->_State = _Pos->_Mystate;
    if ( *IGfirst == &this->_Mychar )
    {
      Set_egptr = this->_Set_egptr;
      *IGfirst = this->_Set_eback;
      *this->_IGnext = Set_egptr;
      *this->_IGcount = 0;
    }
    v11 = pos;
    result->_Myoff = 0i64;
    result->_Fpos = v11;
    result->_Mystate = this->_State;
  }
  return result;
}

// File Line: 577
// RVA: 0x12DEE38
std::filebuf *__fastcall std::filebuf::setbuf(std::filebuf *this, char *_Buffer, unsigned __int64 _Count)
{
  _iobuf *Myfile; // rcx
  int v6; // r8d

  Myfile = this->_Myfile;
  if ( !Myfile )
    return 0i64;
  v6 = _Buffer || _Count ? 0 : 4;
  if ( setvbuf(Myfile, _Buffer, v6, _Count) )
    return 0i64;
  std::filebuf::_Init(this, this->_Myfile, _Openfl);
  return this;
}

// File Line: 590
// RVA: 0x12DEE8C
__int64 __fastcall std::filebuf::sync(std::filebuf *this)
{
  unsigned int v2; // ebx

  if ( !this->_Myfile )
    return 0;
  v2 = -1;
  if ( this->vfptr->overflow(this, -1) == -1 || fflush(this->_Myfile) >= 0 )
    return 0;
  return v2;
}

// File Line: 597
// RVA: 0x12DE930
void __fastcall std::filebuf::imbue(std::filebuf *this, std::locale *_Loc)
{
  std::codecvt<char,char,int> *v3; // rax

  v3 = std::use_facet<std::codecvt<char,char,int>>(_Loc);
  std::filebuf::_Initcvt(this, v3);
}

// File Line: 602
// RVA: 0x12DE77C
void __fastcall std::filebuf::_Init(std::filebuf *this, _iobuf *_File, std::filebuf::_Initfl _Which)
{
  int v3; // eax

  this->_IPfirst = &this->_Pfirst;
  this->_Closef = _Which == _Openfl;
  this->_Wrotesome = 0;
  this->_IGfirst = &this->_Gfirst;
  this->_IGnext = &this->_Gnext;
  this->_IPnext = &this->_Pnext;
  this->_IGcount = &this->_Gcount;
  this->_IPcount = &this->_Pcount;
  this->_Pfirst = 0i64;
  *this->_IPnext = 0i64;
  *this->_IPcount = 0;
  *this->_IGfirst = 0i64;
  *this->_IGnext = 0i64;
  *this->_IGcount = 0;
  if ( _File )
  {
    this->_IGnext = &_File->_ptr;
    this->_IPnext = &_File->_ptr;
    this->_IGfirst = &_File->_base;
    this->_IPfirst = &_File->_base;
    this->_IGcount = &_File->_cnt;
    this->_IPcount = &_File->_cnt;
  }
  this->_Myfile = _File;
  v3 = `std::filebuf::_Init::`2::_Stinit;
  this->_Pcvt = 0i64;
  this->_State = v3;
}

// File Line: 634
// RVA: 0x12DE530
char __fastcall std::filebuf::_Endwrite(std::filebuf *this)
{
  char v2; // bl
  char v4; // si
  std::string *Ptr; // rdx
  std::string *v6; // r8
  int v7; // ecx
  int v8; // ecx
  std::string *v9; // rax
  __int64 v10; // r14
  std::string *v11; // rcx
  __int64 v12[2]; // [rsp+30h] [rbp-40h] BYREF
  std::string v13; // [rsp+40h] [rbp-30h] BYREF

  v12[1] = -2i64;
  v2 = 0;
  if ( !this->_Pcvt || !this->_Wrotesome )
    return 1;
  if ( this->vfptr->overflow(this, -1) == -1 )
    return 0;
  v13._Myres = 15i64;
  v13._Mysize = 0i64;
  v13._Bx._Buf[0] = 0;
  std::string::assign(&v13, 8ui64, 0);
  v4 = 1;
  while ( 1 )
  {
    Ptr = &v13;
    if ( v13._Myres >= 0x10 )
      Ptr = (std::string *)v13._Bx._Ptr;
    v6 = &v13;
    if ( v13._Myres >= 0x10 )
      v6 = (std::string *)v13._Bx._Ptr;
    v7 = ((__int64 (__fastcall *)(std::codecvt<char,char,int> *, int *, std::string *, char *, __int64 *))this->_Pcvt->vfptr[2]._Decref)(
           this->_Pcvt,
           &this->_State,
           v6,
           (char *)Ptr + v13._Mysize,
           v12);
    if ( !v7 )
    {
      this->_Wrotesome = 0;
      goto LABEL_14;
    }
    v8 = v7 - 1;
    if ( v8 )
      break;
LABEL_14:
    v9 = &v13;
    if ( v13._Myres >= 0x10 )
      v9 = (std::string *)v13._Bx._Ptr;
    v10 = v12[0] - (_QWORD)v9;
    if ( (std::string *)v12[0] != v9 )
    {
      v11 = &v13;
      if ( v13._Myres >= 0x10 )
        v11 = (std::string *)v13._Bx._Ptr;
      if ( v10 != fwrite(v11->_Bx._Buf, 1ui64, v12[0] - (_QWORD)v9, this->_Myfile) )
        goto LABEL_26;
    }
    if ( !this->_Wrotesome )
    {
      v2 = 1;
LABEL_26:
      v4 = v2;
      goto LABEL_27;
    }
    if ( !v10 )
      std::string::append(&v13, 8ui64, 0);
  }
  if ( v8 != 2 )
    goto LABEL_28;
LABEL_27:
  v2 = v4;
LABEL_28:
  if ( v13._Myres >= 0x10 )
    Illusion::ShaderParam::operator delete(v13._Bx._Ptr);
  return v2;
}

// File Line: 675
// RVA: 0x12DE828
void __fastcall std::filebuf::_Initcvt(std::filebuf *this, std::codecvt<char,char,int> *_Newpcvt)
{
  if ( ((unsigned __int8 (__fastcall *)(std::codecvt<char,char,int> *))_Newpcvt->vfptr[1].__vecDelDtor)(_Newpcvt) )
  {
    this->_Pcvt = 0i64;
  }
  else
  {
    this->_Pcvt = _Newpcvt;
    this->_IGfirst = &this->_Gfirst;
    this->_IPfirst = &this->_Pfirst;
    this->_IGnext = &this->_Gnext;
    this->_IPnext = &this->_Pnext;
    this->_IGcount = &this->_Gcount;
    this->_IPcount = &this->_Pcount;
    this->_Pfirst = 0i64;
    *this->_IPnext = 0i64;
    *this->_IPcount = 0;
    *this->_IGfirst = 0i64;
    *this->_IGnext = 0i64;
    *this->_IGcount = 0;
  }
}

