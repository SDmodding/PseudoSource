// File Line: 167
// RVA: 0x82D80
void __fastcall std::error_category::~error_category(std::error_category *this)
{
  this->vfptr = (std::error_categoryVtbl *)&std::error_category::`vftable';
}

// File Line: 401
// RVA: 0x83AA0
std::error_condition *__fastcall std::error_category::default_error_condition(std::error_category *this, std::error_condition *result, int _Errval)
{
  result->_Myval = _Errval;
  result->_Mycat = this;
  return result;
}

// File Line: 408
// RVA: 0x83BE0
bool __fastcall std::error_category::equivalent(std::error_category *this, int _Errval, std::error_condition *_Cond)
{
  std::error_condition *v3; // rbx
  std::error_condition *v4; // rax
  char v6; // [rsp+20h] [rbp-18h]

  v3 = _Cond;
  v4 = this->vfptr->default_error_condition(this, (std::error_condition *)&v6, _Errval);
  return v4->_Mycat == v3->_Mycat && v4->_Myval == v3->_Myval;
}

// File Line: 415
// RVA: 0x83BC0
bool __fastcall std::error_category::equivalent(std::error_category *this, std::error_code *_Code, int _Errval)
{
  return this == _Code->_Mycat && _Code->_Myval == _Errval;
}

// File Line: 585
// RVA: 0x84140
const char *__fastcall std::_Generic_error_category::name(std::_Generic_error_category *this)
{
  return "generic";
}

// File Line: 590
// RVA: 0x83FE0
std::basic_string<char,std::char_traits<char>,std::allocator<char> > *__fastcall std::_Generic_error_category::message(std::_Generic_error_category *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result, int _Errcode)
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > *v3; // rdi
  unsigned __int64 v4; // rbx
  const char *v5; // rax
  const char *v6; // rdx

  v3 = result;
  v4 = 0i64;
  v5 = std::_Syserror_map(_Errcode);
  v6 = "unknown error";
  if ( v5 )
    v6 = v5;
  v3->_Myres = 15i64;
  v3->_Mysize = 0i64;
  v3->_Bx._Buf[0] = 0;
  if ( *v6 )
  {
    v4 = -1i64;
    do
      ++v4;
    while ( v6[v4] );
  }
  std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(v3, v6, v4);
  return v3;
}

// File Line: 606
// RVA: 0x84150
const char *__fastcall std::_Iostream_error_category::name(std::_Iostream_error_category *this)
{
  return "iostream";
}

// File Line: 611
// RVA: 0x84060
std::basic_string<char,std::char_traits<char>,std::allocator<char> > *__fastcall std::_Iostream_error_category::message(std::_Iostream_error_category *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result, int _Errcode)
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > *v3; // rbx

  v3 = result;
  if ( _Errcode == 1 )
  {
    result->_Myres = 15i64;
    result->_Mysize = 0i64;
    result->_Bx._Buf[0] = 0;
    std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(
      result,
      "iostream stream error",
      0x15ui64);
  }
  else
  {
    std::_Generic_error_category::message((std::_Generic_error_category *)&this->vfptr, result, _Errcode);
  }
  return v3;
}

// File Line: 629
// RVA: 0x84160
const char *__fastcall std::_System_error_category::name(std::_System_error_category *this)
{
  return "system";
}

// File Line: 634
// RVA: 0x840C0
std::basic_string<char,std::char_traits<char>,std::allocator<char> > *__fastcall std::_System_error_category::message(std::_System_error_category *this, std::basic_string<char,std::char_traits<char>,std::allocator<char> > *result, int _Errcode)
{
  std::basic_string<char,std::char_traits<char>,std::allocator<char> > *v3; // rdi
  unsigned __int64 v4; // rbx
  const char *v5; // rax
  const char *v6; // rdx

  v3 = result;
  v4 = 0i64;
  v5 = std::_Winerror_map(_Errcode);
  v6 = "unknown error";
  if ( v5 )
    v6 = v5;
  v3->_Myres = 15i64;
  v3->_Mysize = 0i64;
  v3->_Bx._Buf[0] = 0;
  if ( *v6 )
  {
    v4 = -1i64;
    do
      ++v4;
    while ( v6[v4] );
  }
  std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(v3, v6, v4);
  return v3;
}

// File Line: 641
// RVA: 0x83A60
std::error_condition *__fastcall std::_System_error_category::default_error_condition(std::_System_error_category *this, std::error_condition *result, int _Errval)
{
  int v3; // edi
  std::error_condition *v4; // rbx
  const char *v5; // rax
  bool v6; // zf
  std::_System_error_category *v7; // rax

  v3 = _Errval;
  v4 = result;
  v5 = std::_Syserror_map(_Errval);
  v4->_Myval = v3;
  v6 = v5 == 0i64;
  v7 = (std::_System_error_category *)&std::_Error_objects<int>::_Generic_object;
  if ( v6 )
    v7 = &std::_Error_objects<int>::_System_object;
  v4->_Mycat = (std::error_category *)&v7->vfptr;
  return v4;
}

