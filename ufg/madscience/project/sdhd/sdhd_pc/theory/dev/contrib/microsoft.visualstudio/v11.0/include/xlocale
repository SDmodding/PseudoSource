// File Line: 143
// RVA: 0x83470
void __fastcall std::locale::facet::_Incref(std::locale::facet *this)
{
  _InterlockedIncrement((volatile signed __int32 *)&this->_Refs);
}

// File Line: 148
// RVA: 0x832A0
std::locale::facet *__fastcall std::locale::facet::_Decref(std::locale::facet *this)
{
  std::locale::facet *result; // rax

  result = 0i64;
  if ( !_InterlockedAdd((volatile signed __int32 *)&this->_Refs, 0xFFFFFFFF) )
    return this;
  return result;
}

// File Line: 165
// RVA: 0x82D90
void __fastcall std::locale::facet::~facet(std::locale::facet *this)
{
  this->vfptr = (std::_Facet_baseVtbl *)&std::locale::facet::`vftable;
  this->vfptr = (std::_Facet_baseVtbl *)&std::_Facet_base::`vftable;
}

// File Line: 421
// RVA: 0x82DE0
void __fastcall std::locale::~locale(std::locale *this)
{
  std::locale::_Locimp *Ptr; // rcx
  std::_Facet_base *v2; // rax

  Ptr = this->_Ptr;
  if ( Ptr )
  {
    v2 = Ptr->vfptr->_Decref(Ptr);
    if ( v2 )
      v2->vfptr->__vecDelDtor(v2, 1u);
  }
}

// File Line: 543
// RVA: 0x82700
std::ctype<char> *__fastcall std::use_facet<std::ctype<char>>(std::locale *_Loc)
{
  std::locale::facet *v2; // rsi
  unsigned __int64 Id; // rdi
  std::locale::_Locimp *Ptr; // rcx
  std::locale::facet *v5; // rbx
  std::locale::_Locimp *v6; // rax
  std::bad_cast pExceptionObject; // [rsp+28h] [rbp-30h] BYREF
  std::_Lockit v9; // [rsp+60h] [rbp+8h] BYREF
  std::_Lockit v10; // [rsp+68h] [rbp+10h] BYREF
  std::locale::facet *_Ppf; // [rsp+70h] [rbp+18h] BYREF

  std::_Lockit::_Lockit(&v10, 0);
  v2 = std::_Facetptr<std::ctype<char>>::_Psave;
  _Ppf = std::_Facetptr<std::ctype<char>>::_Psave;
  Id = std::ctype<char>::id._Id;
  if ( !std::ctype<char>::id._Id )
  {
    std::_Lockit::_Lockit(&v9, 0);
    if ( std::ctype<char>::id._Id == Id )
      std::ctype<char>::id._Id = ++std::locale::id::_Id_cnt;
    std::_Lockit::~_Lockit(&v9);
    Id = std::ctype<char>::id._Id;
  }
  Ptr = _Loc->_Ptr;
  if ( Id >= _Loc->_Ptr->_Facetcount )
  {
    v5 = 0i64;
  }
  else
  {
    v5 = Ptr->_Facetvec[Id];
    if ( v5 )
      goto LABEL_18;
  }
  if ( !Ptr->_Xparent )
    goto LABEL_12;
  v6 = std::locale::_Getgloballocale();
  if ( Id < v6->_Facetcount )
  {
    v5 = v6->_Facetvec[Id];
LABEL_12:
    if ( v5 )
      goto LABEL_18;
  }
  if ( v2 )
  {
    v5 = v2;
  }
  else
  {
    if ( std::ctype<char>::_Getcat(&_Ppf, _Loc) == -1i64 )
    {
      std::bad_cast::bad_cast(&pExceptionObject, "bad cast");
      CxxThrowException(&pExceptionObject, &TI2_AVbad_cast_std__);
    }
    v5 = _Ppf;
    std::_Facetptr<std::ctype<char>>::_Psave = _Ppf;
    _Ppf->vfptr->_Incref(_Ppf);
    std::_Facet_Register(v5);
  }
LABEL_18:
  std::_Lockit::~_Lockit(&v10);
  return (std::ctype<char> *)v5;
}

// File Line: 2089
// RVA: 0x82D40
void __fastcall std::ctype_base::~ctype_base(std::ctype_base *this)
{
  this->vfptr = (std::_Facet_baseVtbl *)&std::ctype_base::`vftable;
  this->vfptr = (std::_Facet_baseVtbl *)&std::locale::facet::`vftable;
  this->vfptr = (std::_Facet_baseVtbl *)&std::_Facet_base::`vftable;
}

// File Line: 2448
// RVA: 0x82840
void __fastcall std::ctype<char>::ctype<char>(std::ctype<char> *this, std::_Locinfo *_Lobj, unsigned __int64 _Refs)
{
  _Ctypevec result; // [rsp+28h] [rbp-30h] BYREF

  this->vfptr = (std::_Facet_baseVtbl *)&std::_Facet_base::`vftable;
  this->vfptr = (std::_Facet_baseVtbl *)&std::locale::facet::`vftable;
  this->_Refs = _Refs;
  this->vfptr = (std::_Facet_baseVtbl *)&std::ctype_base::`vftable;
  this->vfptr = (std::_Facet_baseVtbl *)&std::ctype<char>::`vftable;
  this->_Ctype = *Getctype(&result, _Lobj);
}

// File Line: 2454
// RVA: 0x832B0
unsigned __int64 __fastcall std::ctype<char>::_Getcat(std::locale::facet **_Ppf, std::locale *_Ploc)
{
  char v4; // bl
  std::ctype<char> *v5; // rsi
  std::locale::_Locimp *Ptr; // rcx
  const char *Myptr; // rdx
  std::_Locinfo *v8; // rax
  std::locale::facet *v9; // rax
  std::_Locinfo v11; // [rsp+30h] [rbp-78h] BYREF

  v4 = 0;
  if ( _Ppf && !*_Ppf )
  {
    v5 = (std::ctype<char> *)AMemory::malloc_default(0x30ui64);
    if ( v5 )
    {
      Ptr = _Ploc->_Ptr;
      if ( _Ploc->_Ptr )
      {
        Myptr = Ptr->_Name._Myptr;
        if ( !Myptr )
          Myptr = &Ptr->_Name._Nul;
      }
      else
      {
        Myptr = &customCaption;
      }
      std::_Locinfo::_Locinfo(&v11, Myptr);
      v4 = 1;
      std::ctype<char>::ctype<char>(v5, v8, 0i64);
    }
    else
    {
      v9 = 0i64;
    }
    *_Ppf = v9;
    if ( (v4 & 1) != 0 )
      std::_Locinfo::~_Locinfo(&v11);
  }
  return 2i64;
}

// File Line: 2477
// RVA: 0x82BD0
void __fastcall std::ctype<char>::~ctype<char>(std::ctype<char> *this)
{
  int Delfl; // eax

  this->vfptr = (std::_Facet_baseVtbl *)&std::ctype<char>::`vftable;
  Delfl = this->_Ctype._Delfl;
  if ( Delfl <= 0 )
  {
    if ( Delfl < 0 )
      Illusion::ShaderParam::operator delete((void *)this->_Ctype._Table);
  }
  else
  {
    free((void *)this->_Ctype._Table);
  }
  free(this->_Ctype._LocaleName);
  this->vfptr = (std::_Facet_baseVtbl *)&std::ctype_base::`vftable;
  this->vfptr = (std::_Facet_baseVtbl *)&std::locale::facet::`vftable;
  this->vfptr = (std::_Facet_baseVtbl *)&std::_Facet_base::`vftable;
}

// File Line: 2497
// RVA: 0x83AD0
int __fastcall std::ctype<char>::do_tolower(std::ctype<char> *this, unsigned __int8 _Ch)
{
  return Tolower(_Ch, &this->_Ctype);
}

// File Line: 2503
// RVA: 0x83AE0
const char *__fastcall std::ctype<char>::do_tolower(std::ctype<char> *this, char *_First, const char *_Last)
{
  const char *v4; // rbx
  _Ctypevec *p_Ctype; // rsi
  char v6; // al

  v4 = _First;
  if ( _First != _Last )
  {
    p_Ctype = &this->_Ctype;
    do
    {
      v6 = Tolower(*(unsigned __int8 *)v4++, p_Ctype);
      *((_BYTE *)v4 - 1) = v6;
    }
    while ( v4 != _Last );
  }
  return v4;
}

// File Line: 2511
// RVA: 0x83B30
int __fastcall std::ctype<char>::do_toupper(std::ctype<char> *this, unsigned __int8 _Ch)
{
  return Toupper(_Ch, &this->_Ctype);
}

// File Line: 2517
// RVA: 0x83B40
const char *__fastcall std::ctype<char>::do_toupper(std::ctype<char> *this, char *_First, const char *_Last)
{
  const char *v4; // rbx
  _Ctypevec *p_Ctype; // rsi
  char v6; // al

  v4 = _First;
  if ( _First != _Last )
  {
    p_Ctype = &this->_Ctype;
    do
    {
      v6 = Toupper(*(unsigned __int8 *)v4++, p_Ctype);
      *((_BYTE *)v4 - 1) = v6;
    }
    while ( v4 != _Last );
  }
  return v4;
}

// File Line: 2531
// RVA: 0x83BA0
const char *__fastcall std::ctype<char>::do_widen(
        std::ctype<char> *this,
        const char *_First,
        const char *_Last,
        char *_Dest)
{
  memmove(_Dest, _First, _Last - _First);
  return _Last;
}

// File Line: 2539
// RVA: 0x83B90
__int64 __fastcall std::ctype<char>::do_narrow(std::ctype<char> *this, unsigned __int8 _Byte)
{
  return _Byte;
}

// File Line: 2545
// RVA: 0x83AB0
const char *__fastcall std::ctype<char>::do_narrow(
        std::ctype<char> *this,
        const char *_First,
        const char *_Last,
        char __formal,
        char *_Dest)
{
  memmove(_Dest, _First, _Last - _First);
  return _Last;
}

