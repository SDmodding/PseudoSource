// File Line: 26
// RVA: 0x85310
void __fastcall std::streambuf::streambuf(std::streambuf *this)
{
  std::locale *v2; // rdi

  this->vfptr = (std::streambufVtbl *)&std::streambuf::`vftable;
  v2 = (std::locale *)AMemory::malloc_default(8ui64);
  if ( v2 )
    v2->_Ptr = std::locale::_Init(1);
  else
    v2 = 0i64;
  this->_Plocale = v2;
  this->_IGfirst = &this->_Gfirst;
  this->_IPfirst = &this->_Pfirst;
  this->_IGnext = &this->_Gnext;
  this->_IPnext = &this->_Pnext;
  this->_IGcount = &this->_Gcount;
  this->_IPcount = &this->_Pcount;
  this->_Pfirst = 0i64;
  *this->_IPnext = 0i64;
  *this->_IPcount = 0;
  *this->_IGfirst = 0i64;
  *this->_IGnext = 0i64;
  *this->_IGcount = 0;
}

// File Line: 276
// RVA: 0x83380
__int64 __fastcall std::streambuf::_Gnavail(std::streambuf *this)
{
  if ( *this->_IGnext )
    return *this->_IGcount;
  else
    return 0i64;
}

// File Line: 307
// RVA: 0x869A0
__int64 __fastcall std::streambuf::_Pnavail(std::streambuf *this)
{
  if ( *this->_IPnext )
    return *this->_IPcount;
  else
    return 0i64;
}

// File Line: 355
// RVA: 0x87C00
__int64 __fastcall std::streambuf::uflow(std::streambuf *this)
{
  char **IGnext; // rcx
  char *v4; // rdx

  if ( this->vfptr->underflow(this) == -1 )
    return 0xFFFFFFFFi64;
  --*this->_IGcount;
  IGnext = this->_IGnext;
  v4 = (*IGnext)++;
  return (unsigned __int8)*v4;
}

// File Line: 362
// RVA: 0x87C40
__int64 __fastcall std::streambuf::xsgetn(std::streambuf *this, char *_Ptr, __int64 _Count)
{
  __int64 v3; // rbp
  __int64 v4; // rdi
  __int64 v7; // rax
  size_t v8; // rbx
  int v9; // eax

  v3 = 0i64;
  v4 = _Count;
  if ( _Count <= 0 )
    return 0i64;
  do
  {
    v7 = std::streambuf::_Gnavail(this);
    v8 = v7;
    if ( v7 <= 0 )
    {
      v9 = this->vfptr->uflow(this);
      if ( v9 == -1 )
        return v3;
      *_Ptr++ = v9;
      ++v3;
      --v4;
    }
    else
    {
      if ( v4 < v7 )
        v8 = v4;
      if ( v8 )
        memmove(_Ptr, *(const void **)this->_IGnext, v8);
      _Ptr += v8;
      v3 += v8;
      *this->_IGcount -= v8;
      v4 -= v8;
      *this->_IGnext += (int)v8;
    }
  }
  while ( v4 > 0 );
  return v3;
}

// File Line: 391
// RVA: 0x87D00
__int64 __fastcall std::streambuf::xsputn(std::streambuf *this, const char *_Ptr, __int64 _Count)
{
  __int64 v3; // rbp
  __int64 v4; // rdi
  __int64 v7; // rax
  size_t v8; // rbx

  v3 = 0i64;
  v4 = _Count;
  if ( _Count <= 0 )
    return 0i64;
  do
  {
    v7 = std::streambuf::_Pnavail(this);
    v8 = v7;
    if ( v7 <= 0 )
    {
      if ( this->vfptr->overflow(this, *(unsigned __int8 *)_Ptr) == -1 )
        return v3;
      ++_Ptr;
      ++v3;
      --v4;
    }
    else
    {
      if ( v4 < v7 )
        v8 = v4;
      if ( v8 )
        memmove(*(void **)this->_IPnext, _Ptr, v8);
      _Ptr += v8;
      v3 += v8;
      *this->_IPcount -= v8;
      v4 -= v8;
      *this->_IPnext += (int)v8;
    }
  }
  while ( v4 > 0 );
  return v3;
}

// File Line: 421
// RVA: 0x87BA0
std::fpos<int> *__fastcall std::streambuf::seekpos(
        std::streambuf *this,
        std::fpos<int> *result,
        std::fpos<int> *__formal,
        int a4)
{
  result->_Myoff = std::_BADOFF;
  result->_Fpos = 0i64;
  result->_Mystate = 0;
  return result;
}

