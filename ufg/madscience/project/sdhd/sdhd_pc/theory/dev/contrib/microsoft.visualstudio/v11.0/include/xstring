// File Line: 521
// RVA: 0x83480
std::_String_val<std::_Simple_types<char> > *__fastcall std::_String_val<std::_Simple_types<char>>::_Myptr(
        std::_String_val<std::_Simple_types<char> > *this)
{
  if ( this->_Myres < 0x10 )
    return this;
  else
    return (std::_String_val<std::_Simple_types<char> > *)this->_Bx._Ptr;
}

// File Line: 948
// RVA: 0x83100
void __fastcall std::string::_Assign_rv(std::string *this, std::string *_Right)
{
  if ( _Right->_Myres >= 0x10 )
  {
    if ( this )
      this->_Bx._Ptr = _Right->_Bx._Ptr;
    _Right->_Bx._Ptr = 0i64;
  }
  else if ( _Right->_Mysize != -1i64 )
  {
    memmove(this, _Right, _Right->_Mysize + 1);
  }
  this->_Mysize = _Right->_Mysize;
  this->_Myres = _Right->_Myres;
  _Right->_Myres = 15i64;
  _Right->_Mysize = 0i64;
  _Right->_Bx._Buf[0] = 0;
}

// File Line: 963
// RVA: 0x82B90
void __fastcall std::string::~string(std::string *this)
{
  if ( this->_Myres >= 0x10 )
    Illusion::ShaderParam::operator delete(this->_Bx._Ptr);
  this->_Myres = 15i64;
  this->_Mysize = 0i64;
  this->_Bx._Buf[0] = 0;
}

// File Line: 1019
// RVA: 0x834F0
std::string *__fastcall std::string::append(
        std::string *this,
        std::string *_Right,
        unsigned __int64 _Roff,
        unsigned __int64 _Count)
{
  unsigned __int64 Mysize; // rax
  size_t v5; // rsi
  std::string *Ptr; // r14
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // r8
  unsigned __int64 v11; // rdi
  unsigned __int64 Myres; // rax
  std::string *v13; // rcx
  bool v14; // cf
  std::string *v15; // rax

  Mysize = _Right->_Mysize;
  v5 = _Count;
  Ptr = _Right;
  if ( Mysize < _Roff )
    std::_Xout_of_range("invalid string position");
  v9 = Mysize - _Roff;
  v10 = this->_Mysize;
  if ( v9 < _Count )
    v5 = v9;
  if ( -1i64 - v10 <= v5 )
    std::_Xlength_error("string too long");
  if ( v5 )
  {
    v11 = v10 + v5;
    if ( v10 + v5 == -1i64 )
      std::_Xlength_error("string too long");
    Myres = this->_Myres;
    if ( Myres >= v11 )
    {
      if ( !v11 )
      {
        this->_Mysize = 0i64;
        if ( Myres < 0x10 )
          this->_Bx._Buf[0] = 0;
        else
          *this->_Bx._Ptr = 0;
        return this;
      }
    }
    else
    {
      std::string::_Copy(this, v10 + v5, v10);
      if ( !v11 )
        return this;
    }
    if ( Ptr->_Myres >= 0x10 )
      Ptr = (std::string *)Ptr->_Bx._Ptr;
    if ( this->_Myres < 0x10 )
      v13 = this;
    else
      v13 = (std::string *)this->_Bx._Ptr;
    memmove(&v13->_Bx._Buf[this->_Mysize], &Ptr->_Bx._Buf[_Roff], v5);
    v14 = this->_Myres < 0x10;
    this->_Mysize = v11;
    if ( v14 )
      v15 = this;
    else
      v15 = (std::string *)this->_Bx._Ptr;
    v15->_Bx._Buf[v11] = 0;
  }
  return this;
}

// File Line: 1066
// RVA: 0x83620
std::string *__fastcall std::string::append(std::string *this, size_t _Count, char _Ch)
{
  unsigned __int64 Mysize; // r8
  unsigned __int64 v7; // rdi
  unsigned __int64 Myres; // rax
  unsigned __int64 v9; // rcx
  std::string *Ptr; // rax
  bool v11; // cf
  std::string *v12; // rax

  Mysize = this->_Mysize;
  if ( -1i64 - Mysize <= _Count )
    std::_Xlength_error("string too long");
  if ( _Count )
  {
    v7 = Mysize + _Count;
    if ( Mysize + _Count == -1i64 )
      std::_Xlength_error("string too long");
    Myres = this->_Myres;
    if ( Myres >= v7 )
    {
      if ( !v7 )
      {
        this->_Mysize = 0i64;
        if ( Myres < 0x10 )
          this->_Bx._Buf[0] = 0;
        else
          *this->_Bx._Ptr = 0;
        return this;
      }
    }
    else
    {
      std::string::_Copy(this, Mysize + _Count, Mysize);
      if ( !v7 )
        return this;
    }
    v9 = this->_Mysize;
    if ( _Count == 1 )
    {
      if ( this->_Myres < 0x10 )
        this->_Bx._Buf[v9] = _Ch;
      else
        this->_Bx._Ptr[v9] = _Ch;
    }
    else
    {
      if ( this->_Myres < 0x10 )
        Ptr = this;
      else
        Ptr = (std::string *)this->_Bx._Ptr;
      memset(&Ptr->_Bx._Buf[v9], _Ch, _Count);
    }
    v11 = this->_Myres < 0x10;
    this->_Mysize = v7;
    if ( v11 )
      v12 = this;
    else
      v12 = (std::string *)this->_Bx._Ptr;
    v12->_Bx._Buf[v7] = 0;
  }
  return this;
}

// File Line: 1104
// RVA: 0x83730
std::string *__fastcall std::string::assign(
        std::string *this,
        std::string *_Right,
        unsigned __int64 _Roff,
        unsigned __int64 _Count)
{
  unsigned __int64 Mysize; // rdi
  std::string *Ptr; // rsi
  std::string *v7; // rbx
  unsigned __int64 v8; // rdi
  unsigned __int64 v9; // rax
  bool v10; // cf
  unsigned __int64 Myres; // rax
  std::string *v12; // rcx
  std::string *v13; // rax

  Mysize = _Right->_Mysize;
  Ptr = _Right;
  v7 = this;
  if ( Mysize < _Roff )
    std::_Xout_of_range("invalid string position");
  v8 = Mysize - _Roff;
  if ( _Count < v8 )
    v8 = _Count;
  if ( this == _Right )
  {
    v9 = v8 + _Roff;
    if ( this->_Mysize < v8 + _Roff )
      std::_Xout_of_range("invalid string position");
    v10 = this->_Myres < 0x10;
    this->_Mysize = v9;
    if ( !v10 )
      this = (std::string *)this->_Bx._Ptr;
    this->_Bx._Buf[v9] = 0;
    std::string::erase(v7, 0i64, _Roff);
  }
  else
  {
    if ( v8 == -1i64 )
      std::_Xlength_error("string too long");
    Myres = this->_Myres;
    if ( Myres >= v8 )
    {
      if ( !v8 )
      {
        this->_Mysize = 0i64;
        if ( Myres < 0x10 )
          this->_Bx._Buf[0] = 0;
        else
          *this->_Bx._Ptr = 0;
        return v7;
      }
    }
    else
    {
      std::string::_Copy(this, v8, this->_Mysize);
      if ( !v8 )
        return v7;
    }
    if ( Ptr->_Myres >= 0x10 )
      Ptr = (std::string *)Ptr->_Bx._Ptr;
    if ( v7->_Myres < 0x10 )
      v12 = v7;
    else
      v12 = (std::string *)v7->_Bx._Ptr;
    memmove(v12, &Ptr->_Bx._Buf[_Roff], v8);
    v10 = v7->_Myres < 0x10;
    v7->_Mysize = v8;
    if ( v10 )
      v13 = v7;
    else
      v13 = (std::string *)v7->_Bx._Ptr;
    v13->_Bx._Buf[v8] = 0;
  }
  return v7;
}

// File Line: 1123
// RVA: 0x83860
std::string *__fastcall std::string::assign(std::string *this, const char *_Ptr, unsigned __int64 _Count)
{
  std::string *v5; // rbx
  unsigned __int64 Myres; // rdx
  std::string *v7; // rax
  std::string *Ptr; // rax
  std::string *result; // rax
  unsigned __int64 v10; // rax
  std::string *v11; // rcx
  bool v12; // cf
  std::string *v13; // rax

  v5 = this;
  if ( !_Ptr )
    goto LABEL_13;
  Myres = this->_Myres;
  v7 = Myres < 0x10 ? this : (std::string *)this->_Bx._Ptr;
  if ( _Ptr < (const char *)v7 )
    goto LABEL_13;
  if ( Myres >= 0x10 )
    this = (std::string *)this->_Bx._Ptr;
  if ( (char *)this + v5->_Mysize > _Ptr )
  {
    if ( Myres < 0x10 )
      Ptr = v5;
    else
      Ptr = (std::string *)v5->_Bx._Ptr;
    return std::string::assign(v5, v5, _Ptr - (const char *)Ptr, _Count);
  }
  else
  {
LABEL_13:
    if ( _Count == -1i64 )
      std::_Xlength_error("string too long");
    v10 = v5->_Myres;
    if ( v10 >= _Count )
    {
      if ( !_Count )
      {
        v5->_Mysize = 0i64;
        if ( v10 < 0x10 )
        {
          result = v5;
          v5->_Bx._Buf[0] = 0;
        }
        else
        {
          *v5->_Bx._Ptr = 0;
          return v5;
        }
        return result;
      }
    }
    else
    {
      std::string::_Copy(v5, _Count, v5->_Mysize);
    }
    if ( _Count )
    {
      if ( v5->_Myres < 0x10 )
        v11 = v5;
      else
        v11 = (std::string *)v5->_Bx._Ptr;
      memmove(v11, _Ptr, _Count);
      v12 = v5->_Myres < 0x10;
      v5->_Mysize = _Count;
      if ( v12 )
        v13 = v5;
      else
        v13 = (std::string *)v5->_Bx._Ptr;
      v13->_Bx._Buf[_Count] = 0;
    }
    return v5;
  }
}

// File Line: 1148
// RVA: 0x86AA0
std::string *__fastcall std::string::assign(std::string *this, unsigned __int64 _Count, char _Ch)
{
  unsigned __int64 Myres; // rax
  std::string *Ptr; // rcx
  bool v9; // cf
  std::string *v10; // rax

  if ( _Count == -1i64 )
    std::_Xlength_error("string too long");
  Myres = this->_Myres;
  if ( Myres >= _Count )
  {
    if ( !_Count )
    {
      this->_Mysize = 0i64;
      if ( Myres < 0x10 )
        this->_Bx._Buf[0] = 0;
      else
        *this->_Bx._Ptr = 0;
      return this;
    }
  }
  else
  {
    std::string::_Copy(this, _Count, this->_Mysize);
  }
  if ( _Count )
  {
    if ( _Count == 1 )
    {
      if ( this->_Myres < 0x10 )
        this->_Bx._Buf[0] = _Ch;
      else
        *this->_Bx._Ptr = _Ch;
    }
    else
    {
      if ( this->_Myres < 0x10 )
        Ptr = this;
      else
        Ptr = (std::string *)this->_Bx._Ptr;
      memset(Ptr, _Ch, _Count);
    }
    v9 = this->_Myres < 0x10;
    this->_Mysize = _Count;
    if ( v9 )
      v10 = this;
    else
      v10 = (std::string *)this->_Bx._Ptr;
    v10->_Bx._Buf[_Count] = 0;
  }
  return this;
}

// File Line: 1185
// RVA: 0x83E20
std::string *__fastcall std::string::insert(
        std::string *this,
        unsigned __int64 _Off,
        std::string *_Right,
        unsigned __int64 _Roff,
        size_t _Count)
{
  unsigned __int64 Mysize; // r8
  unsigned __int64 v7; // r15
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rax
  size_t v12; // rdi
  unsigned __int64 v13; // rsi
  unsigned __int64 Myres; // rax
  unsigned __int64 v15; // rax
  std::string *Ptr; // rcx
  std::string *v17; // rax
  size_t v18; // r8
  unsigned __int64 v19; // rax
  std::string *v20; // rcx
  std::string *v21; // rax
  std::string *v22; // rax
  bool v23; // cf
  std::string *v24; // rax

  Mysize = this->_Mysize;
  v7 = _Roff;
  if ( Mysize < _Off || (v10 = _Right->_Mysize, v10 < _Roff) )
    std::_Xout_of_range("invalid string position");
  v11 = v10 - _Roff;
  v12 = _Count;
  if ( v11 < _Count )
    v12 = v11;
  if ( -1i64 - Mysize <= v12 )
    std::_Xlength_error("string too long");
  if ( v12 )
  {
    v13 = Mysize + v12;
    if ( Mysize + v12 == -1i64 )
      std::_Xlength_error("string too long");
    Myres = this->_Myres;
    if ( Myres >= v13 )
    {
      if ( !v13 )
      {
        this->_Mysize = 0i64;
        if ( Myres < 0x10 )
          this->_Bx._Buf[0] = 0;
        else
          *this->_Bx._Ptr = 0;
        return this;
      }
    }
    else
    {
      std::string::_Copy(this, Mysize + v12, Mysize);
      if ( !v13 )
        return this;
    }
    v15 = this->_Myres;
    if ( v15 < 0x10 )
      Ptr = this;
    else
      Ptr = (std::string *)this->_Bx._Ptr;
    if ( v15 < 0x10 )
      v17 = this;
    else
      v17 = (std::string *)this->_Bx._Ptr;
    v18 = this->_Mysize - _Off;
    if ( v18 )
      memmove(&v17->_Bx._Buf[_Off + v12], &Ptr->_Bx._Buf[_Off], v18);
    if ( this == _Right )
    {
      if ( _Off < v7 )
        v7 += v12;
      v19 = this->_Myres;
      if ( v19 < 0x10 )
        v20 = this;
      else
        v20 = (std::string *)this->_Bx._Ptr;
      if ( v19 < 0x10 )
        v21 = this;
      else
        v21 = (std::string *)this->_Bx._Ptr;
      memmove(&v21->_Bx._Buf[_Off], &v20->_Bx._Buf[v7], v12);
    }
    else
    {
      if ( _Right->_Myres >= 0x10 )
        _Right = (std::string *)_Right->_Bx._Ptr;
      if ( this->_Myres < 0x10 )
        v22 = this;
      else
        v22 = (std::string *)this->_Bx._Ptr;
      memmove(&v22->_Bx._Buf[_Off], &_Right->_Bx._Buf[v7], v12);
    }
    v23 = this->_Myres < 0x10;
    this->_Mysize = v13;
    if ( v23 )
      v24 = this;
    else
      v24 = (std::string *)this->_Bx._Ptr;
    v24->_Bx._Buf[v13] = 0;
  }
  return this;
}

// File Line: 1246
// RVA: 0x87A30
std::string *__fastcall std::string::insert(std::string *this, unsigned __int64 _Off, size_t _Count, char _Ch)
{
  unsigned __int64 Mysize; // r8
  unsigned __int64 v9; // rdi
  unsigned __int64 Myres; // rax
  unsigned __int64 v11; // rax
  std::string *Ptr; // rcx
  std::string *v13; // rax
  size_t v14; // r8
  std::string *v15; // rax
  bool v16; // cf
  std::string *v17; // rax

  Mysize = this->_Mysize;
  if ( Mysize < _Off )
    std::_Xout_of_range("invalid string position");
  if ( -1i64 - Mysize <= _Count )
    std::_Xlength_error("string too long");
  if ( _Count )
  {
    v9 = Mysize + _Count;
    if ( Mysize + _Count == -1i64 )
      std::_Xlength_error("string too long");
    Myres = this->_Myres;
    if ( Myres >= v9 )
    {
      if ( !v9 )
      {
        this->_Mysize = 0i64;
        if ( Myres < 0x10 )
          this->_Bx._Buf[0] = 0;
        else
          *this->_Bx._Ptr = 0;
        return this;
      }
    }
    else
    {
      std::string::_Copy(this, Mysize + _Count, Mysize);
      if ( !v9 )
        return this;
    }
    v11 = this->_Myres;
    if ( v11 < 0x10 )
      Ptr = this;
    else
      Ptr = (std::string *)this->_Bx._Ptr;
    if ( v11 < 0x10 )
      v13 = this;
    else
      v13 = (std::string *)this->_Bx._Ptr;
    v14 = this->_Mysize - _Off;
    if ( v14 )
      memmove(&v13->_Bx._Buf[_Off + _Count], &Ptr->_Bx._Buf[_Off], v14);
    if ( _Count == 1 )
    {
      if ( this->_Myres < 0x10 )
        this->_Bx._Buf[_Off] = _Ch;
      else
        this->_Bx._Ptr[_Off] = _Ch;
    }
    else
    {
      if ( this->_Myres < 0x10 )
        v15 = this;
      else
        v15 = (std::string *)this->_Bx._Ptr;
      memset(&v15->_Bx._Buf[_Off], _Ch, _Count);
    }
    v16 = this->_Myres < 0x10;
    this->_Mysize = v9;
    if ( v16 )
      v17 = this;
    else
      v17 = (std::string *)this->_Bx._Ptr;
    v17->_Bx._Buf[v9] = 0;
  }
  return this;
}

// File Line: 1317
// RVA: 0x83C20
std::string *__fastcall std::string::erase(std::string *this, unsigned __int64 _Off, unsigned __int64 _Count)
{
  unsigned __int64 Mysize; // rdi
  bool v5; // cf
  std::string *Ptr; // rax
  unsigned __int64 v8; // rdi

  Mysize = this->_Mysize;
  if ( Mysize < _Off )
    std::_Xout_of_range("invalid string position");
  if ( Mysize - _Off > _Count )
  {
    if ( _Count )
    {
      if ( this->_Myres < 0x10 )
        Ptr = this;
      else
        Ptr = (std::string *)this->_Bx._Ptr;
      v8 = Mysize - _Count;
      if ( v8 != _Off )
        memmove(&Ptr->_Bx._Buf[_Off], &Ptr->_Bx._Buf[_Off + _Count], v8 - _Off);
      v5 = this->_Myres < 0x10;
      this->_Mysize = v8;
      if ( !v5 )
      {
        this->_Bx._Ptr[v8] = 0;
        return this;
      }
      this->_Bx._Buf[v8] = 0;
    }
    return this;
  }
  else
  {
    v5 = this->_Myres < 0x10;
    this->_Mysize = _Off;
    if ( v5 )
      this->_Bx._Buf[_Off] = 0;
    else
      this->_Bx._Ptr[_Off] = 0;
    return this;
  }
}

// File Line: 2116
// RVA: 0x15D7C0
__int64 __fastcall std::string::compare(std::string *this, std::string *_Right)
{
  unsigned __int64 Mysize; // rdi
  unsigned __int64 v3; // rbx
  size_t v4; // r8
  unsigned int v5; // esi
  __int64 result; // rax

  Mysize = _Right->_Mysize;
  if ( _Right->_Myres >= 0x10 )
    _Right = (std::string *)_Right->_Bx._Ptr;
  v3 = this->_Mysize;
  if ( this->_Myres >= 0x10 )
    this = (std::string *)this->_Bx._Ptr;
  v4 = Mysize;
  if ( v3 < Mysize )
    v4 = v3;
  v5 = 0;
  if ( v4 )
    LODWORD(result) = memcmp(this, _Right, v4);
  else
    LODWORD(result) = 0;
  result = (int)result;
  if ( !(_DWORD)result )
  {
    if ( v3 >= Mysize )
    {
      LOBYTE(v5) = v3 != Mysize;
      return v5;
    }
    else
    {
      return 0xFFFFFFFFi64;
    }
  }
  return result;
}

// File Line: 2151
// RVA: 0x15D840
__int64 __fastcall std::string::compare(
        std::string *this,
        unsigned __int64 _Off,
        unsigned __int64 _N0,
        const char *_Ptr,
        size_t _Count)
{
  unsigned __int64 Mysize; // rax
  unsigned __int64 v6; // rbx
  unsigned __int64 v7; // rax
  size_t v8; // r8
  unsigned int v9; // esi
  __int64 result; // rax

  Mysize = this->_Mysize;
  v6 = _N0;
  if ( Mysize < _Off )
    std::_Xout_of_range("invalid string position");
  v7 = Mysize - _Off;
  if ( v7 < _N0 )
    v6 = v7;
  if ( this->_Myres >= 0x10 )
    this = (std::string *)this->_Bx._Ptr;
  v8 = _Count;
  if ( v6 < _Count )
    v8 = v6;
  v9 = 0;
  if ( v8 )
    LODWORD(result) = memcmp(&this->_Bx._Buf[_Off], _Ptr, v8);
  else
    LODWORD(result) = 0;
  result = (int)result;
  if ( !(_DWORD)result )
  {
    if ( v6 >= _Count )
    {
      LOBYTE(v9) = v6 != _Count;
      return v9;
    }
    else
    {
      return 0xFFFFFFFFi64;
    }
  }
  return result;
}

// File Line: 2182
// RVA: 0x83180
// positive sp value has been detected, the output may be wrong!
void __fastcall std::string::_Copy(std::string *this, unsigned __int64 _Newsize, size_t _Oldlen)
{
  std::string *v4; // rbx
  unsigned __int64 v5; // rdi
  unsigned __int64 Myres; // r8
  unsigned __int64 v7; // rcx
  void *v8; // r14
  std::string *Ptr; // rdx

  v4 = this;
  v5 = _Newsize | 0xF;
  if ( (_Newsize | 0xF) == -1i64 )
  {
    v5 = _Newsize;
  }
  else
  {
    Myres = this->_Myres;
    v7 = Myres >> 1;
    if ( Myres >> 1 > v5 / 3 )
    {
      v5 = -2i64;
      if ( Myres <= -2i64 - v7 )
        v5 = v7 + Myres;
    }
  }
  v8 = 0i64;
  if ( v5 != -1i64 )
  {
    v8 = AMemory::malloc_default(v5 + 1);
    if ( !v8 )
      std::_Xbad_alloc();
  }
  if ( _Oldlen )
  {
    if ( v4->_Myres < 0x10 )
      Ptr = v4;
    else
      Ptr = (std::string *)v4->_Bx._Ptr;
    memmove(v8, Ptr, _Oldlen);
  }
  if ( v4->_Myres >= 0x10 )
    Illusion::ShaderParam::operator delete(v4->_Bx._Ptr);
  v4->_Myres = 15i64;
  v4->_Mysize = 0i64;
  v4->_Bx._Buf[0] = 0;
  v4->_Bx._Ptr = (char *)v8;
  v4->_Myres = v5;
  v4->_Mysize = _Oldlen;
  if ( v5 >= 0x10 )
    v4 = (std::string *)v4->_Bx._Ptr;
  v4->_Bx._Buf[_Oldlen] = 0;
}

// File Line: 2197
// RVA: 0x1341190
`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$1

// File Line: 2201
// RVA: 0x13411D8
`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$0

// File Line: 2223
// RVA: 0x833A0
bool __fastcall std::string::_Grow(std::string *this, unsigned __int64 _Newsize, bool _Trim)
{
  std::string *v4; // rbx
  unsigned __int64 Myres; // rax
  unsigned __int64 Mysize; // rsi
  char *Ptr; // r14

  v4 = this;
  if ( _Newsize == -1i64 )
    std::_Xlength_error("string too long");
  Myres = this->_Myres;
  if ( Myres >= _Newsize )
  {
    if ( _Trim && _Newsize < 0x10 )
    {
      Mysize = this->_Mysize;
      if ( _Newsize < Mysize )
        Mysize = _Newsize;
      if ( Myres >= 0x10 )
      {
        Ptr = this->_Bx._Ptr;
        if ( Mysize )
          memmove(this, this->_Bx._Ptr, Mysize);
        Illusion::ShaderParam::operator delete(Ptr);
      }
      v4->_Mysize = Mysize;
      v4->_Myres = 15i64;
      v4->_Bx._Buf[Mysize] = 0;
    }
    else if ( !_Newsize )
    {
      this->_Mysize = 0i64;
      if ( Myres >= 0x10 )
        v4 = (std::string *)this->_Bx._Ptr;
      v4->_Bx._Buf[0] = 0;
    }
  }
  else
  {
    std::string::_Copy(this, _Newsize, this->_Mysize);
  }
  return _Newsize != 0;
}

