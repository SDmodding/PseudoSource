// File Line: 782
// RVA: 0x841B0
void __fastcall std::_Tree_alloc<0,std::_Tree_base_types<std::pair<Json::Value::CZString const,Json::Value>>>::~_Tree_alloc<0,std::_Tree_base_types<std::pair<Json::Value::CZString const,Json::Value>>>(
        std::_Tree_alloc<0,std::_Tree_base_types<std::pair<Json::Value::CZString const ,Json::Value>> > *this)
{
  Illusion::ShaderParam::operator delete(this->_Myhead);
}

// File Line: 1188
// RVA: 0x84170
void __fastcall std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>(
        std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > *this)
{
  std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > result; // [rsp+48h] [rbp+10h] BYREF

  std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::erase(
    this,
    &result,
    (std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >)this->_Myhead->_Left,
    (std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >)this->_Myhead);
  Illusion::ShaderParam::operator delete(this->_Myhead);
}

// File Line: 1323
// RVA: 0x846E0
std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > *__fastcall std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::erase(
        std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > *this,
        std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > *result,
        std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > _Where)
{
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Ptr; // r14
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> **p_Right; // rcx
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Right; // rdx
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *i; // rax
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Left; // rdi
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Parent; // rbx
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v11; // rcx
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *j; // rax
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v13; // rcx
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *k; // rax
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v15; // rax
  char Color; // cl
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v17; // rcx
  unsigned __int64 Mysize; // rax
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v20; // [rsp+60h] [rbp+18h]

  if ( _Where._Ptr->_Isnil )
    std::_Xout_of_range("invalid map/set<T> iterator");
  Ptr = _Where._Ptr;
  p_Right = &_Where._Ptr->_Right;
  Right = _Where._Ptr->_Right;
  if ( Right->_Isnil )
  {
    for ( Right = _Where._Ptr->_Parent; !Right->_Isnil; Right = Right->_Parent )
    {
      if ( _Where._Ptr != Right->_Right )
        break;
      _Where._Ptr = Right;
    }
  }
  else
  {
    for ( i = Right->_Left; !i->_Isnil; i = i->_Left )
      Right = i;
  }
  v20 = Right;
  if ( Ptr->_Left->_Isnil )
  {
    Left = *p_Right;
LABEL_15:
    Parent = Ptr->_Parent;
    if ( !Left->_Isnil )
      Left->_Parent = Parent;
    if ( this->_Myhead->_Parent == Ptr )
    {
      this->_Myhead->_Parent = Left;
    }
    else if ( Parent->_Left == Ptr )
    {
      Parent->_Left = Left;
    }
    else
    {
      Parent->_Right = Left;
    }
    if ( this->_Myhead->_Left == Ptr )
    {
      if ( Left->_Isnil )
      {
        v11 = Parent;
      }
      else
      {
        v11 = Left;
        for ( j = Left->_Left; !j->_Isnil; j = j->_Left )
          v11 = j;
      }
      this->_Myhead->_Left = v11;
    }
    if ( this->_Myhead->_Right == Ptr )
    {
      if ( Left->_Isnil )
      {
        v13 = Parent;
      }
      else
      {
        v13 = Left;
        for ( k = Left->_Right; !k->_Isnil; k = k->_Right )
          v13 = k;
      }
      this->_Myhead->_Right = v13;
    }
    goto LABEL_45;
  }
  if ( (*p_Right)->_Isnil )
  {
    Left = Ptr->_Left;
    goto LABEL_15;
  }
  Left = Right->_Right;
  if ( Right == Ptr )
    goto LABEL_15;
  Ptr->_Left->_Parent = Right;
  Right->_Left = Ptr->_Left;
  if ( Right == *p_Right )
  {
    Parent = Right;
  }
  else
  {
    Parent = Right->_Parent;
    if ( !Left->_Isnil )
      Left->_Parent = Parent;
    Parent->_Left = Left;
    Right->_Right = *p_Right;
    (*p_Right)->_Parent = Right;
  }
  if ( this->_Myhead->_Parent == Ptr )
  {
    this->_Myhead->_Parent = Right;
  }
  else
  {
    v15 = Ptr->_Parent;
    if ( v15->_Left == Ptr )
      v15->_Left = Right;
    else
      v15->_Right = Right;
  }
  Right->_Parent = Ptr->_Parent;
  Color = Right->_Color;
  Right->_Color = Ptr->_Color;
  Ptr->_Color = Color;
LABEL_45:
  if ( Ptr->_Color == 1 )
  {
    while ( 1 )
    {
      if ( Left == this->_Myhead->_Parent || Left->_Color != 1 )
      {
LABEL_68:
        Left->_Color = 1;
        break;
      }
      v17 = Parent->_Left;
      if ( Left == Parent->_Left )
      {
        v17 = Parent->_Right;
        if ( !v17->_Color )
        {
          v17->_Color = 1;
          Parent->_Color = 0;
          std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Lrotate(
            this,
            Parent);
          v17 = Parent->_Right;
        }
        if ( !v17->_Isnil )
        {
          if ( v17->_Left->_Color != 1 || v17->_Right->_Color != 1 )
          {
            if ( v17->_Right->_Color == 1 )
            {
              v17->_Left->_Color = 1;
              v17->_Color = 0;
              std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Rrotate(
                this,
                v17);
              v17 = Parent->_Right;
            }
            v17->_Color = Parent->_Color;
            Parent->_Color = 1;
            v17->_Right->_Color = 1;
            std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Lrotate(
              this,
              Parent);
            goto LABEL_68;
          }
LABEL_60:
          v17->_Color = 0;
        }
      }
      else
      {
        if ( !v17->_Color )
        {
          v17->_Color = 1;
          Parent->_Color = 0;
          std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Rrotate(
            this,
            Parent);
          v17 = Parent->_Left;
        }
        if ( !v17->_Isnil )
        {
          if ( v17->_Right->_Color != 1 || v17->_Left->_Color != 1 )
          {
            if ( v17->_Left->_Color == 1 )
            {
              v17->_Right->_Color = 1;
              v17->_Color = 0;
              std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Lrotate(
                this,
                v17);
              v17 = Parent->_Left;
            }
            v17->_Color = Parent->_Color;
            Parent->_Color = 1;
            v17->_Left->_Color = 1;
            std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Rrotate(
              this,
              Parent);
            goto LABEL_68;
          }
          goto LABEL_60;
        }
      }
      Left = Parent;
      Parent = Parent->_Parent;
    }
  }
  Json::Value::~Value(&Ptr->_Myval.second);
  if ( Ptr->_Myval.first.cstr_ && Ptr->_Myval.first.index_ == 1 )
  {
    if ( (_S1_13 & 1) == 0 )
    {
      _S1_13 |= 1u;
      defaultAllocator.vfptr = (Json::ValueAllocatorVtbl *)&Json::DefaultValueAllocator::`vftable;
      atexit(Json::valueAllocator_::_2_::_dynamic_atexit_destructor_for__defaultAllocator__);
    }
    valueAllocator->vfptr->releaseMemberName(valueAllocator, (char *)Ptr->_Myval.first.cstr_);
  }
  Illusion::ShaderParam::operator delete(Ptr);
  Mysize = this->_Mysize;
  if ( Mysize )
    this->_Mysize = Mysize - 1;
  result->_Ptr = v20;
  return result;
}ysize = this->_Mysize;
  if ( Mysize )
    this->_Mysize = Mysize - 1;
  result->_Ptr = v20;
  return result;
}

// File Line: 1508
// RVA: 0x845E0
std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > *__fastcall std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::erase(
        std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > *this,
        std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > *result,
        std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > _First,
        std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > _Last)
{
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Myhead; // rdx
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v7; // rax
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Left; // rcx
  std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > *v9; // rax
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v10; // rax
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Right; // rdx
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *j; // rcx
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *i; // rcx
  std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > resulta; // [rsp+30h] [rbp+8h] BYREF
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v15; // [rsp+40h] [rbp+18h]
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Ptr; // [rsp+48h] [rbp+20h]

  Ptr = _Last._Ptr;
  v15 = _First._Ptr;
  Myhead = this->_Myhead;
  if ( _First._Ptr == this->_Myhead->_Left && _Last._Ptr == Myhead )
  {
    std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Erase(
      this,
      Myhead->_Parent);
    this->_Myhead->_Parent = this->_Myhead;
    this->_Myhead->_Left = this->_Myhead;
    this->_Myhead->_Right = this->_Myhead;
    v7 = this->_Myhead;
    this->_Mysize = 0i64;
    Left = v7->_Left;
    v9 = result;
    result->_Ptr = Left;
  }
  else
  {
    if ( _First._Ptr != _Last._Ptr )
    {
      do
      {
        v10 = _First._Ptr;
        if ( !_First._Ptr->_Isnil )
        {
          Right = _First._Ptr->_Right;
          if ( Right->_Isnil )
          {
            for ( i = _First._Ptr->_Parent; !i->_Isnil; i = i->_Parent )
            {
              if ( _First._Ptr != i->_Right )
                break;
              v15 = i;
              _First._Ptr = i;
            }
            v15 = i;
          }
          else
          {
            for ( j = Right->_Left; !j->_Isnil; j = j->_Left )
              Right = j;
            v15 = Right;
          }
        }
        std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::erase(
          this,
          &resulta,
          (std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >)v10);
        _First._Ptr = v15;
      }
      while ( v15 != Ptr );
    }
    result->_Ptr = _First._Ptr;
    return result;
  }
  return v9;
}

// File Line: 2060
// RVA: 0x843E0
void __fastcall std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Erase(
        std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > *this,
        std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *_Rootnode)
{
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *v2; // rsi
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *i; // rdi

  v2 = _Rootnode;
  for ( i = _Rootnode; !i->_Isnil; v2 = i )
  {
    std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Erase(
      this,
      i->_Right);
    i = i->_Left;
    Json::Value::~Value(&v2->_Myval.second);
    if ( v2->_Myval.first.cstr_ && v2->_Myval.first.index_ == 1 )
    {
      if ( (_S1_13 & 1) == 0 )
      {
        _S1_13 |= 1u;
        defaultAllocator.vfptr = (Json::ValueAllocatorVtbl *)&Json::DefaultValueAllocator::`vftable;
        atexit(Json::valueAllocator_::_2_::_dynamic_atexit_destructor_for__defaultAllocator__);
      }
      valueAllocator->vfptr->releaseMemberName(valueAllocator, (char *)v2->_Myval.first.cstr_);
    }
    Illusion::ShaderParam::operator delete(v2);
  }
}

// File Line: 2113
// RVA: 0x844C0
void __fastcall std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Lrotate(
        std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > *this,
        std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *_Wherenode)
{
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Right; // r8
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Parent; // rax

  Right = _Wherenode->_Right;
  _Wherenode->_Right = Right->_Left;
  if ( !Right->_Left->_Isnil )
    Right->_Left->_Parent = _Wherenode;
  Right->_Parent = _Wherenode->_Parent;
  if ( _Wherenode == this->_Myhead->_Parent )
  {
    this->_Myhead->_Parent = Right;
    Right->_Left = _Wherenode;
    _Wherenode->_Parent = Right;
  }
  else
  {
    Parent = _Wherenode->_Parent;
    if ( _Wherenode == Parent->_Left )
      Parent->_Left = Right;
    else
      Parent->_Right = Right;
    Right->_Left = _Wherenode;
    _Wherenode->_Parent = Right;
  }
}

// File Line: 2143
// RVA: 0x84520
void __fastcall std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const,Json::Value>>,0>>::_Rrotate(
        std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> > *this,
        std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *_Wherenode)
{
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Left; // r8
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Right; // rax
  std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *Parent; // rax

  Left = _Wherenode->_Left;
  _Wherenode->_Left = _Wherenode->_Left->_Right;
  Right = Left->_Right;
  if ( !Right->_Isnil )
    Right->_Parent = _Wherenode;
  Left->_Parent = _Wherenode->_Parent;
  if ( _Wherenode == this->_Myhead->_Parent )
  {
    this->_Myhead->_Parent = Left;
    Left->_Right = _Wherenode;
    _Wherenode->_Parent = Left;
  }
  else
  {
    Parent = _Wherenode->_Parent;
    if ( _Wherenode == Parent->_Right )
      Parent->_Right = Left;
    else
      Parent->_Left = Left;
    Left->_Right = _Wherenode;
    _Wherenode->_Parent = Left;
  }
}

