// File Line: 51
// RVA: 0x1519E70
__int64 UFG::_dynamic_initializer_for__gStateMachineEventChannel__()
{
  UFG::ChannelObj::ChannelObj(
    &UFG::gStateMachineEventChannel,
    "StateMachineEvent",
    "This is a generic event that gets generated by StateMachines.");
  return atexit(UFG::_dynamic_atexit_destructor_for__gStateMachineEventChannel__);
}

// File Line: 62
// RVA: 0x44DCD0
void __fastcall UFG::StateMachineEvent::StateMachineEvent(UFG::StateMachineEvent *this, UFG::qSymbol *name, UFG::SimObject *sender)
{
  UFG::StateMachineEvent *v3; // r10
  unsigned int v4; // er9
  UFG::qNode<UFG::Event,UFG::Event> *v5; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v6; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v7; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v8; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v9; // rax

  v3 = this;
  v4 = UFG::gStateMachineEventChannel.mUID;
  v5 = (UFG::qNode<UFG::Event,UFG::Event> *)&this->mPrev;
  v5->mPrev = v5;
  v5->mNext = v5;
  this->vfptr = (UFG::EventVtbl *)&UFG::Event::`vftable';
  this->m_EventUID = v4;
  this->m_NamePTR = 0i64;
  this->vfptr = (UFG::EventVtbl *)&UFG::StateMachineEvent::`vftable';
  this->mName = (UFG::qSymbol)name->mUID;
  v6 = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&this->mSender.mPrev;
  v6->mPrev = v6;
  v6->mNext = v6;
  this->mSender.m_pPointer = 0i64;
  if ( this->mSender.m_pPointer )
  {
    v7 = v6->mPrev;
    v8 = v3->mSender.mNext;
    v7->mNext = v8;
    v8->mPrev = v7;
    v6->mPrev = v6;
    v3->mSender.mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&v3->mSender.mPrev;
  }
  v3->mSender.m_pPointer = sender;
  if ( sender )
  {
    v9 = sender->m_SafePointerList.mNode.mPrev;
    v9->mNext = v6;
    v6->mPrev = v9;
    v3->mSender.mNext = &sender->m_SafePointerList.mNode;
    sender->m_SafePointerList.mNode.mPrev = v6;
  }
}

// File Line: 86
// RVA: 0x15143F0
__int64 dynamic_initializer_for__UFG::StateMachineComponent::s_StateMachineComponentList__()
{
  return atexit(dynamic_atexit_destructor_for__UFG::StateMachineComponent::s_StateMachineComponentList__);
}

// File Line: 87
// RVA: 0x1513B00
__int64 dynamic_initializer_for__UFG::StateMachineComponent::_TypeIDesc__()
{
  UFG::ComponentIDDesc *v0; // rax
  __int64 result; // rax

  v0 = UFG::StateMachineComponent::AccessComponentDesc();
  *(_DWORD *)&UFG::StateMachineComponent::_TypeIDesc.mBaseTypeIndex = *(_DWORD *)&v0->mBaseTypeIndex;
  UFG::StateMachineComponent::_TypeIDesc.mChildBitMask = v0->mChildBitMask;
  result = v0->mChildren;
  UFG::StateMachineComponent::_TypeIDesc.mChildren = result;
  return result;
}

// File Line: 104
// RVA: 0x44D7C0
void __fastcall UFG::StateMachineComponent::StateMachineComponent(UFG::StateMachineComponent *this, unsigned __int64 dna_uid, int subPartIndex)
{
  int v3; // ebx
  unsigned __int64 v4; // r14
  UFG::StateMachineComponent *v5; // rdi
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v6; // rsi
  float v7; // xmm1_4
  float v8; // xmm2_4
  float v9; // xmm3_4
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v10; // rax
  UFG::qReflectObject *v11; // rax
  hkSeekableStreamReader *v12; // rax
  hkSeekableStreamReader *v13; // [rsp+38h] [rbp-40h]
  void (__fastcall *v14)(UFG::StateMachineComponent *, UFG::Event *); // [rsp+40h] [rbp-38h]
  UFG::qSafePointer<UFG::SimComponent,UFG::RigidBodyComponent> *v15; // [rsp+98h] [rbp+20h]
  UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *v16; // [rsp+98h] [rbp+20h]
  UFG::qList<UFG::AttachedEffect,UFG::AttachedEffect,1,0> *v17; // [rsp+98h] [rbp+20h]
  UFG::qSafePointer<UFG::SimObject,UFG::SimObject> *v18; // [rsp+98h] [rbp+20h]

  v3 = subPartIndex;
  v4 = dna_uid;
  v5 = this;
  UFG::SimComponent::SimComponent((UFG::SimComponent *)&this->vfptr, 0xDEADBEEF);
  v6 = (UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *)&v5->mPrev;
  v6->mPrev = v6;
  v6->mNext = v6;
  v5->vfptr = (UFG::qSafePointerNode<UFG::SimComponent>Vtbl *)&UFG::StateMachineComponent::`vftable';
  v15 = &v5->mRigidBodyComponent;
  v15->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v15->mPrev;
  v15->mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v15->mPrev;
  v5->mRigidBodyComponent.m_pPointer = 0i64;
  UFG::qReflectHandleBase::qReflectHandleBase((UFG::qReflectHandleBase *)&v5->mStateMachineDefinition.mPrev);
  v5->mStateMachineDefinition.mTypeUID = UFG::qStringHash64("UFG::StateMachineDefinition", 0xFFFFFFFFFFFFFFFFui64);
  v16 = &v5->mFractureList;
  v16->mNode.mPrev = &v16->mNode;
  v16->mNode.mNext = &v16->mNode;
  v17 = &v5->mAttachedEffects;
  v17->mNode.mPrev = &v17->mNode;
  v17->mNode.mNext = &v17->mNode;
  v18 = &v5->mLastDamageSource;
  v18->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&v18->mPrev;
  v18->mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&v18->mPrev;
  v5->mLastDamageSource.m_pPointer = 0i64;
  v5->mChildMachines.p = 0i64;
  *(_QWORD *)&v5->mChildMachines.size = 0i64;
  v5->mPhantomRigidBody = 0i64;
  v7 = UFG::qVector4::msZero.y;
  v8 = UFG::qVector4::msZero.z;
  v9 = UFG::qVector4::msZero.w;
  v5->mThrusterForce.x = UFG::qVector4::msZero.x;
  v5->mThrusterForce.y = v7;
  v5->mThrusterForce.z = v8;
  v5->mThrusterForce.w = v9;
  v5->mThrusterDuration = 0.0;
  v5->mPhantomTimer = -1.0;
  v5->mTimer = -1.0;
  v5->mHealth = 1.0;
  v5->mPrevHealthBeforeRunningStateMachine = 1.0;
  v5->mSubPartIndex = v3;
  v5->mCurrentNodeIndex = -1;
  v5->mFlags = 0;
  *(_QWORD *)v5->mCollisionEventData = -4647714812233515008i64;
  *(_QWORD *)&v5->mCollisionEventData[2] = -4647714812233515008i64;
  if ( v3 == -1 )
  {
    v10 = UFG::StateMachineComponent::s_StateMachineComponentList.mNode.mPrev;
    UFG::StateMachineComponent::s_StateMachineComponentList.mNode.mPrev->mNext = v6;
    v6->mPrev = v10;
    v5->mNext = (UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *)&UFG::StateMachineComponent::s_StateMachineComponentList;
    UFG::StateMachineComponent::s_StateMachineComponentList.mNode.mPrev = (UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *)&v5->mPrev;
  }
  UFG::SimComponent::AddType(
    (UFG::SimComponent *)&v5->vfptr,
    UFG::StateMachineComponent::_StateMachineComponentTypeUID,
    "StateMachineComponent");
  UFG::qReflectHandleBase::Init(
    (UFG::qReflectHandleBase *)&v5->mStateMachineDefinition.mPrev,
    v5->mStateMachineDefinition.mTypeUID,
    v4);
  v11 = v5->mStateMachineDefinition.mData;
  if ( v11 )
  {
    if ( LOBYTE(v11[1].mBaseNode.mNeighbours[0]) )
    {
      v14 = UFG::StateMachineComponent::HandleCollisionEvent;
      v13 = Assembly::GetRCX(v5);
      UFG::EventDispatcher::Register(
        &UFG::EventDispatcher::mInstance,
        (fastdelegate::FastDelegate1<UFG::Event *,void> *)&v13,
        UFG::gCollisionEventChannel.mUID,
        0i64,
        0);
    }
    if ( BYTE1(v5->mStateMachineDefinition.mData[1].mBaseNode.mNeighbours[0]) )
    {
      v12 = Assembly::GetRCX(v5);
      v14 = UFG::StateMachineComponent::HandleNamedEvent;
      v13 = v12;
      UFG::EventDispatcher::Register(
        &UFG::EventDispatcher::mInstance,
        (fastdelegate::FastDelegate1<UFG::Event *,void> *)&v13,
        UFG::gStateMachineEventChannel.mUID,
        0i64,
        0);
    }
  }
}

// File Line: 134
// RVA: 0x451330
void __fastcall UFG::StateMachineComponent::~StateMachineComponent(UFG::StateMachineComponent *this)
{
  UFG::StateMachineComponent *v1; // rbx
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v2; // rsi
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v3; // rcx
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v4; // rax
  UFG::qReflectObject *v5; // rax
  unsigned int i; // edi
  UFG::StateMachineComponent *v7; // rcx
  UFG::StateMachineComponent **v8; // rcx
  hkpRigidBody *v9; // rcx
  UFG::qList<UFG::AttachedEffect,UFG::AttachedEffect,1,0> *v10; // rdi
  signed __int64 j; // rax
  _QWORD *v12; // rdx
  __int64 v13; // rcx
  _QWORD *v14; // rax
  UFG::StateMachineComponent **v15; // rcx
  UFG::qSafePointer<UFG::SimObject,UFG::SimObject> *v16; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v17; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v18; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v19; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v20; // rax
  signed __int64 k; // rax
  _QWORD *v22; // rdx
  __int64 v23; // rcx
  _QWORD *v24; // rax
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v25; // rcx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v26; // rax
  UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *v27; // rdi
  UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *v28; // rcx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v29; // rdx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v30; // rax
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v31; // rdx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v32; // rax
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v33; // rcx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v34; // rax
  UFG::qSafePointer<UFG::SimComponent,UFG::RigidBodyComponent> *v35; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v36; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v37; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v38; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v39; // rax
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v40; // rcx
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v41; // rax
  hkSeekableStreamReader *v42; // [rsp+28h] [rbp-40h]
  void (__fastcall *v43)(UFG::StateMachineComponent *, UFG::Event *); // [rsp+30h] [rbp-38h]

  v1 = this;
  this->vfptr = (UFG::qSafePointerNode<UFG::SimComponent>Vtbl *)&UFG::StateMachineComponent::`vftable';
  if ( this == UFG::StateMachineComponent::s_StateMachineComponentpCurrentIterator )
    UFG::StateMachineComponent::s_StateMachineComponentpCurrentIterator = (UFG::StateMachineComponent *)&this->mPrev[-4];
  v2 = (UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *)&this->mPrev;
  v3 = this->mPrev;
  v4 = v2->mNext;
  v3->mNext = v4;
  v4->mPrev = v3;
  v2->mPrev = v2;
  v2->mNext = v2;
  v5 = v1->mStateMachineDefinition.mData;
  if ( v5 )
  {
    if ( LOBYTE(v5[1].mBaseNode.mNeighbours[0]) )
    {
      v43 = UFG::StateMachineComponent::HandleCollisionEvent;
      v42 = Assembly::GetRCX(v1);
      UFG::EventDispatcher::UnRegister(
        &UFG::EventDispatcher::mInstance,
        (fastdelegate::FastDelegate1<UFG::Event *,void> *)&v42,
        UFG::gCollisionEventChannel.mUID);
    }
    if ( BYTE1(v1->mStateMachineDefinition.mData[1].mBaseNode.mNeighbours[0]) )
    {
      v42 = 0i64;
      v43 = UFG::StateMachineComponent::HandleNamedEvent;
      v42 = Assembly::GetRCX(v1);
      UFG::EventDispatcher::UnRegister(
        &UFG::EventDispatcher::mInstance,
        (fastdelegate::FastDelegate1<UFG::Event *,void> *)&v42,
        UFG::gStateMachineEventChannel.mUID);
    }
  }
  for ( i = 0; i < v1->mChildMachines.size; ++i )
  {
    v7 = v1->mChildMachines.p[i];
    if ( v7 )
      v7->vfptr->__vecDelDtor((UFG::qSafePointerNode<UFG::SimComponent> *)&v7->vfptr, 1u);
  }
  v8 = v1->mChildMachines.p;
  if ( v8 )
    operator delete[](v8);
  v1->mChildMachines.p = 0i64;
  *(_QWORD *)&v1->mChildMachines.size = 0i64;
  v9 = v1->mPhantomRigidBody;
  if ( v9 )
    UFG::PhantomCallback::DestroyPhantom(v9);
  v10 = &v1->mAttachedEffects;
  for ( j = (signed __int64)&v1->mAttachedEffects.mNode.mNext[-1].mNext;
        (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **)j != &v1->mFractureList.mNode.mNext;
        j = (signed __int64)&v1->mAttachedEffects.mNode.mNext[-1].mNext )
  {
    v12 = (_QWORD *)(j + 8);
    v13 = *(_QWORD *)(j + 8);
    v14 = *(_QWORD **)(j + 16);
    *(_QWORD *)(v13 + 8) = v14;
    *v14 = v13;
    *v12 = v12;
    v12[1] = v12;
    if ( v12 != (_QWORD *)8 )
      (*(void (__fastcall **)(_QWORD *, signed __int64))*(v12 - 1))(v12 - 1, 1i64);
  }
  v15 = v1->mChildMachines.p;
  if ( v15 )
    operator delete[](v15);
  v1->mChildMachines.p = 0i64;
  *(_QWORD *)&v1->mChildMachines.size = 0i64;
  v16 = &v1->mLastDamageSource;
  if ( v1->mLastDamageSource.m_pPointer )
  {
    v17 = v16->mPrev;
    v18 = v1->mLastDamageSource.mNext;
    v17->mNext = v18;
    v18->mPrev = v17;
    v16->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&v16->mPrev;
    v1->mLastDamageSource.mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&v1->mLastDamageSource.mPrev;
  }
  v1->mLastDamageSource.m_pPointer = 0i64;
  v19 = v16->mPrev;
  v20 = v1->mLastDamageSource.mNext;
  v19->mNext = v20;
  v20->mPrev = v19;
  v16->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&v16->mPrev;
  v1->mLastDamageSource.mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&v1->mLastDamageSource.mPrev;
  for ( k = (signed __int64)&v1->mAttachedEffects.mNode.mNext[-1].mNext;
        (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **)k != &v1->mFractureList.mNode.mNext;
        k = (signed __int64)&v1->mAttachedEffects.mNode.mNext[-1].mNext )
  {
    v22 = (_QWORD *)(k + 8);
    v23 = *(_QWORD *)(k + 8);
    v24 = *(_QWORD **)(k + 16);
    *(_QWORD *)(v23 + 8) = v24;
    *v24 = v23;
    *v22 = v22;
    v22[1] = v22;
    if ( v22 != (_QWORD *)8 )
      (*(void (__fastcall **)(_QWORD *, signed __int64))*(v22 - 1))(v22 - 1, 1i64);
  }
  v25 = v10->mNode.mPrev;
  v26 = v1->mAttachedEffects.mNode.mNext;
  v25->mNext = v26;
  v26->mPrev = v25;
  v10->mNode.mPrev = &v10->mNode;
  v1->mAttachedEffects.mNode.mNext = &v1->mAttachedEffects.mNode;
  v27 = &v1->mFractureList;
  v28 = (UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *)v1->mFractureList.mNode.mNext;
  if ( v28 != &v1->mFractureList )
  {
    do
    {
      v29 = v28->mNode.mPrev;
      v30 = v28->mNode.mNext;
      v29->mNext = v30;
      v30->mPrev = v29;
      v28->mNode.mPrev = &v28->mNode;
      v28->mNode.mNext = &v28->mNode;
      v31 = v28->mNode.mPrev;
      v32 = v28->mNode.mNext;
      v31->mNext = v32;
      v32->mPrev = v31;
      v28->mNode.mPrev = &v28->mNode;
      v28->mNode.mNext = &v28->mNode;
      operator delete[](v28);
      v28 = (UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *)v1->mFractureList.mNode.mNext;
    }
    while ( v28 != v27 );
  }
  v33 = v27->mNode.mPrev;
  v34 = v1->mFractureList.mNode.mNext;
  v33->mNext = v34;
  v34->mPrev = v33;
  v27->mNode.mPrev = &v27->mNode;
  v1->mFractureList.mNode.mNext = &v1->mFractureList.mNode;
  UFG::qReflectHandleBase::~qReflectHandleBase((UFG::qReflectHandleBase *)&v1->mStateMachineDefinition.mPrev);
  v35 = &v1->mRigidBodyComponent;
  if ( v1->mRigidBodyComponent.m_pPointer )
  {
    v36 = v35->mPrev;
    v37 = v1->mRigidBodyComponent.mNext;
    v36->mNext = v37;
    v37->mPrev = v36;
    v35->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v35->mPrev;
    v1->mRigidBodyComponent.mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v1->mRigidBodyComponent.mPrev;
  }
  v1->mRigidBodyComponent.m_pPointer = 0i64;
  v38 = v35->mPrev;
  v39 = v1->mRigidBodyComponent.mNext;
  v38->mNext = v39;
  v39->mPrev = v38;
  v35->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v35->mPrev;
  v1->mRigidBodyComponent.mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v1->mRigidBodyComponent.mPrev;
  v40 = v2->mPrev;
  v41 = v2->mNext;
  v40->mNext = v41;
  v41->mPrev = v40;
  v2->mPrev = v2;
  v2->mNext = v2;
  UFG::SimComponent::~SimComponent((UFG::SimComponent *)&v1->vfptr);
}

// File Line: 166
// RVA: 0x4764F0
void __fastcall UFG::StateMachineComponent::Suspend(UFG::StateMachineComponent *this)
{
  hkpRigidBody *v1; // rdx
  UFG::StateMachineComponent *v2; // rbx

  v1 = this->mPhantomRigidBody;
  v2 = this;
  if ( v1 )
  {
    UFG::BasePhysicsSystem::RemoveEntity(UFG::BasePhysicsSystem::mInstance, v1, 0);
    v2->m_Flags |= 2u;
  }
  else
  {
    this->m_Flags |= 2u;
  }
}

// File Line: 180
// RVA: 0x473FD0
void __fastcall UFG::StateMachineComponent::Restore(UFG::StateMachineComponent *this)
{
  hkpRigidBody *v1; // rdx
  UFG::StateMachineComponent *v2; // rbx

  v1 = this->mPhantomRigidBody;
  v2 = this;
  if ( v1 )
    UFG::BasePhysicsSystem::AddEntity(UFG::BasePhysicsSystem::mInstance, v1, 1);
  v2->m_Flags &= 0xFFFDu;
}

// File Line: 193
// RVA: 0x47D500
_BOOL8 __fastcall UFG::StateMachineComponent::Update(UFG::StateMachineComponent *this, UFG::qMatrix44 *mat, float deltaTime)
{
  float v3; // xmm7_4
  UFG::qMatrix44 *v4; // rbp
  UFG::StateMachineComponent *v5; // rbx
  unsigned __int8 v6; // si
  unsigned int v7; // edi
  UFG::StateMachineComponent **v8; // rax
  UFG::SimComponent *v9; // rax
  unsigned int v10; // eax
  char v11; // cl
  int v12; // eax
  bool v13; // al
  UFG::qReflectObject *v14; // r8
  float v15; // xmm8_4
  float v16; // xmm0_4
  int v17; // esi
  signed __int64 v18; // rbp
  signed __int64 v19; // rdi
  int v20; // edx
  UFG::qReflectObjectVtbl *v21; // rax
  float v22; // xmm0_4
  bool v23; // cl
  UFG::qReflectObject *v24; // rax
  int v25; // ecx
  signed __int64 v26; // rsi
  signed __int64 v27; // rsi
  float v28; // xmm1_4
  float v29; // xmm1_4
  float v30; // xmm0_4
  float v31; // xmm0_4
  float v32; // xmm3_4
  float v33; // xmm11_4
  __m128 v34; // xmm10
  float v35; // xmm12_4
  float v36; // xmm13_4
  __m128 v37; // xmm2
  float v38; // xmm8_4
  __m128 v39; // xmm9
  float v40; // xmm5_4
  float v41; // xmm4_4
  __m128 v42; // xmm2
  float v43; // xmm1_4
  UFG::RigidBody *v44; // rcx
  float v45; // xmm1_4
  float v46; // xmm2_4
  float v47; // xmm3_4
  hkpRigidBody *v48; // rcx
  float v49; // xmm0_4
  float v50; // xmm0_4
  char v51; // r8
  float v52; // xmm0_4
  float v53; // xmm0_4
  int v54; // esi
  unsigned int v55; // ebp
  signed __int64 v56; // rdx
  signed __int64 v57; // rdi
  float v58; // xmm0_4
  bool v59; // cf
  bool v60; // zf
  float v61; // xmm0_4
  float v62; // xmm0_4
  float v63; // xmm0_4
  float v64; // xmm0_4
  UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *i; // rcx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v66; // rdx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v67; // rax
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v68; // rdx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v69; // rax
  unsigned __int8 v71; // [rsp+20h] [rbp-118h]
  signed __int64 v72; // [rsp+28h] [rbp-110h]
  char v73; // [rsp+30h] [rbp-108h]
  UFG::qVector4 v74; // [rsp+38h] [rbp-100h]
  UFG::qVector3 point; // [rsp+48h] [rbp-F0h]
  UFG::qVector4 result; // [rsp+58h] [rbp-E0h]
  __int64 v77; // [rsp+68h] [rbp-D0h]
  UFG::qReflectHandleBase v78; // [rsp+70h] [rbp-C8h]
  bool v79; // [rsp+140h] [rbp+8h]
  UFG::qMatrix44 *v80; // [rsp+148h] [rbp+10h]
  signed __int64 v81; // [rsp+158h] [rbp+20h]
  char v82; // [rsp+158h] [rbp+20h]

  v80 = mat;
  v77 = -2i64;
  v3 = deltaTime;
  v4 = mat;
  v5 = this;
  v6 = 0;
  v71 = 0;
  v7 = 0;
  if ( this->mChildMachines.size )
  {
    do
    {
      v8 = v5->mChildMachines.p;
      if ( v8[v7] )
        UFG::StateMachineComponent::Update(v8[v7], v4, deltaTime);
      ++v7;
    }
    while ( v7 < v5->mChildMachines.size );
  }
  if ( v5->mStateMachineDefinition.mData )
  {
    v9 = v5->mRigidBodyComponent.m_pPointer;
    if ( v9 )
      v10 = (unsigned int)v9[4].m_SafePointerList.mNode.mPrev;
    else
      v10 = 0;
    v11 = (v10 >> 4) & 1;
    v73 = (v10 >> 4) & 1;
    if ( v5->mSubPartIndex == -1 )
      v12 = v10 & 0x20;
    else
      v12 = 0;
    v13 = v12 != 0;
    v79 = v13;
    if ( v5->mPrevHealthBeforeRunningStateMachine != v5->mHealth || v13 || v11 )
    {
      UFG::qReflectHandleBase::qReflectHandleBase(&v78, (UFG::qReflectHandleBase *)&v5->mStateMachineDefinition.mPrev);
      v14 = v78.mData;
      if ( v78.mData )
      {
        v15 = v5->mPrevHealthBeforeRunningStateMachine;
        v16 = v5->mHealth;
        v5->mPrevHealthBeforeRunningStateMachine = v16;
        if ( v16 < 0.0 )
          v5->mHealth = 0.0;
        v17 = 0;
        if ( v5->mCurrentNodeIndex != -1 )
          v17 = v5->mCurrentNodeIndex;
        v18 = v17;
        v81 = LODWORD(v14[1].mBaseNode.mUID);
        if ( v17 < v81 )
        {
          v19 = 26i64 * v17;
          LOBYTE(v20) = 0;
          do
          {
            if ( (_BYTE)v20 )
              break;
            v21 = v14[1].vfptr;
            v22 = *((float *)&v21[v19 + 18].GetTypeName + 1);
            v23 = v22 >= v5->mHealth && v15 > v22;
            if ( v79 && BYTE3(v21[v19 + 24].__vecDelDtor) || v73 && BYTE4(v21[v19 + 24].__vecDelDtor) || v23 )
            {
              v20 = (unsigned __int8)UFG::StateMachineComponent::DoStateTransition(v5, v17);
              v14 = v78.mData;
            }
            ++v17;
            ++v18;
            v19 += 26i64;
          }
          while ( v18 < v81 );
          v71 = v20;
        }
        v4 = v80;
        v6 = v71;
      }
      UFG::qReflectHandleBase::~qReflectHandleBase(&v78);
    }
    v24 = v5->mStateMachineDefinition.mData;
    if ( v24 )
    {
      v25 = v5->mCurrentNodeIndex;
      if ( v25 != -1 && v25 < SLODWORD(v24[1].mBaseNode.mUID) )
      {
        v26 = 26i64 * (unsigned int)v25;
        v60 = &v24[1].vfptr[v26] == 0;
        v27 = (signed __int64)&v24[1].vfptr[v26];
        v72 = v27;
        if ( v60 )
          goto LABEL_95;
        v28 = *(float *)(v27 + 312);
        if ( v28 != 0.0 )
        {
          v29 = v28 * deltaTime;
          if ( v29 > 0.0 )
          {
            if ( v24 )
            {
              v30 = v5->mHealth - v29;
              v5->mHealth = v30;
              if ( v30 < 0.0 )
                v5->mHealth = 0.0;
            }
          }
        }
        UFG::StateMachineComponent::UpdateAttachedEffects(v5, v4);
        if ( *(_BYTE *)(v27 + 386) )
        {
          v31 = v5->mThrusterDuration;
          if ( v31 > 0.0 )
          {
            v5->mThrusterDuration = v31 - deltaTime;
            v32 = deltaTime * *(float *)(v27 + 320);
            v33 = v5->mThrusterForce.y;
            v34 = (__m128)LODWORD(v5->mThrusterForce.x);
            v35 = v5->mThrusterForce.z;
            v36 = v5->mThrusterForce.w;
            v37 = v34;
            v37.m128_f32[0] = (float)((float)((float)(v34.m128_f32[0] * v34.m128_f32[0]) + (float)(v33 * v33))
                                    + (float)(v35 * v35))
                            + (float)(v36 * v36);
            if ( COERCE_FLOAT(_mm_sqrt_ps(v37)) <= v32 )
            {
              v45 = UFG::qVector4::msZero.y;
              v46 = UFG::qVector4::msZero.z;
              v47 = UFG::qVector4::msZero.w;
              v5->mThrusterForce.x = UFG::qVector4::msZero.x;
              v5->mThrusterForce.y = v45;
              v5->mThrusterForce.z = v46;
              v5->mThrusterForce.w = v47;
            }
            else
            {
              v38 = *(float *)(v27 + 148);
              v39 = (__m128)*(unsigned int *)(v27 + 144);
              v40 = *(float *)(v27 + 152);
              v41 = *(float *)(v27 + 156);
              v42 = v39;
              v42.m128_f32[0] = (float)((float)((float)(v39.m128_f32[0] * v39.m128_f32[0]) + (float)(v38 * v38))
                                      + (float)(v40 * v40))
                              + (float)(v41 * v41);
              if ( v42.m128_f32[0] == 0.0 )
                v43 = 0.0;
              else
                v43 = 1.0 / COERCE_FLOAT(_mm_sqrt_ps(v42));
              v5->mThrusterForce.x = v34.m128_f32[0] - (float)((float)(v39.m128_f32[0] * v43) * v32);
              v5->mThrusterForce.y = v33 - (float)((float)(v38 * v43) * v32);
              v5->mThrusterForce.z = v35 - (float)((float)(v40 * v43) * v32);
              v5->mThrusterForce.w = v36 - (float)((float)(v41 * v43) * v32);
              UFG::operator*(&result, (UFG::qVector4 *)(v27 + 144), v4);
              UFG::operator*(&v74, (UFG::qVector4 *)(v27 + 160), v4);
              v44 = (UFG::RigidBody *)v5->mRigidBodyComponent.m_pPointer;
              if ( v44 )
              {
                point.x = v74.x;
                point.y = v74.y;
                point.z = v74.z;
                v74.x = result.x;
                v74.y = result.y;
                v74.z = result.z;
                UFG::RigidBody::ApplyForce(v44, v3, (UFG::qVector3 *)&v74, &point);
              }
            }
          }
        }
        v48 = v5->mPhantomRigidBody;
        if ( v48 )
        {
          v49 = v5->mPhantomTimer;
          if ( v49 != -1.0 )
          {
            v50 = v49 - v3;
            v5->mPhantomTimer = v50;
            if ( v50 < 0.0 )
            {
              UFG::PhantomCallback::DestroyPhantom(v48);
              v5->mPhantomRigidBody = 0i64;
            }
          }
        }
        v51 = 0;
        v82 = 0;
        v52 = v5->mTimer;
        if ( v52 >= 0.0 )
        {
          v53 = v52 - v3;
          v5->mTimer = v53;
          if ( v53 <= 0.0 )
          {
            v51 = 1;
            v82 = 1;
            v5->mTimer = -1.0;
          }
        }
        v54 = -1;
        v55 = 0;
        v56 = v72;
        if ( !*(_DWORD *)(v72 + 104) )
          goto LABEL_95;
        do
        {
          if ( v54 == -1 )
          {
            v57 = *(_QWORD *)(v56 + 96) + 16i64 * v55;
            switch ( *(_DWORD *)v57 )
            {
              case 0:
                v58 = *(float *)(v57 + 4);
                v59 = v58 < v5->mHealth;
                v60 = v58 == v5->mHealth;
                goto LABEL_66;
              case 1:
                if ( v79 )
                  goto $LN8_41;
                break;
              case 2:
                v61 = v5->mCollisionEventData[0];
                v59 = v61 < *(float *)(v57 + 4);
                v60 = v61 == *(float *)(v57 + 4);
                goto LABEL_66;
              case 3:
                v62 = v5->mCollisionEventData[1];
                v59 = v62 < *(float *)(v57 + 4);
                v60 = v62 == *(float *)(v57 + 4);
                goto LABEL_66;
              case 4:
                v64 = v5->mCollisionEventData[2];
                v59 = v64 < *(float *)(v57 + 4);
                v60 = v64 == *(float *)(v57 + 4);
                goto LABEL_66;
              case 5:
                v63 = v5->mCollisionEventData[3];
                v59 = v63 < *(float *)(v57 + 4);
                v60 = v63 == *(float *)(v57 + 4);
LABEL_66:
                if ( !v59 && !v60 )
                  goto $LN8_41;
                break;
              case 6:
                if ( v51 )
                  goto $LN8_41;
                break;
              case 7:
                if ( v73 )
                  goto $LN8_41;
                break;
              case 8:
                if ( v5->mFlags & 1 )
                  goto $LN8_41;
                break;
              case 9:
                if ( UFG::qRandom(1.0, &UFG::qDefaultSeed) <= *(float *)(v57 + 4) )
                  goto $LN8_41;
                goto LABEL_82;
              case 0xA:
$LN8_41:
                v54 = UFG::StateMachineDefinition::FindNamedNode(
                        (UFG::StateMachineDefinition *)v5->mStateMachineDefinition.mData,
                        (UFG::qSymbol *)(v57 + 12));
LABEL_82:
                v56 = v72;
                break;
              default:
                break;
            }
          }
          ++v55;
          v51 = v82;
        }
        while ( v55 < *(_DWORD *)(v56 + 104) );
        if ( v54 == -1 || v54 == v5->mCurrentNodeIndex )
LABEL_95:
          v6 = v71;
        else
          v6 = UFG::StateMachineComponent::DoStateTransition(v5, v54);
      }
    }
    for ( i = (UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *)v5->mFractureList.mNode.mNext;
          i != &v5->mFractureList;
          i = (UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *)v5->mFractureList.mNode.mNext )
    {
      v66 = i->mNode.mPrev;
      v67 = i->mNode.mNext;
      v66->mNext = v67;
      v67->mPrev = v66;
      i->mNode.mPrev = &i->mNode;
      i->mNode.mNext = &i->mNode;
      v68 = i->mNode.mPrev;
      v69 = i->mNode.mNext;
      v68->mNext = v69;
      v69->mPrev = v68;
      i->mNode.mPrev = &i->mNode;
      i->mNode.mNext = &i->mNode;
      operator delete[](i);
    }
    if ( v5->mSubPartIndex != -1 )
      v6 = 0;
  }
  *(_QWORD *)v5->mCollisionEventData = -4647714812233515008i64;
  *(_QWORD *)&v5->mCollisionEventData[2] = -4647714812233515008i64;
  v5->mFlags &= 0xFFFFFFFE;
  return v6;
}

// File Line: 421
// RVA: 0x462090
__int64 __fastcall UFG::StateMachineComponent::DoStateTransition(UFG::StateMachineComponent *this, int nodeToTransitionInto)
{
  UFG::StateMachineComponent *v2; // rdi
  int v3; // er8
  UFG::Event *v4; // r12
  UFG::qSymbol *v5; // r15
  UFG::qReflectObject *v6; // rcx
  unsigned int v7; // eax
  __int64 v8; // rbx
  UFG::SimObjectGame *v9; // rcx
  unsigned __int16 v10; // dx
  UFG::SimComponent *v11; // rax
  UFG::SimObjectGame *v12; // rcx
  unsigned __int16 v13; // dx
  UFG::SimComponent *v14; // r13
  UFG::SimComponent *v15; // rax
  unsigned int v16; // esi
  ModelType *v17; // rdi
  __int64 v18; // rax
  unsigned int v19; // er14
  UFG::qBaseNodeRB *v20; // rax
  unsigned int v21; // eax
  unsigned int v22; // esi
  signed __int64 v23; // rbx
  UFG::qPropertySet *v24; // r13
  UFG::qMatrix44 *v25; // rax
  UFG::SimObject *v26; // rax
  __m128 v27; // xmm2
  __m128 v28; // xmm2
  UFG::RigidBody *v29; // rax
  UFG::RigidBody *v30; // r14
  float v31; // xmm5_4
  float v32; // xmm4_4
  float v33; // xmm6_4
  float v34; // xmm5_4
  float v35; // xmm4_4
  float v36; // xmm6_4
  float v37; // xmm1_4
  float v38; // xmm2_4
  UFG::SimObject *v39; // rsi
  UFG::SimObject *v40; // r14
  char v41; // r13
  UFG::allocator::free_link *v42; // rax
  __int64 v43; // rax
  UFG::qNode<UFG::ExplosionManager::Explosion,UFG::ExplosionManager::Explosion> *v44; // rcx
  UFG::qNode<UFG::ExplosionManager::Explosion,UFG::ExplosionManager::Explosion> *v45; // rax
  float v46; // xmm1_4
  float v47; // xmm2_4
  float v48; // xmm3_4
  unsigned int v49; // esi
  hkpRigidBody *v50; // r10
  UFG::Constraint *v51; // rbx
  unsigned __int64 v52; // rdx
  int v53; // ecx
  int v54; // ecx
  float v55; // xmm1_4
  float v56; // xmm2_4
  float v57; // xmm1_4
  float v58; // xmm2_4
  UFG::Constraint *v59; // rax
  float v60; // xmm1_4
  float v61; // xmm2_4
  float v62; // xmm1_4
  float v63; // xmm2_4
  int v64; // xmm1_4
  int v65; // xmm2_4
  unsigned int v66; // eax
  UFG::eStimulusType v67; // ebx
  float v68; // xmm1_4
  float v69; // xmm2_4
  UFG::SimObjectGame *v70; // rcx
  unsigned __int16 v71; // dx
  UFG::SimComponent *v72; // rax
  unsigned int v73; // esi
  __int64 *v74; // rbx
  __int64 v75; // rbx
  UFG::qResourceInventory *v76; // rax
  UFG::qResourceWarehouse *v77; // rax
  __int64 v78; // rax
  signed __int64 v79; // rsi
  __int64 v80; // r14
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v81; // r13
  unsigned int i; // ebx
  __int64 v83; // rcx
  unsigned int v84; // edx
  bool v85; // zf
  UFG::RigidBody *v86; // rcx
  unsigned int v87; // ebx
  __int64 v88; // rcx
  bool v89; // cf
  unsigned int v90; // eax
  const char *v91; // r14
  char *v92; // r8
  unsigned int v93; // eax
  UFG::SimObjectGame *v94; // rcx
  unsigned __int16 v95; // dx
  UFG::SimComponent *v96; // rsi
  UFG::SimComponent *v97; // rax
  ActionPath *v98; // rax
  ActionPath *v99; // rbx
  const char *v100; // rdx
  ActionNode *v101; // rax
  ActionNode *v102; // r13
  __int64 v103; // rax
  __int64 v104; // rax
  __int64 v105; // rax
  char *v106; // rcx
  unsigned __int8 v107; // r13
  UFG::SimObjectGame *v108; // rcx
  unsigned __int16 v109; // dx
  UFG::SimComponent *v110; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v111; // rcx
  UFG::SimObjectGame *v112; // rcx
  unsigned __int16 v113; // dx
  UFG::SimComponent *v114; // rax
  Render::IDecalScenery *v115; // rcx
  UFG::SimObjectGame *v116; // rcx
  unsigned __int16 v117; // dx
  UFG::SimComponent *v118; // rax
  Render::IDecalScenery **v119; // rcx
  UFG::RigidBody *v120; // rcx
  int v121; // er8
  int v122; // er9
  int v123; // eax
  hkpRigidBody *v124; // rdx
  unsigned int v125; // eax
  UFG::Constraint *v126; // rax
  UFG::Constraint *v127; // rsi
  char *v128; // rax
  unsigned int v129; // eax
  UFG::Constraint *v130; // rax
  UFG::Constraint *v131; // rsi
  char *v132; // rax
  UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *v133; // rax
  int v134; // er9
  UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *v135; // rcx
  UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *v136; // rax
  unsigned int v137; // eax
  const char *v138; // rcx
  unsigned int v139; // eax
  UFG::SimObjectGame *v140; // rcx
  unsigned __int16 v141; // dx
  UFG::PhysicsRenderHelper *v142; // rax
  UFG::SimObjectGame *v143; // rcx
  unsigned __int16 v144; // dx
  UFG::SimComponent *v145; // rax
  UFG::SimObjectGame *v146; // rcx
  unsigned __int16 v147; // dx
  UFG::SimComponent *v148; // rax
  UFG::qVector4 v149; // xmm0
  __m128 v150; // xmm1
  UFG::RoadNetworkTrafficLightLocation *v151; // rax
  __m128 v152; // xmm9
  UFG::RoadNetworkTrafficLightLocation *v153; // rax
  hkpRigidBody *v154; // rcx
  unsigned int v155; // xmm1_4
  unsigned int v156; // xmm2_4
  unsigned int v157; // xmm3_4
  float v158; // xmm0_4
  UFG::allocator::free_link *v159; // rax
  UFG::Event *v160; // rax
  UFG::RigidBody *v161; // rcx
  float v162; // xmm3_4
  float v163; // xmm2_4
  float v164; // xmm9_4
  float v165; // xmm14_4
  float v166; // xmm1_4
  float v167; // xmm0_4
  float v168; // xmm2_4
  float v169; // xmm2_4
  UFG::RigidBody *v170; // rcx
  __int64 v171; // rax
  float v172; // xmm0_4
  TracksEnumBinding<unsigned long> pTrackEnumBinding; // [rsp+40h] [rbp-80h]
  UFG::qMatrix44 mat; // [rsp+60h] [rbp-60h]
  UFG::qMatrix44 d; // [rsp+A0h] [rbp-20h]
  UFG::qVector3 axis; // [rsp+E0h] [rbp+20h]
  hkTransformf transformOut; // [rsp+F0h] [rbp+30h]
  __int64 v178; // [rsp+160h] [rbp+A0h]
  UFG::qSymbol name[2]; // [rsp+260h] [rbp+1A0h]
  UFG::qSymbol result; // [rsp+268h] [rbp+1A8h]
  UFG::qSymbol *v181; // [rsp+270h] [rbp+1B0h]

  v178 = -2i64;
  v2 = this;
  this->mCurrentNodeIndex = nodeToTransitionInto;
  d = UFG::qMatrix44::msIdentity;
  v3 = this->mSubPartIndex;
  if ( v3 != -1 )
  {
    UFG::GetTransformFromShapeKey(
      &transformOut,
      *(hkpShape **)(*(_QWORD *)&this->mRigidBodyComponent.m_pPointer[2].m_Flags + 192i64),
      v3);
    hkTransformf::get4x4ColumnMajor(&transformOut, &d.v0.x);
  }
  v4 = 0i64;
  v5 = 0i64;
  v181 = 0i64;
  v6 = v2->mStateMachineDefinition.mData;
  if ( v6 )
  {
    v7 = v2->mCurrentNodeIndex;
    if ( v7 != -1 && (signed int)v7 < SLODWORD(v6[1].mBaseNode.mUID) )
    {
      v5 = (UFG::qSymbol *)&v6[1].vfptr[26 * v7];
      v181 = (UFG::qSymbol *)&v6[1].vfptr[26 * v7];
    }
  }
  if ( BYTE1(v5[97].mUID) )
    UFG::StateMachineComponent::KillEffects(v2);
  LODWORD(v8) = v5[6];
  while ( (_DWORD)v8 )
  {
    v8 = (unsigned int)(v8 - 1);
    UFG::StateMachineComponent::CreateEffect(v2, (UFG::StateMachineEffectNode *)(*(_QWORD *)&v5[4].mUID + 80 * v8), &d);
  }
  if ( v5[14].mUID )
  {
    v9 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v9 )
    {
      v10 = v9->m_Flags;
      if ( (v10 >> 14) & 1 )
      {
        v11 = v9->m_Components.p[9].m_pComponent;
      }
      else if ( (v10 & 0x8000u) == 0 )
      {
        if ( (v10 >> 13) & 1 )
          v11 = v9->m_Components.p[8].m_pComponent;
        else
          v11 = (v10 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(v9, UFG::BaseAnimationComponent::_TypeUID) : UFG::SimObject::GetComponentOfType((UFG::SimObject *)&v9->vfptr, UFG::BaseAnimationComponent::_TypeUID);
      }
      else
      {
        v11 = v9->m_Components.p[9].m_pComponent;
      }
      if ( v11 )
      {
        v12 = (UFG::SimObjectGame *)v2->m_pSimObject;
        if ( v12 )
        {
          v13 = v12->m_Flags;
          if ( (v13 >> 14) & 1 )
          {
            v14 = v12->m_Components.p[14].m_pComponent;
          }
          else if ( (v13 & 0x8000u) == 0 )
          {
            if ( (v13 >> 13) & 1 )
            {
              v14 = v12->m_Components.p[9].m_pComponent;
            }
            else
            {
              v15 = (v13 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(
                                        v12,
                                        UFG::CompositeDrawableComponent::_TypeUID) : UFG::SimObject::GetComponentOfType(
                                                                                       (UFG::SimObject *)&v12->vfptr,
                                                                                       UFG::CompositeDrawableComponent::_TypeUID);
              v14 = v15;
            }
          }
          else
          {
            v14 = v12->m_Components.p[14].m_pComponent;
          }
          if ( v14 )
          {
            v16 = 0;
            if ( v5[14].mUID > 0 )
            {
              v17 = (ModelType *)v14[22].m_SafePointerList.mNode.mNext;
              do
              {
                v18 = *(_QWORD *)&v5[12].mUID;
                v19 = *(_DWORD *)(v18 + 8i64 * v16);
                ModelType::SetRigidModelVisibilityOnBone(
                  v17,
                  *(_DWORD *)(v18 + 8i64 * v16),
                  *(_BYTE *)(v18 + 8i64 * v16 + 4));
                if ( *(_BYTE *)(*(_QWORD *)&v5[12].mUID + 8i64 * v16 + 5) )
                {
                  v20 = ModelType::GetSkeleton(v17);
                  v21 = Skeleton::GetBoneID((Skeleton *)v20, v19);
                  Render::IDecalScenery::RemoveAttachedDecals((Render::IDecalScenery *)&v14[1], v21);
                }
                ++v16;
              }
              while ( v16 < v5[14].mUID );
              v2 = *(UFG::StateMachineComponent **)&name[0].mUID;
            }
          }
        }
      }
    }
  }
  if ( v5[10].mUID )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, &mat);
    v22 = v5[10].mUID;
    do
    {
      v23 = *(_QWORD *)&v5[8].mUID + 92i64 * --v22;
      v24 = UFG::PropertySetManager::FindPropertySet((UFG::qSymbol *)(v23 + 88));
      if ( v24 )
      {
        UFG::Simulation::GenerateUniqueName(&UFG::gSim, &result, (UFG::qSymbol *)(v23 + 88));
        v25 = UFG::qMatrix44::operator*((UFG::qMatrix44 *)v23, (UFG::qMatrix44 *)&transformOut, &mat);
        v26 = UFG::SpawnInfoInterface::SpawnObject(&result, v24, v25, Count, 0i64, 0i64);
        v27 = (__m128)*(unsigned int *)(v23 + 64);
        v27.m128_f32[0] = (float)((float)(v27.m128_f32[0] * v27.m128_f32[0])
                                + (float)(*(float *)(v23 + 68) * *(float *)(v23 + 68)))
                        + (float)(*(float *)(v23 + 72) * *(float *)(v23 + 72));
        if ( COERCE_FLOAT(_mm_sqrt_ps(v27)) > 0.0
          || (v28 = (__m128)*(unsigned int *)(v23 + 76),
              v28.m128_f32[0] = (float)((float)(v28.m128_f32[0] * v28.m128_f32[0])
                                      + (float)(*(float *)(v23 + 80) * *(float *)(v23 + 80)))
                              + (float)(*(float *)(v23 + 84) * *(float *)(v23 + 84)),
              COERCE_FLOAT(_mm_sqrt_ps(v28)) != 0.0) )
        {
          if ( v26 )
          {
            v29 = (UFG::RigidBody *)UFG::SimObject::GetComponentOfType(v26, UFG::RigidBodyComponent::_TypeUID);
            v30 = v29;
            if ( v29 )
            {
              v31 = *(float *)(v23 + 68);
              v32 = *(float *)(v23 + 64);
              v33 = *(float *)(v23 + 72);
              mat.v2.w = (float)((float)(mat.v0.x * v32) + (float)(mat.v1.x * v31))
                       + (float)(*(float *)&pTrackEnumBinding.mPrev * v33);
              mat.v3.x = (float)((float)(mat.v0.y * v32) + (float)(mat.v1.y * v31))
                       + (float)(*((float *)&pTrackEnumBinding.mPrev + 1) * v33);
              mat.v3.y = (float)((float)(mat.v0.z * v32) + (float)(mat.v1.z * v31))
                       + (float)(*(float *)&pTrackEnumBinding.mNext * v33);
              UFG::RigidBody::ApplyLinearImpulse(v29, (UFG::qVector3 *)&mat.v2.w);
              v34 = *(float *)(v23 + 80);
              v35 = *(float *)(v23 + 76);
              v36 = *(float *)(v23 + 84);
              mat.v2.x = (float)((float)(mat.v0.x * v35) + (float)(mat.v1.x * v34))
                       + (float)(*(float *)&pTrackEnumBinding.mPrev * v36);
              mat.v2.y = (float)((float)(mat.v0.y * v35) + (float)(mat.v1.y * v34))
                       + (float)(*((float *)&pTrackEnumBinding.mPrev + 1) * v36);
              mat.v2.z = (float)((float)(mat.v0.z * v35) + (float)(mat.v1.z * v34))
                       + (float)(*(float *)&pTrackEnumBinding.mNext * v36);
              UFG::RigidBody::ApplyAngularImpulse(v30, (UFG::qVector3 *)&mat.v2);
            }
          }
        }
      }
    }
    while ( v22 );
  }
  if ( v5[68].mUID != -1 )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (UFG::qMatrix44 *)&transformOut);
    v37 = *(float *)&v5[50].mUID + transformOut.m_translation.m_quad.m128_f32[2];
    v38 = *(float *)&v5[49].mUID + transformOut.m_translation.m_quad.m128_f32[1];
    mat.v2.x = *(float *)&v5[48].mUID + transformOut.m_translation.m_quad.m128_f32[0];
    mat.v2.y = v38;
    mat.v2.z = v37;
    v39 = v2->mLastDamageSource.m_pPointer;
    v40 = v2->m_pSimObject;
    v41 = v5[100].mUID;
    v42 = UFG::qMalloc(0xB0ui64, UFG::gGlobalNewName, 0i64);
    *(_QWORD *)&name[0].mUID = v42;
    if ( v42 )
      UFG::ExplosionManager::Explosion::Explosion(
        (UFG::ExplosionManager::Explosion *)v42,
        (UFG::qVector3 *)&mat.v2,
        v5 + 68,
        v40);
    else
      v43 = 0i64;
    v44 = (UFG::qNode<UFG::ExplosionManager::Explosion,UFG::ExplosionManager::Explosion> *)(v43 + 8);
    v45 = UFG::ExplosionManager::mActiveExplosions.mNode.mNext;
    UFG::ExplosionManager::mActiveExplosions.mNode.mNext = v44;
    v44->mPrev = (UFG::qNode<UFG::ExplosionManager::Explosion,UFG::ExplosionManager::Explosion> *)&UFG::ExplosionManager::mActiveExplosions;
    v44->mNext = v45;
    v45->mPrev = v44;
  }
  if ( BYTE2(v5[96].mUID) )
  {
    LODWORD(v2->mThrusterDuration) = v5[79];
    v46 = *(float *)&v5[37].mUID;
    v47 = *(float *)&v5[38].mUID;
    v48 = *(float *)&v5[39].mUID;
    LODWORD(v2->mThrusterForce.x) = v5[36];
    v2->mThrusterForce.y = v46;
    v2->mThrusterForce.z = v47;
    v2->mThrusterForce.w = v48;
  }
  v49 = 0;
  if ( v5[18].mUID > 0 )
  {
    while ( 1 )
    {
      v50 = (hkpRigidBody *)v2->mRigidBodyComponent.m_pPointer[2].m_pSimObject;
      if ( v50 )
        break;
LABEL_67:
      if ( ++v49 >= v5[18].mUID )
        goto LABEL_68;
    }
    v51 = 0i64;
    v52 = *(_QWORD *)&v5[16].mUID + ((unsigned __int64)v49 << 6);
    v53 = *(_DWORD *)(v52 + 60);
    if ( v53 )
    {
      v54 = v53 - 1;
      if ( v54 )
      {
        if ( v54 != 1 )
        {
LABEL_66:
          UFG::RigidBody::AddConstraint((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, v51);
          UFG::BasePhysicsSystem::AddConstraint(UFG::BasePhysicsSystem::mInstance, v51->mConstraintInstance);
          goto LABEL_67;
        }
        v55 = *(float *)(v52 + 20);
        v56 = *(float *)(v52 + 24);
        mat.v2.x = *(float *)(v52 + 16);
        mat.v2.y = v55;
        mat.v2.z = v56;
        v57 = *(float *)(v52 + 4);
        v58 = *(float *)(v52 + 8);
        mat.v2.w = *(float *)v52;
        mat.v3.x = v57;
        mat.v3.y = v58;
        v59 = UFG::Constraint::CreateStiffSpringContraint(
                v50,
                0i64,
                (UFG::qSymbol *)(v52 + 56),
                (UFG::qVector3 *)&mat.v2.w,
                (UFG::qVector3 *)&mat.v2);
      }
      else
      {
        v60 = *(float *)(v52 + 36);
        v61 = *(float *)(v52 + 40);
        axis.x = *(float *)(v52 + 32);
        axis.y = v60;
        axis.z = v61;
        v62 = *(float *)(v52 + 4);
        v63 = *(float *)(v52 + 8);
        mat.v0.x = *(float *)v52;
        mat.v0.y = v62;
        mat.v0.z = v63;
        v59 = UFG::Constraint::CreateHingeConstraint(
                v50,
                0i64,
                (UFG::qSymbol *)(v52 + 56),
                (UFG::qVector3 *)&mat,
                &axis,
                *(float *)(v52 + 48),
                *(float *)(v52 + 52));
      }
    }
    else
    {
      v64 = *(_DWORD *)(v52 + 4);
      v65 = *(_DWORD *)(v52 + 8);
      LODWORD(pTrackEnumBinding.mPrev) = *(_DWORD *)v52;
      HIDWORD(pTrackEnumBinding.mPrev) = v64;
      LODWORD(pTrackEnumBinding.mNext) = v65;
      v59 = UFG::Constraint::CreateBallAndSocketConstraint(
              v50,
              0i64,
              (UFG::qSymbol *)(v52 + 56),
              (UFG::qVector3 *)&pTrackEnumBinding);
    }
    v51 = v59;
    goto LABEL_66;
  }
LABEL_68:
  v66 = v5[69].mUID;
  if ( *(float *)&v66 != -6.8056469e38/*NaN*/ )
  {
    *(_QWORD *)&name[0].mUID = &result;
    result.mUID = v66;
    v67 = (unsigned int)UFG::StimulusManager::GetStimulusType((__int64)&result);
    UFG::RigidBody::GetCentreOfMass(
      (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
      (UFG::qVector3 *)&pTrackEnumBinding);
    *(UFG::qVector3 *)&mat.v0.x = UFG::qVector3::msZero;
    mat.v0.w = -6.8056469e38/*NaN*/;
    mat.v1.x = -1.0;
    mat.v1.y = -1.0;
    LODWORD(mat.v0.w) = v5[70].mUID == UFG::qSymbol::create_from_string(&result, "eSTIMULUS_EMISSION_CONTINUOUS")->mUID;
    LODWORD(mat.v1.y) = v5[74];
    LODWORD(mat.v1.x) = v5[73];
    v68 = *(float *)&v5[52].mUID;
    v69 = *(float *)&v5[53].mUID;
    LODWORD(mat.v0.x) = v5[51];
    mat.v0.y = v68;
    mat.v0.z = v69;
    UFG::StimulusManager::BeginStimulus(
      UFG::StimulusManager::s_pInstance,
      v67,
      (UFG::StimulusParameters *)&mat,
      (UFG::qVector3 *)&pTrackEnumBinding);
  }
  if ( v5[84].mUID != -1 )
  {
    v70 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v70 )
    {
      v71 = v70->m_Flags;
      if ( (v71 >> 14) & 1 )
      {
        v72 = UFG::SimObjectGame::GetComponentOfTypeHK(v70, UFG::PhysicsRenderHelper::_TypeUID);
      }
      else if ( (v71 & 0x8000u) == 0 )
      {
        if ( (v71 >> 13) & 1 )
          v72 = UFG::SimObjectGame::GetComponentOfTypeHK(v70, UFG::PhysicsRenderHelper::_TypeUID);
        else
          v72 = (v71 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(v70, UFG::PhysicsRenderHelper::_TypeUID) : UFG::SimObject::GetComponentOfType((UFG::SimObject *)&v70->vfptr, UFG::PhysicsRenderHelper::_TypeUID);
      }
      else
      {
        v72 = UFG::SimObjectGame::GetComponentOfTypeHK(v70, UFG::PhysicsRenderHelper::_TypeUID);
      }
      if ( v72 )
      {
        v73 = v5[84].mUID;
        v74 = *(__int64 **)&v72[1].m_TypeUID;
        if ( v74 )
        {
          v75 = *v74;
          v76 = `UFG::qGetResourceInventory<Illusion::Model>'::`2'::result;
          if ( !`UFG::qGetResourceInventory<Illusion::Model>'::`2'::result )
          {
            v77 = UFG::qResourceWarehouse::Instance();
            v76 = UFG::qResourceWarehouse::GetInventory(v77, 0xA2ADCD77);
            `UFG::qGetResourceInventory<Illusion::Model>'::`2'::result = v76;
          }
          UFG::qResourceHandle::Init((UFG::qResourceHandle *)(v75 + 136), 0xA2ADCD77, v73, v76);
        }
      }
    }
  }
  if ( BYTE1(v5[96].mUID) )
  {
    hkpPhysicsSystem::hkpPhysicsSystem((hkpPhysicsSystem *)&transformOut);
    UFG::Destruction::ForceFracture(
      UFG::Destruction::mInstance,
      (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
      (hkpPhysicsSystem *)&transformOut,
      0xFFFFFFFFi64);
    hkpPhysicsSystem::~hkpPhysicsSystem((hkpPhysicsSystem *)&transformOut);
  }
  if ( v5[22].mUID )
  {
    v78 = 0i64;
    *(float *)&result.mUID = 0.0;
    do
    {
      v79 = 3 * v78;
      v80 = *(_QWORD *)&v5[20].mUID;
      if ( *(_DWORD *)(v80 + 24 * v78) == -1 )
      {
        v87 = 0;
        if ( *(_DWORD *)(v80 + 24 * v78 + 16) > 0u )
        {
          do
          {
            v88 = *(_QWORD *)(v80 + 8 * v79 + 8);
            v89 = *(_DWORD *)(v88 + 8i64 * v87 + 4) < 1u;
            UFG::RigidBody::DisableFracturePartByGuid(
              (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
              *(_DWORD *)(v88 + 8i64 * v87++));
          }
          while ( v87 < *(_DWORD *)(v80 + 8 * v79 + 16) );
        }
      }
      else
      {
        v81 = v2->mFractureList.mNode.mNext;
        if ( v81 != (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)&v2->mFractureList )
        {
          do
          {
            if ( LODWORD(v81[1].mPrev) == *(_DWORD *)(v80 + 8 * v79) )
            {
              for ( i = 0; i < *(_DWORD *)(v80 + 8 * v79 + 16); ++i )
              {
                v83 = *(_QWORD *)(v80 + 8 * v79 + 8);
                v84 = *(_DWORD *)(v83 + 8i64 * i);
                v85 = *(_DWORD *)(v83 + 8i64 * i + 4) == 1;
                v86 = (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer;
                if ( v85 )
                  UFG::RigidBody::DisableFracturePartByGuid(v86, v84);
                else
                  UFG::RigidBody::EnableFracturePartByGuid(v86, v84, 0);
              }
            }
            v81 = v81->mNext;
          }
          while ( v81 != (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)&v2->mFractureList );
          v5 = v181;
        }
      }
      v78 = result.mUID + 1;
      result.mUID = v78;
    }
    while ( (unsigned int)v78 < v5[22].mUID );
  }
  v90 = v5[34].mUID;
  v91 = &customWorldMapCaption;
  if ( v90 && (v90 != 1 || **(_BYTE **)&v5[32].mUID) )
  {
    if ( v5[34].mUID )
      v92 = *(char **)&v5[32].mUID;
    else
      v92 = &customWorldMapCaption;
    UFG::qPrintf("StateMachineComponent debug print: (%x) %s\n", v2, v92);
  }
  v93 = v5[30].mUID;
  if ( v93 && (v93 != 1 || **(_BYTE **)&v5[28].mUID) )
  {
    v94 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v94 )
    {
      v95 = v94->m_Flags;
      if ( (v95 >> 14) & 1 )
      {
        v96 = v94->m_Components.p[7].m_pComponent;
      }
      else if ( (v95 & 0x8000u) == 0 )
      {
        if ( (v95 >> 13) & 1 )
        {
          v96 = v94->m_Components.p[6].m_pComponent;
        }
        else
        {
          v97 = (v95 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(v94, UFG::ActionTreeComponent::_TypeUID) : UFG::SimObject::GetComponentOfType((UFG::SimObject *)&v94->vfptr, UFG::ActionTreeComponent::_TypeUID);
          v96 = v97;
        }
      }
      else
      {
        v96 = v94->m_Components.p[7].m_pComponent;
      }
      if ( v96 )
      {
        v98 = (ActionPath *)UFG::qMalloc(0x10ui64, UFG::gGlobalNewName, 0i64);
        v99 = v98;
        *(_QWORD *)&name[0].mUID = v98;
        if ( v98 )
        {
          if ( v5[30].mUID )
            v100 = *(const char **)&v5[28].mUID;
          else
            v100 = &customWorldMapCaption;
          v98->mPath.mCount = 0;
          v98->mPath.mData.mOffset = 0i64;
          ActionPath::Append(v98, v100);
        }
        else
        {
          v99 = 0i64;
        }
        v101 = ActionNode::Find(v99, 0i64);
        v102 = v101;
        if ( v101 )
        {
          v103 = (__int64)v101->vfptr[3].GetClassname((Expression::IMemberMap *)&v101->vfptr);
          if ( !v103
            || (*(unsigned __int8 (__fastcall **)(__int64, UFG::qNode<UFG::RebindingComponentHandleBase,UFG::RebindingComponentHandleBase> *))(*(_QWORD *)v103 + 80i64))(
                 v103,
                 v96[2].m_BoundComponentHandles.mNode.mNext) )
          {
            ActionController::Play((ActionController *)&v96[3], v102, 0);
          }
        }
        *(_QWORD *)&name[0].mUID = v99;
        if ( v99 )
        {
          if ( v99->mPath.mCount >= 0 )
          {
            v104 = v99->mPath.mData.mOffset;
            if ( v104 && (UFG::qOffset64<ActionID *> *)((char *)&v99->mPath.mData + v104) )
            {
              v105 = v99->mPath.mData.mOffset;
              if ( v105 )
                v106 = (char *)&v99->mPath.mData + v105;
              else
                v106 = 0i64;
              operator delete[](v106);
            }
            v99->mPath.mData.mOffset = 0i64;
            v99->mPath.mCount &= 0x80000000;
          }
          operator delete[](v99);
        }
      }
    }
  }
  if ( LOBYTE(v5[96].mUID) )
  {
    *(_DWORD *)(*(_QWORD *)&v2->mRigidBodyComponent.m_pPointer[2].m_TypeUID + 88i64) |= 2u;
    v107 = 1;
    v108 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v108 )
    {
      v109 = v108->m_Flags;
      if ( (v109 >> 14) & 1 )
      {
        v110 = v108->m_Components.p[9].m_pComponent;
      }
      else if ( (v109 & 0x8000u) == 0 )
      {
        if ( (v109 >> 13) & 1 )
          v110 = v108->m_Components.p[8].m_pComponent;
        else
          v110 = (v109 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(
                                      v108,
                                      UFG::BaseAnimationComponent::_TypeUID) : UFG::SimObject::GetComponentOfType(
                                                                                 (UFG::SimObject *)&v108->vfptr,
                                                                                 UFG::BaseAnimationComponent::_TypeUID);
      }
      else
      {
        v110 = v108->m_Components.p[9].m_pComponent;
      }
      if ( v110 )
      {
        v111 = v110[2].m_SafePointerList.mNode.mNext;
        if ( v111 )
          LODWORD(v111[5].mPrev) |= 1u;
      }
    }
  }
  else
  {
    v107 = 0;
  }
  if ( BYTE1(v5[98].mUID) )
    UFG::RigidBody::SetCollisionLayer((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, 0x15u, -1, -1, -1);
  if ( BYTE2(v5[98].mUID) )
  {
    v112 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v112 )
    {
      v113 = v112->m_Flags;
      if ( (v113 >> 14) & 1 )
      {
        v114 = v112->m_Components.p[14].m_pComponent;
      }
      else if ( (v113 & 0x8000u) == 0 )
      {
        if ( (v113 >> 13) & 1 )
          v114 = v112->m_Components.p[9].m_pComponent;
        else
          v114 = (v113 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(
                                      v112,
                                      UFG::CompositeDrawableComponent::_TypeUID) : UFG::SimObject::GetComponentOfType(
                                                                                     (UFG::SimObject *)&v112->vfptr,
                                                                                     UFG::CompositeDrawableComponent::_TypeUID);
      }
      else
      {
        v114 = v112->m_Components.p[14].m_pComponent;
      }
      if ( v114 )
      {
        v115 = (Render::IDecalScenery *)&v114[1];
LABEL_188:
        Render::IDecalScenery::RemoveAttachedDecals(v115, 0xFFFFFFFF);
        goto LABEL_189;
      }
    }
    v116 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v116 )
    {
      v117 = v116->m_Flags;
      if ( (v117 >> 14) & 1 )
      {
        v118 = UFG::SimObjectGame::GetComponentOfTypeHK(v116, UFG::PhysicsRenderHelper::_TypeUID);
      }
      else if ( (v117 & 0x8000u) == 0 )
      {
        if ( (v117 >> 13) & 1 )
          v118 = UFG::SimObjectGame::GetComponentOfTypeHK(v116, UFG::PhysicsRenderHelper::_TypeUID);
        else
          v118 = (v117 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(v116, UFG::PhysicsRenderHelper::_TypeUID) : UFG::SimObject::GetComponentOfType((UFG::SimObject *)&v116->vfptr, UFG::PhysicsRenderHelper::_TypeUID);
      }
      else
      {
        v118 = UFG::SimObjectGame::GetComponentOfTypeHK(v116, UFG::PhysicsRenderHelper::_TypeUID);
      }
      if ( v118 )
      {
        v119 = *(Render::IDecalScenery ***)&v118[1].m_TypeUID;
        if ( v119 )
        {
          v115 = *v119;
          goto LABEL_188;
        }
      }
    }
  }
LABEL_189:
  if ( LOBYTE(v5[92].mUID) )
    UFG::RigidBody::SetMotionType((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, v5[93].mUID);
  if ( LOBYTE(v5[94].mUID) )
  {
    v120 = (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer;
    if ( v120 )
    {
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v124 = v120->mBody;
      if ( v124 )
      {
        v121 = v124->m_collidable.m_broadPhaseHandle.m_collisionFilterInfo >> 16;
        v122 = (v124->m_collidable.m_broadPhaseHandle.m_collisionFilterInfo >> 5) & 0x1F;
        v123 = (v124->m_collidable.m_broadPhaseHandle.m_collisionFilterInfo >> 10) & 0x1F;
      }
      UFG::RigidBody::SetCollisionLayer(v120, v5[95].mUID, v121, v122, v123);
    }
  }
  v125 = v5[71].mUID;
  if ( v125 != -1 )
  {
    v181 = name;
    name[0].mUID = v125;
    v126 = UFG::RigidBody::GetConstraintByName((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (__int64)name);
    v127 = v126;
    if ( v126 )
    {
      if ( hkpConstraintInstance::isEnabled(v126->mConstraintInstance, (hkBool *)&result)->m_bool )
        hkpConstraintInstance::disable(v127->mConstraintInstance);
    }
    else
    {
      v128 = UFG::qSymbol::as_cstr_dbg((UFG::qSymbolUC *)&v5[71]);
      UFG::qPrintf("warning, state machine is trying to disable non-existing constraint %s\n", v128);
    }
  }
  v129 = v5[72].mUID;
  if ( v129 != -1 )
  {
    v181 = name;
    name[0].mUID = v129;
    v130 = UFG::RigidBody::GetConstraintByName((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (__int64)name);
    v131 = v130;
    if ( v130 )
    {
      if ( !hkpConstraintInstance::isEnabled(v130->mConstraintInstance, (hkBool *)&result)->m_bool )
        hkpConstraintInstance::enable(v131->mConstraintInstance);
    }
    else
    {
      v132 = UFG::qSymbol::as_cstr_dbg((UFG::qSymbolUC *)&v5[71]);
      UFG::qPrintf("warning, state machine is trying to disable non-existing constraint %s\n", v132);
    }
  }
  if ( BYTE2(v5[97].mUID) )
    UFG::RigidBody::EnableAllConstraints((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer);
  if ( HIBYTE(v5[97].mUID) )
    UFG::RigidBody::DisableAllConstraints((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer);
  if ( LOBYTE(v5[98].mUID) )
    UFG::RigidBody::DeleteAllConstraints((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer);
  if ( v5[86].mUID != -1 )
  {
    pTrackEnumBinding.mPrev = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *)&pTrackEnumBinding;
    pTrackEnumBinding.mNext = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *)&pTrackEnumBinding;
    pTrackEnumBinding.m_EnumSymbol.mUID = -1;
    pTrackEnumBinding.m_EnumSymbol = v5[86];
    *(_QWORD *)&pTrackEnumBinding.m_EnumValue = 0i64;
    pTrackEnumBinding.m_uEnumUID = 0;
    if ( gVisualTreatmentEnum.m_enumLists.size )
    {
      TracksEnum<unsigned long>::ResolveBinding(&gVisualTreatmentEnum, &pTrackEnumBinding);
    }
    else
    {
      v133 = gVisualTreatmentEnum.m_UnresolvedTracksEnumBindingList.mNode.mPrev;
      gVisualTreatmentEnum.m_UnresolvedTracksEnumBindingList.mNode.mPrev->mNext = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *)&pTrackEnumBinding;
      pTrackEnumBinding.mPrev = v133;
      pTrackEnumBinding.mNext = &gVisualTreatmentEnum.m_UnresolvedTracksEnumBindingList.mNode;
      gVisualTreatmentEnum.m_UnresolvedTracksEnumBindingList.mNode.mPrev = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *)&pTrackEnumBinding;
    }
    v134 = pTrackEnumBinding.m_EnumValue;
    v135 = pTrackEnumBinding.mPrev;
    v136 = pTrackEnumBinding.mNext;
    pTrackEnumBinding.mPrev->mNext = pTrackEnumBinding.mNext;
    v136->mPrev = v135;
    pTrackEnumBinding.mPrev = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *)&pTrackEnumBinding;
    pTrackEnumBinding.mNext = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *)&pTrackEnumBinding;
    UFG::RenderWorld::VisualTreatmentPostEffect_StartVisualTreatment(v134, 0, 0);
  }
  v137 = v5[90].mUID;
  if ( v137 && (v137 != 1 || **(_BYTE **)&v5[88].mUID) )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (UFG::qMatrix44 *)&transformOut);
    *(_QWORD *)&name[0].mUID = 0i64;
    UFG::OneShotPool::GetOneShotHandle((UFG::OneShotHandle *)name, (UFG::qMatrix44 *)&transformOut);
    if ( UFG::OneShotHandle::IsValid((UFG::OneShotHandle *)name) )
    {
      UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, &mat);
      if ( v5[90].mUID )
        v138 = *(const char **)&v5[88].mUID;
      else
        v138 = &customWorldMapCaption;
      v139 = UFG::qToUInt32(v138, 0);
      if ( !v139 )
      {
        if ( v5[90].mUID > 0 )
          v91 = *(const char **)&v5[88].mUID;
        v139 = UFG::TiDo::CalcWwiseUid(v91);
      }
      UFG::OneShot::Play(*(UFG::OneShot **)&name[0].mUID, v139);
    }
    UFG::OneShotHandle::Release((UFG::OneShotHandle *)name);
  }
  if ( HIBYTE(v5[98].mUID) )
  {
    v140 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v140 )
    {
      v141 = v140->m_Flags;
      if ( (v141 >> 14) & 1 )
      {
        v142 = (UFG::PhysicsRenderHelper *)UFG::SimObjectGame::GetComponentOfTypeHK(
                                             v140,
                                             UFG::PhysicsRenderHelper::_TypeUID);
      }
      else if ( (v141 & 0x8000u) == 0 )
      {
        if ( (v141 >> 13) & 1 )
          v142 = (UFG::PhysicsRenderHelper *)UFG::SimObjectGame::GetComponentOfTypeHK(
                                               v140,
                                               UFG::PhysicsRenderHelper::_TypeUID);
        else
          v142 = (UFG::PhysicsRenderHelper *)((v141 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(
                                                                   v140,
                                                                   UFG::PhysicsRenderHelper::_TypeUID) : UFG::SimObject::GetComponentOfType((UFG::SimObject *)&v140->vfptr, UFG::PhysicsRenderHelper::_TypeUID));
      }
      else
      {
        v142 = (UFG::PhysicsRenderHelper *)UFG::SimObjectGame::GetComponentOfTypeHK(
                                             v140,
                                             UFG::PhysicsRenderHelper::_TypeUID);
      }
      if ( v142 )
        UFG::PhysicsRenderHelper::DisableSelfIllumination(v142);
    }
  }
  if ( LOBYTE(v5[99].mUID) )
  {
    if ( UFG::RigidBody::GetPercentFractured((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer) >= *(float *)&v5[76].mUID )
    {
      v143 = (UFG::SimObjectGame *)v2->m_pSimObject;
      if ( v143 )
      {
        v144 = v143->m_Flags;
        if ( (v144 >> 14) & 1 )
        {
          v145 = UFG::SimObjectGame::GetComponentOfTypeHK(v143, UFG::ParkourComponent::_TypeUID);
        }
        else if ( (v144 & 0x8000u) == 0 )
        {
          if ( (v144 >> 13) & 1 )
            v145 = UFG::SimObjectGame::GetComponentOfTypeHK(v143, UFG::ParkourComponent::_TypeUID);
          else
            v145 = (v144 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(v143, UFG::ParkourComponent::_TypeUID) : UFG::SimObject::GetComponentOfType((UFG::SimObject *)&v143->vfptr, UFG::ParkourComponent::_TypeUID);
        }
        else
        {
          v145 = UFG::SimObjectGame::GetComponentOfTypeHK(v143, UFG::ParkourComponent::_TypeUID);
        }
        if ( v145 )
          LODWORD(v145[2].m_BoundComponentHandles.mNode.mNext) |= 8u;
      }
    }
  }
  if ( BYTE1(v5[99].mUID) )
  {
    if ( UFG::RigidBody::GetPercentFractured((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer) >= *(float *)&v5[77].mUID )
    {
      v146 = (UFG::SimObjectGame *)v2->m_pSimObject;
      if ( v146 )
      {
        v147 = v146->m_Flags;
        if ( (v147 >> 14) & 1 )
        {
          v148 = UFG::SimObjectGame::GetComponentOfTypeHK(v146, UFG::DynamicCoverComponent::_TypeUID);
        }
        else if ( (v147 & 0x8000u) == 0 )
        {
          if ( (v147 >> 13) & 1 )
            v148 = UFG::SimObjectGame::GetComponentOfTypeHK(v146, UFG::DynamicCoverComponent::_TypeUID);
          else
            v148 = (v147 >> 12) & 1 ? UFG::SimObjectGame::GetComponentOfTypeHK(
                                        v146,
                                        UFG::DynamicCoverComponent::_TypeUID) : UFG::SimObject::GetComponentOfType(
                                                                                  (UFG::SimObject *)&v146->vfptr,
                                                                                  UFG::DynamicCoverComponent::_TypeUID);
        }
        else
        {
          v148 = UFG::SimObjectGame::GetComponentOfTypeHK(v146, UFG::DynamicCoverComponent::_TypeUID);
        }
        if ( v148 )
          LOBYTE(v148[2].vfptr) = 0;
      }
    }
  }
  if ( BYTE2(v5[99].mUID) )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, &mat);
    pTrackEnumBinding.0 = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)d.v3;
    v149 = mat.v0;
    mat.v0 = (UFG::qVector4)_mm_mul_ps(_mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 0), (__m128)mat.v0);
    v150 = _mm_add_ps(
             _mm_mul_ps(
               _mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 255),
               *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID),
             _mm_add_ps(
               _mm_add_ps(
                 _mm_add_ps(_mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 0), (__m128)v149), (__m128)0i64),
                 _mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 85), (__m128)mat.v1)),
               _mm_mul_ps(_mm_shuffle_ps((__m128)pTrackEnumBinding.0, (__m128)pTrackEnumBinding.0, 170), (__m128)d.v3)));
    transformOut.m_rotation.m_col0.m_quad = _mm_add_ps(
                                              _mm_add_ps(
                                                _mm_add_ps(
                                                  _mm_add_ps((__m128)mat.v0, _xmm),
                                                  _mm_mul_ps(
                                                    _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 85),
                                                    (__m128)mat.v1)),
                                                _mm_mul_ps(
                                                  _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 170),
                                                  (__m128)d.v3)),
                                              _mm_mul_ps(
                                                _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 255),
                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_rotation.m_col1.m_quad = _mm_add_ps(
                                              _mm_add_ps(
                                                _mm_add_ps(
                                                  _mm_add_ps(
                                                    _mm_mul_ps(
                                                      _mm_shuffle_ps((__m128)d.v1, (__m128)d.v1, 0),
                                                      (__m128)v149),
                                                    (__m128)0i64),
                                                  _mm_mul_ps(
                                                    _mm_shuffle_ps((__m128)d.v1, (__m128)d.v1, 85),
                                                    (__m128)mat.v1)),
                                                _mm_mul_ps(
                                                  _mm_shuffle_ps((__m128)d.v1, (__m128)d.v1, 170),
                                                  (__m128)d.v3)),
                                              _mm_mul_ps(
                                                _mm_shuffle_ps((__m128)d.v1, (__m128)d.v1, 255),
                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_rotation.m_col2.m_quad = _mm_add_ps(
                                              _mm_add_ps(
                                                _mm_add_ps(
                                                  _mm_add_ps(
                                                    _mm_mul_ps(
                                                      _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 0),
                                                      (__m128)v149),
                                                    (__m128)0i64),
                                                  _mm_mul_ps(
                                                    _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 85),
                                                    (__m128)mat.v1)),
                                                _mm_mul_ps(
                                                  _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 170),
                                                  (__m128)d.v3)),
                                              _mm_mul_ps(
                                                _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 255),
                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    LODWORD(pTrackEnumBinding.mPrev) = v150.m128_i32[0];
    HIDWORD(pTrackEnumBinding.mPrev) = (unsigned __int128)_mm_shuffle_ps(v150, v150, 85);
    LODWORD(pTrackEnumBinding.mNext) = (unsigned __int128)_mm_shuffle_ps(v150, v150, 170);
    v151 = UFG::RoadNetworkResource::GetTrafficLightNearPosition(
             UFG::gpRoadNetworkResource,
             (UFG::qVector3 *)&pTrackEnumBinding);
    if ( v151 )
      UFG::RoadNetworkTrafficLightLocation::DisableEffects(v151);
  }
  if ( HIBYTE(v5[99].mUID) )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, &mat);
    v152 = _mm_add_ps(
             _mm_add_ps(
               _mm_add_ps(
                 _mm_add_ps((__m128)0i64, _mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 0), (__m128)mat.v0)),
                 _mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 85), (__m128)mat.v1)),
               _mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 170), (__m128)pTrackEnumBinding.0)),
             _mm_mul_ps(
               _mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 255),
               *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_rotation.m_col0.m_quad = _mm_add_ps(
                                              _mm_add_ps(
                                                _mm_add_ps(
                                                  _mm_add_ps(
                                                    (__m128)0i64,
                                                    _mm_mul_ps(
                                                      _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 0),
                                                      (__m128)mat.v0)),
                                                  _mm_mul_ps(
                                                    _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 85),
                                                    (__m128)mat.v1)),
                                                _mm_mul_ps(
                                                  _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 170),
                                                  (__m128)pTrackEnumBinding.0)),
                                              _mm_mul_ps(
                                                _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 255),
                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_rotation.m_col1.m_quad = _mm_add_ps(
                                              _mm_add_ps(
                                                _mm_add_ps(
                                                  _mm_add_ps(
                                                    (__m128)0i64,
                                                    _mm_mul_ps(
                                                      _mm_shuffle_ps((__m128)d.v1, (__m128)d.v1, 0),
                                                      (__m128)mat.v0)),
                                                  _mm_mul_ps(
                                                    _mm_shuffle_ps((__m128)d.v1, (__m128)d.v1, 85),
                                                    (__m128)mat.v1)),
                                                _mm_mul_ps(
                                                  _mm_shuffle_ps((__m128)d.v1, (__m128)d.v1, 170),
                                                  (__m128)pTrackEnumBinding.0)),
                                              _mm_mul_ps(
                                                _mm_shuffle_ps((__m128)d.v1, (__m128)d.v1, 255),
                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_rotation.m_col2.m_quad = _mm_add_ps(
                                              _mm_add_ps(
                                                _mm_add_ps(
                                                  _mm_add_ps(
                                                    (__m128)0i64,
                                                    _mm_mul_ps(
                                                      _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 0),
                                                      (__m128)mat.v0)),
                                                  _mm_mul_ps(
                                                    _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 85),
                                                    (__m128)mat.v1)),
                                                _mm_mul_ps(
                                                  _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 170),
                                                  (__m128)pTrackEnumBinding.0)),
                                              _mm_mul_ps(
                                                _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 255),
                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    LODWORD(pTrackEnumBinding.mPrev) = v152.m128_i32[0];
    HIDWORD(pTrackEnumBinding.mPrev) = (unsigned __int128)_mm_shuffle_ps(v152, v152, 85);
    LODWORD(pTrackEnumBinding.mNext) = (unsigned __int128)_mm_shuffle_ps(v152, v152, 170);
    v153 = UFG::RoadNetworkResource::GetTrafficLightNearPosition(
             UFG::gpRoadNetworkResource,
             (UFG::qVector3 *)&pTrackEnumBinding);
    if ( v153 )
      UFG::RoadNetworkTrafficLightLocation::EnableEffects(v153);
  }
  if ( v5[83].mUID != -1 )
  {
    v154 = v2->mPhantomRigidBody;
    if ( v154 )
    {
      UFG::PhantomCallback::DestroyPhantom(v154);
      v2->mPhantomRigidBody = 0i64;
    }
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (UFG::qMatrix44 *)&transformOut);
    mat.v0 = UFG::qMatrix44::msIdentity.v0;
    mat.v1 = UFG::qMatrix44::msIdentity.v1;
    pTrackEnumBinding.0 = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)UFG::qMatrix44::msIdentity.v2;
    v155 = v5[45].mUID;
    v156 = v5[46].mUID;
    v157 = v5[47].mUID;
    pTrackEnumBinding.m_EnumSymbol = v5[44];
    pTrackEnumBinding.m_EnumValue = v155;
    pTrackEnumBinding.m_uEnumIndex = v156;
    pTrackEnumBinding.m_uEnumUID = v157;
    mat.v0 = (UFG::qVector4)_mm_mul_ps(
                              _mm_shuffle_ps(
                                (__m128)UFG::qMatrix44::msIdentity.v0,
                                (__m128)UFG::qMatrix44::msIdentity.v0,
                                0),
                              transformOut.m_rotation.m_col0.m_quad);
    mat.v0 = (UFG::qVector4)_mm_add_ps(
                              _mm_add_ps(
                                _mm_add_ps(
                                  _mm_add_ps((__m128)mat.v0, _xmm),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v0,
                                      (__m128)UFG::qMatrix44::msIdentity.v0,
                                      85),
                                    transformOut.m_rotation.m_col1.m_quad)),
                                _mm_mul_ps(
                                  _mm_shuffle_ps(
                                    (__m128)UFG::qMatrix44::msIdentity.v0,
                                    (__m128)UFG::qMatrix44::msIdentity.v0,
                                    170),
                                  transformOut.m_rotation.m_col2.m_quad)),
                              _mm_mul_ps(
                                _mm_shuffle_ps(
                                  (__m128)UFG::qMatrix44::msIdentity.v0,
                                  (__m128)UFG::qMatrix44::msIdentity.v0,
                                  255),
                                transformOut.m_translation.m_quad));
    mat.v1 = (UFG::qVector4)_mm_add_ps(
                              _mm_add_ps(
                                _mm_add_ps(
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v1,
                                      (__m128)UFG::qMatrix44::msIdentity.v1,
                                      85),
                                    transformOut.m_rotation.m_col1.m_quad),
                                  _mm_add_ps(
                                    _mm_mul_ps(
                                      _mm_shuffle_ps(
                                        (__m128)UFG::qMatrix44::msIdentity.v1,
                                        (__m128)UFG::qMatrix44::msIdentity.v1,
                                        0),
                                      transformOut.m_rotation.m_col0.m_quad),
                                    (__m128)0i64)),
                                _mm_mul_ps(
                                  _mm_shuffle_ps(
                                    (__m128)UFG::qMatrix44::msIdentity.v1,
                                    (__m128)UFG::qMatrix44::msIdentity.v1,
                                    170),
                                  transformOut.m_rotation.m_col2.m_quad)),
                              _mm_mul_ps(
                                _mm_shuffle_ps(
                                  (__m128)UFG::qMatrix44::msIdentity.v1,
                                  (__m128)UFG::qMatrix44::msIdentity.v1,
                                  255),
                                transformOut.m_translation.m_quad));
    pTrackEnumBinding.0 = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)_mm_add_ps(_mm_add_ps(_mm_add_ps(_mm_add_ps(_mm_mul_ps(_mm_shuffle_ps((__m128)UFG::qMatrix44::msIdentity.v2, (__m128)UFG::qMatrix44::msIdentity.v2, 0), transformOut.m_rotation.m_col0.m_quad), (__m128)0i64), _mm_mul_ps(_mm_shuffle_ps((__m128)UFG::qMatrix44::msIdentity.v2, (__m128)UFG::qMatrix44::msIdentity.v2, 85), transformOut.m_rotation.m_col1.m_quad)), _mm_mul_ps(_mm_shuffle_ps((__m128)UFG::qMatrix44::msIdentity.v2, (__m128)UFG::qMatrix44::msIdentity.v2, 170), transformOut.m_rotation.m_col2.m_quad)), _mm_mul_ps(_mm_shuffle_ps((__m128)UFG::qMatrix44::msIdentity.v2, (__m128)UFG::qMatrix44::msIdentity.v2, 255), transformOut.m_translation.m_quad));
    *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID = _mm_add_ps(
                                                        _mm_add_ps(
                                                          _mm_add_ps(
                                                            _mm_add_ps(
                                                              (__m128)0i64,
                                                              _mm_mul_ps(
                                                                _mm_shuffle_ps(
                                                                  *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                                  *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                                  0),
                                                                transformOut.m_rotation.m_col0.m_quad)),
                                                            _mm_mul_ps(
                                                              _mm_shuffle_ps(
                                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                                85),
                                                              transformOut.m_rotation.m_col1.m_quad)),
                                                          _mm_mul_ps(
                                                            _mm_shuffle_ps(
                                                              *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                              *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                              170),
                                                            transformOut.m_rotation.m_col2.m_quad)),
                                                        _mm_mul_ps(
                                                          _mm_shuffle_ps(
                                                            *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                            *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                            255),
                                                          transformOut.m_translation.m_quad));
    v2->mPhantomRigidBody = (hkpRigidBody *)UFG::PhantomCallback::CreatePhantom(
                                              (UFG::qVector3 *)&v5[54],
                                              &mat,
                                              v5[83].mUID);
    LODWORD(v2->mPhantomTimer) = v5[81];
  }
  v158 = *(float *)&v5[101].mUID;
  if ( v158 > 0.0 )
    v2->mTimer = v158;
  if ( v5[102].mUID != -1 )
  {
    v159 = UFG::qMalloc(0x58ui64, UFG::gGlobalNewName, 0i64);
    *(_QWORD *)&name[0].mUID = v159;
    if ( v159 )
    {
      UFG::StateMachineEvent::StateMachineEvent((UFG::StateMachineEvent *)v159, v5 + 102, v2->m_pSimObject);
      v4 = v160;
    }
    UFG::EventDispatcher::QueueEvent(&UFG::EventDispatcher::mInstance, v4);
  }
  if ( *(float *)&v5[63].mUID > 0.0 )
  {
    v161 = (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer;
    if ( v161 )
    {
      UFG::RigidBody::GetTransform(v161, &mat);
      v162 = *(float *)&v5[63].mUID * *(float *)&v5[57].mUID;
      v163 = *(float *)&v5[63].mUID * *(float *)&v5[58].mUID;
      v164 = *(float *)&v5[63].mUID * *(float *)&v5[59].mUID;
      *(float *)&result.mUID = (float)((float)((float)(mat.v1.x * v163) + (float)(mat.v0.x * v162))
                                     + (float)(*(float *)&pTrackEnumBinding.mPrev * v164))
                             + (float)(*(float *)&pTrackEnumBinding.m_EnumSymbol.mUID * 0.0);
      *(float *)&name[0].mUID = (float)((float)((float)(mat.v1.y * v163) + (float)(mat.v0.y * v162))
                                      + (float)(*((float *)&pTrackEnumBinding.mPrev + 1) * v164))
                              + (float)(*(float *)&pTrackEnumBinding.m_EnumValue * 0.0);
      v165 = (float)((float)(mat.v1.z * v163) + (float)(mat.v0.z * v162))
           + (float)(*(float *)&pTrackEnumBinding.mNext * v164);
      v166 = *(float *)&v5[60].mUID;
      v167 = *(float *)&v5[61].mUID;
      v168 = *(float *)&v5[62].mUID;
      *(float *)&pTrackEnumBinding.mPrev = (float)((float)((float)(mat.v1.x * v167) + (float)(mat.v0.x * v166))
                                                 + (float)(*(float *)&pTrackEnumBinding.mPrev * v168))
                                         + *(float *)&pTrackEnumBinding.m_EnumSymbol.mUID;
      *((float *)&pTrackEnumBinding.mPrev + 1) = (float)((float)((float)(mat.v1.y * v167) + (float)(mat.v0.y * v166))
                                                       + (float)(*((float *)&pTrackEnumBinding.mPrev + 1) * v168))
                                               + *(float *)&pTrackEnumBinding.m_EnumValue;
      *(float *)&pTrackEnumBinding.mNext = (float)((float)((float)(mat.v1.z * v167) + (float)(mat.v0.z * v166))
                                                 + (float)(*(float *)&pTrackEnumBinding.mNext * v168))
                                         + *(float *)&pTrackEnumBinding.m_uEnumIndex;
      LODWORD(mat.v0.x) = result;
      LODWORD(mat.v0.y) = name[0];
      mat.v0.z = v165 + (float)(*(float *)&pTrackEnumBinding.m_uEnumIndex * 0.0);
      UFG::RigidBody::ApplyLinearImpulse(
        (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
        (UFG::qVector3 *)&mat,
        (UFG::qVector3 *)&pTrackEnumBinding);
    }
  }
  v169 = *(float *)&v5[67].mUID;
  if ( v169 > 0.0 )
  {
    v170 = (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer;
    if ( v170 )
    {
      *(float *)&pTrackEnumBinding.mPrev = v169 * *(float *)&v5[64].mUID;
      *((float *)&pTrackEnumBinding.mPrev + 1) = v169 * *(float *)&v5[65].mUID;
      *(float *)&pTrackEnumBinding.mNext = v169 * *(float *)&v5[66].mUID;
      UFG::RigidBody::ApplyAngularImpulse(v170, (UFG::qVector3 *)&pTrackEnumBinding);
    }
  }
  v171 = v107;
  if ( v2->mSubPartIndex == -1 )
  {
    v172 = *(float *)&v5[82].mUID;
    if ( v172 != -1.0 )
      *(float *)&v2->mRigidBodyComponent.m_pPointer[7].m_SafePointerList.mNode.mPrev = v172;
  }
  return v171;
}

// File Line: 985
// RVA: 0x454C90
void __fastcall UFG::StateMachineComponent::AddChildMachine(UFG::StateMachineComponent *this, UFG::StateMachineComponent *smc)
{
  UFG::qArray<UFG::qReflectInventoryBase *,0> *v2; // rdi
  UFG::StateMachineComponent *v3; // rbp
  __int64 v4; // rsi
  unsigned int v5; // edx
  unsigned int v6; // ebx
  unsigned int v7; // edx
  UFG::qReflectInventoryBase **v8; // rax

  v2 = (UFG::qArray<UFG::qReflectInventoryBase *,0> *)&this->mChildMachines;
  v3 = smc;
  v4 = this->mChildMachines.size;
  v5 = this->mChildMachines.capacity;
  v6 = v4 + 1;
  if ( (signed int)v4 + 1 > v5 )
  {
    if ( v5 )
      v7 = 2 * v5;
    else
      v7 = 1;
    for ( ; v7 < v6; v7 *= 2 )
      ;
    if ( v7 <= 2 )
      v7 = 2;
    if ( v7 - v6 > 0x10000 )
      v7 = v4 + 65537;
    UFG::qArray<UFG::CompositeDrawableComponent *,32>::Reallocate(v2, v7, "qArray.Add");
  }
  v8 = v2->p;
  v2->size = v6;
  v8[v4] = (UFG::qReflectInventoryBase *)v3;
}

// File Line: 993
// RVA: 0x460B90
void __fastcall UFG::StateMachineComponent::DeleteChildMachine(UFG::StateMachineComponent *this, int subPartIndex)
{
  unsigned int v2; // er9
  signed __int64 v3; // rax
  UFG::StateMachineComponent *v4; // rdi
  UFG::StateMachineComponent **v5; // rcx
  UFG::StateMachineComponent **v6; // r8
  signed __int64 v7; // rbx
  UFG::StateMachineComponent *v8; // rcx

  v2 = this->mChildMachines.size;
  v3 = 0i64;
  v4 = this;
  if ( v2 )
  {
    v5 = this->mChildMachines.p;
    v6 = v5;
    while ( !*v6 || (*v6)->mSubPartIndex != subPartIndex )
    {
      v3 = (unsigned int)(v3 + 1);
      ++v6;
      if ( (unsigned int)v3 >= v2 )
        return;
    }
    v7 = v3;
    v8 = v5[v3];
    if ( v8 )
      v8->vfptr->__vecDelDtor((UFG::qSafePointerNode<UFG::SimComponent> *)&v8->vfptr, 1u);
    v4->mChildMachines.p[v7] = 0i64;
  }
}

// File Line: 1008
// RVA: 0x46B550
void __fastcall UFG::StateMachineComponent::KillEffects(UFG::StateMachineComponent *this)
{
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v1; // rax
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **v2; // rdi
  UFG::StateMachineComponent *v3; // rbx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v4; // rcx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v5; // rdx

  v1 = this->mAttachedEffects.mNode.mNext;
  v2 = &this->mFractureList.mNode.mNext;
  v3 = this;
  if ( &v1[-1].mNext != (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> **)&this->mFractureList.mNode.mNext )
  {
    do
    {
      v4 = v1->mNext;
      v5 = v1->mPrev;
      v5->mNext = v4;
      v4->mPrev = v5;
      v1->mPrev = v1;
      v1->mNext = v1;
      if ( v1 != (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *)8 )
        ((void (__fastcall *)(UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> **, signed __int64))v1[-1].mNext->mPrev)(
          &v1[-1].mNext,
          1i64);
      v1 = v3->mAttachedEffects.mNode.mNext;
    }
    while ( &v1[-1].mNext != (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> **)v2 );
  }
}

// File Line: 1033
// RVA: 0x4663D0
float __fastcall UFG::StateMachineComponent::GetDamage(UFG::StateMachineComponent *this)
{
  return 1.0 - this->mHealth;
}

// File Line: 1040
// RVA: 0x474A70
void __fastcall UFG::StateMachineComponent::SetDamage(UFG::StateMachineComponent *this, float damage)
{
  float v2; // xmm0_4

  v2 = 1.0 - damage;
  if ( (float)(1.0 - damage) <= 0.0 )
  {
    v2 = 0.0;
  }
  else if ( v2 >= 1.0 )
  {
    LODWORD(this->mHealth) = (_DWORD)FLOAT_1_0;
    return;
  }
  this->mHealth = v2;
}

// File Line: 1047
// RVA: 0x458220
void __fastcall UFG::StateMachineComponent::ApplyImpactEffect(UFG::StateMachineComponent *this, UFG::qMatrix44 *mat)
{
  UFG::qMatrix44 *v2; // rbp
  UFG::StateMachineComponent *v3; // rdi
  UFG::qReflectObject *v4; // r8
  int v5; // eax
  signed __int64 v6; // rbx
  UFG::allocator::free_link *v7; // rax
  UFG::StateMachineEffectNode *v8; // rax
  UFG::StateMachineEffectNode *v9; // rsi
  UFG::qMatrix44 *v10; // rax
  UFG::qVector4 v11; // xmm3
  UFG::qVector4 v12; // xmm2
  UFG::qVector4 v13; // xmm1
  UFG::qMatrix44 mata; // [rsp+40h] [rbp-C8h]
  UFG::qMatrix44 d; // [rsp+80h] [rbp-88h]
  UFG::qMatrix44 result; // [rsp+C0h] [rbp-48h]

  v2 = mat;
  v3 = this;
  v4 = this->mStateMachineDefinition.mData;
  if ( v4 )
  {
    v5 = this->mCurrentNodeIndex;
    if ( v5 != -1 && v5 < SLODWORD(v4[1].mBaseNode.mUID) )
    {
      v6 = (signed __int64)&v4[1].vfptr[26 * (unsigned int)v5];
      if ( v6 )
      {
        if ( *(_DWORD *)(v6 + 340) != -1 )
        {
          v7 = UFG::qMemoryPool::Allocate(&gPhysicsMemoryPool, 0x50ui64, "StateMachineEffectNode", 0i64, 1u);
          if ( v7 )
          {
            UFG::StateMachineEffectNode::StateMachineEffectNode((UFG::StateMachineEffectNode *)v7);
            v9 = v8;
          }
          else
          {
            v9 = 0i64;
          }
          v9->mNameUid.mUID = *(_DWORD *)(v6 + 340);
          v9->mAttachToObject = 1;
          UFG::RigidBody::GetTransform((UFG::RigidBody *)v3->mRigidBodyComponent.m_pPointer, &mata);
          UFG::qInverseAffine(&d, &mata);
          v10 = UFG::qMatrix44::operator*(v2, &result, &d);
          v11 = v10->v1;
          v12 = v10->v2;
          v13 = v10->v3;
          v9->mTransform.v0 = v10->v0;
          v9->mTransform.v1 = v11;
          v9->mTransform.v2 = v12;
          v9->mTransform.v3 = v13;
          UFG::StateMachineComponent::CreateEffect(v3, v9, &UFG::qMatrix44::msIdentity)->mRuntimeEffectNode = v9;
        }
      }
    }
  }
}

// File Line: 1071
// RVA: 0x458360
void __fastcall UFG::StateMachineComponent::ApplyImpactEffect(UFG::StateMachineComponent *this, UFG::qVector3 *position, UFG::qVector3 *normal)
{
  __m128 v3; // xmm7
  float v4; // xmm8_4
  float v5; // xmm9_4
  UFG::qVector3 *v6; // rax
  __m128 v7; // xmm3
  float v8; // xmm1_4
  float v9; // xmm10_4
  float v10; // xmm8_4
  float v11; // xmm9_4
  float v12; // xmm7_4
  __int128 v13; // xmm1
  float v14; // xmm0_4
  __int128 v15; // xmm11
  __m128 v16; // xmm3
  float v17; // xmm10_4
  __m128 v18; // xmm5
  float v19; // xmm1_4
  float v20; // xmm3_4
  float v21; // xmm5_4
  __m128 v22; // xmm6
  float v23; // xmm3_4
  __m128 v24; // xmm7
  float v25; // xmm2_4
  float v26; // xmm0_4
  float v27; // xmm1_4
  float v28; // xmm5_4
  float v29; // xmm6_4
  float v30; // xmm3_4
  float v31; // xmm2_4
  UFG::qMatrix44 mat; // [rsp+20h] [rbp-A8h]

  v3 = (__m128)LODWORD(normal->x);
  v4 = normal->y;
  v5 = normal->z;
  v7 = v3;
  v6 = &UFG::qVector3::msDirLeft;
  v7.m128_f32[0] = (float)((float)(v3.m128_f32[0] * v3.m128_f32[0]) + (float)(v4 * v4)) + (float)(v5 * v5);
  if ( COERCE_FLOAT(COERCE_UNSIGNED_INT(
                      (float)((float)(normal->x * UFG::qVector3::msDirUp.x)
                            + (float)(normal->y * UFG::qVector3::msDirUp.y))
                    + (float)(normal->z * UFG::qVector3::msDirUp.z)) & _xmm) <= 0.99000001 )
    v6 = &UFG::qVector3::msDirUp;
  if ( v7.m128_f32[0] == 0.0 )
    v8 = 0.0;
  else
    v8 = 1.0 / COERCE_FLOAT(_mm_sqrt_ps(v7));
  v16 = (__m128)LODWORD(v6->z);
  v9 = v6->x;
  v10 = v4 * v8;
  v11 = v5 * v8;
  v12 = v3.m128_f32[0] * v8;
  v13 = LODWORD(v6->y);
  v14 = v6->z;
  mat.v2.y = v10;
  mat.v2.x = v12;
  v15 = v13;
  mat.v2.z = v11;
  *(float *)&v15 = (float)(*(float *)&v13 * v11) - (float)(v14 * v10);
  v16.m128_f32[0] = (float)(v16.m128_f32[0] * v12) - (float)(v9 * v11);
  v17 = (float)(v9 * v10) - (float)(*(float *)&v13 * v12);
  v18 = v16;
  v18.m128_f32[0] = (float)((float)(v16.m128_f32[0] * v16.m128_f32[0]) + (float)(*(float *)&v15 * *(float *)&v15))
                  + (float)(v17 * v17);
  if ( v18.m128_f32[0] == 0.0 )
    v19 = 0.0;
  else
    v19 = 1.0 / COERCE_FLOAT(_mm_sqrt_ps(v18));
  v20 = v16.m128_f32[0] * v19;
  *(float *)&v15 = *(float *)&v15 * v19;
  v22 = (__m128)v15;
  mat.v0.y = v20;
  mat.v0.z = v17 * v19;
  LODWORD(mat.v0.x) = v15;
  v21 = (float)((float)(v17 * v19) * v10) - (float)(v20 * v11);
  v22.m128_f32[0] = (float)(*(float *)&v15 * v11) - (float)((float)(v17 * v19) * v12);
  v23 = (float)(v20 * v12) - (float)(*(float *)&v15 * v10);
  v24 = v22;
  v24.m128_f32[0] = (float)((float)(v22.m128_f32[0] * v22.m128_f32[0]) + (float)(v21 * v21)) + (float)(v23 * v23);
  if ( v24.m128_f32[0] == 0.0 )
    v25 = 0.0;
  else
    v25 = 1.0 / COERCE_FLOAT(_mm_sqrt_ps(v24));
  v26 = position->x;
  v27 = position->y;
  v28 = v21 * v25;
  v29 = v22.m128_f32[0] * v25;
  v30 = v23 * v25;
  mat.v0.w = 0.0;
  mat.v1.w = 0.0;
  mat.v2.w = 0.0;
  mat.v3.w = 1.0;
  v31 = position->z;
  mat.v3.x = v26;
  mat.v3.y = v27;
  mat.v1.x = v28;
  mat.v1.y = v29;
  mat.v1.z = v30;
  mat.v3.z = v31;
  UFG::StateMachineComponent::ApplyImpactEffect(this, &mat);
}

// File Line: 1095
// RVA: 0x4570D0
void __fastcall UFG::StateMachineComponent::ApplyDamage(UFG::StateMachineComponent *this, float damage, UFG::StateMachineComponent::DamageType type, UFG::SimObject *source)
{
  UFG::StateMachineComponent::DamageType v4; // er11
  UFG::StateMachineComponent *v5; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v6; // r10
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v7; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v8; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v9; // rax
  float *v10; // r8
  UFG::SimComponent *v11; // rax

  v4 = type;
  v5 = this;
  if ( damage > 0.0 )
  {
    if ( source )
    {
      v6 = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)&this->mLastDamageSource.mPrev;
      if ( this->mLastDamageSource.m_pPointer )
      {
        v7 = v6->mPrev;
        v8 = v6->mNext;
        v7->mNext = v8;
        v8->mPrev = v7;
        v6->mPrev = v6;
        v6->mNext = v6;
      }
      v6[1].mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *)source;
      v9 = source->m_SafePointerList.mNode.mPrev;
      v9->mNext = v6;
      v6->mPrev = v9;
      v6->mNext = &source->m_SafePointerList.mNode;
      source->m_SafePointerList.mNode.mPrev = v6;
    }
    v10 = (float *)v5->mStateMachineDefinition.mData;
    if ( v10 )
    {
      switch ( v4 )
      {
        case 0:
          v11 = v5->mRigidBodyComponent.m_pPointer;
          if ( v11 && *((float *)&v11[7].m_SafePointerList.mNode.mPrev + 1) > 1.5 )
          {
            if ( damage <= v10[28] )
              damage = 0.0;
            else
              damage = damage * v10[27];
            goto $LN18_18;
          }
          break;
        case 1:
          v5->mHealth = v5->mHealth - (float)(damage * v10[25]);
          break;
        case 2:
          v5->mHealth = v5->mHealth - (float)(damage * v10[26]);
          break;
        case 3:
          v5->mHealth = v5->mHealth - (float)(damage * v10[29]);
          break;
        case 4:
$LN18_18:
          v5->mHealth = v5->mHealth - damage;
          break;
        case 5:
          v5->mHealth = damage;
          break;
        default:
          break;
      }
      if ( v5->mHealth < 0.0 )
        v5->mHealth = 0.0;
    }
  }
}

// File Line: 1153
// RVA: 0x47E0E0
void __fastcall UFG::StateMachineComponent::UpdateAttachedEffects(UFG::StateMachineComponent *this, UFG::qMatrix44 *mat)
{
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **v2; // rbp
  UFG::qMatrix44 *v3; // r14
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **v4; // rbx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v5; // rsi
  signed __int64 v6; // rdi
  UFG::qMatrix44 result; // [rsp+20h] [rbp-48h]

  v2 = &this->mFractureList.mNode.mNext;
  v3 = mat;
  v4 = (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **)&this->mAttachedEffects.mNode.mNext[-1].mNext;
  if ( v4 != &this->mFractureList.mNode.mNext )
  {
    do
    {
      v5 = v4[14];
      v6 = (signed __int64)&v4[2][-1].mNext;
      UFG::AttachedEffect::ActivateBasedOnTimeOfDay((UFG::AttachedEffect *)v4);
      if ( LODWORD(v5[4].mNext) != -1 && BYTE4(v5[4].mNext) )
      {
        if ( v4[13] )
        {
          UFG::qMatrix44::operator*((UFG::qMatrix44 *)v5, &result, v3);
          UFG::TransformNodeComponent::SetWorldTransform((UFG::TransformNodeComponent *)v4[13], &result);
        }
      }
      v4 = (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **)v6;
    }
    while ( (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **)v6 != v2 );
  }
}

// File Line: 1185
// RVA: 0x448180
void __fastcall UFG::AttachedEffect::AttachedEffect(UFG::AttachedEffect *this, UFG::qMatrix44 *bodyTransform, UFG::StateMachineEffectNode *effect)
{
  UFG::StateMachineEffectNode *v3; // r9
  UFG::AttachedEffect *v4; // rsi
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v5; // rax
  UFG::qMatrix44 *v6; // r8
  float v7; // xmm1_4
  float v8; // xmm2_4
  float v9; // xmm3_4
  float v10; // xmm1_4
  float v11; // xmm2_4
  float v12; // xmm3_4
  float v13; // xmm1_4
  float v14; // xmm2_4
  float v15; // xmm3_4
  float v16; // xmm1_4
  float v17; // xmm2_4
  float v18; // xmm3_4
  UFG::qSafePointer<UFG::SimComponent,UFG::TransformNodeComponent> *v19; // rbx
  UFG::SimComponent *v20; // rdi
  UFG::qMemoryPool *v21; // rax
  UFG::allocator::free_link *v22; // rax
  UFG::SimComponent *v23; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v24; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v25; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v26; // rax
  UFG::qMatrix44 m; // [rsp+40h] [rbp-48h]

  v3 = effect;
  v4 = this;
  v5 = (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *)&this->mPrev;
  v5->mPrev = v5;
  v5->mNext = v5;
  this->vfptr = (UFG::AttachedEffectVtbl *)&UFG::AttachedEffect::`vftable';
  v6 = &this->mBodyTransform;
  v7 = bodyTransform->v0.y;
  v8 = bodyTransform->v0.z;
  v9 = bodyTransform->v0.w;
  v6->v0.x = bodyTransform->v0.x;
  v6->v0.y = v7;
  v6->v0.z = v8;
  v6->v0.w = v9;
  v10 = bodyTransform->v1.y;
  v11 = bodyTransform->v1.z;
  v12 = bodyTransform->v1.w;
  v6->v1.x = bodyTransform->v1.x;
  v6->v1.y = v10;
  v6->v1.z = v11;
  v6->v1.w = v12;
  v13 = bodyTransform->v2.y;
  v14 = bodyTransform->v2.z;
  v15 = bodyTransform->v2.w;
  v6->v2.x = bodyTransform->v2.x;
  v6->v2.y = v13;
  v6->v2.z = v14;
  v6->v2.w = v15;
  v16 = bodyTransform->v3.y;
  v17 = bodyTransform->v3.z;
  v18 = bodyTransform->v3.w;
  v6->v3.x = bodyTransform->v3.x;
  v6->v3.y = v16;
  v6->v3.z = v17;
  v6->v3.w = v18;
  v19 = &this->mTransformNode;
  v19->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v19->mPrev;
  v19->mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v19->mPrev;
  v20 = 0i64;
  this->mTransformNode.m_pPointer = 0i64;
  this->mEffectNode = v3;
  this->mRuntimeEffectNode = 0i64;
  this->mInstanceUid = -1;
  UFG::qMatrix44::operator*(&v3->mTransform, &m, &this->mBodyTransform);
  if ( v4->mEffectNode->mAttachToObject )
  {
    if ( !(_S16_1 & 1) )
    {
      _S16_1 |= 1u;
      id = UFG::qStringHash32("TransformNode", 0xFFFFFFFF);
    }
    v21 = UFG::GetSimulationMemoryPool();
    v22 = UFG::qMemoryPool::Allocate(v21, 0x110ui64, "TransformNodeComponent", 0i64, 1u);
    if ( v22 )
    {
      UFG::TransformNodeComponent::TransformNodeComponent((UFG::TransformNodeComponent *)v22, id, 0i64, 0);
      v20 = v23;
    }
    if ( v19->m_pPointer )
    {
      v24 = v19->mPrev;
      v25 = v19->mNext;
      v24->mNext = v25;
      v25->mPrev = v24;
      v19->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v19->mPrev;
      v19->mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v19->mPrev;
    }
    v19->m_pPointer = v20;
    if ( v20 )
    {
      v26 = v20->m_SafePointerList.mNode.mPrev;
      v26->mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v19->mPrev;
      v19->mPrev = v26;
      v19->mNext = &v20->m_SafePointerList.mNode;
      v20->m_SafePointerList.mNode.mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v19->mPrev;
    }
    UFG::TransformNodeComponent::SetWorldTransform((UFG::TransformNodeComponent *)v4->mTransformNode.m_pPointer, &m);
  }
  UFG::AttachedEffect::ActivateBasedOnTimeOfDay(v4);
}

// File Line: 1201
// RVA: 0x44F530
void __fastcall UFG::AttachedEffect::~AttachedEffect(UFG::AttachedEffect *this)
{
  UFG::AttachedEffect *v1; // rbx
  unsigned int v2; // edx
  UFG::SimComponent *v3; // rdx
  UFG::StateMachineEffectNode *v4; // rdx
  UFG::qSafePointer<UFG::SimComponent,UFG::TransformNodeComponent> *v5; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v6; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v7; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v8; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v9; // rax
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v10; // rdx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v11; // rcx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v12; // rax

  v1 = this;
  this->vfptr = (UFG::AttachedEffectVtbl *)&UFG::AttachedEffect::`vftable';
  v2 = this->mInstanceUid;
  if ( v2 != -1 && Render::FXManager::IsEffectLooping(&Render::gFXManager, v2) )
    Render::FXManager::KillEffect(&Render::gFXManager, v1->mInstanceUid, 0);
  v3 = v1->mTransformNode.m_pPointer;
  if ( v3 )
    UFG::Simulation::DestroySimComponent(&UFG::gSim, v3);
  v4 = v1->mRuntimeEffectNode;
  if ( v4 )
    UFG::qMemoryPool::Free(&gPhysicsMemoryPool, v4);
  v5 = &v1->mTransformNode;
  if ( v1->mTransformNode.m_pPointer )
  {
    v6 = v5->mPrev;
    v7 = v1->mTransformNode.mNext;
    v6->mNext = v7;
    v7->mPrev = v6;
    v5->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v5->mPrev;
    v1->mTransformNode.mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v1->mTransformNode.mPrev;
  }
  v1->mTransformNode.m_pPointer = 0i64;
  v8 = v5->mPrev;
  v9 = v1->mTransformNode.mNext;
  v8->mNext = v9;
  v9->mPrev = v8;
  v5->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v5->mPrev;
  v1->mTransformNode.mNext = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)&v1->mTransformNode.mPrev;
  v10 = (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *)&v1->mPrev;
  v11 = v1->mPrev;
  v12 = v1->mNext;
  v11->mNext = v12;
  v12->mPrev = v11;
  v10->mPrev = v10;
  v10->mNext = v10;
}

// File Line: 1225
// RVA: 0x454690
void __fastcall UFG::AttachedEffect::ActivateBasedOnTimeOfDay(UFG::AttachedEffect *this)
{
  UFG::AttachedEffect *v1; // rbx
  UFG::TimeOfDayManager *v2; // rax
  unsigned int v3; // edx
  UFG::StateMachineEffectNode *v4; // rcx
  UFG::qMatrix44 result; // [rsp+30h] [rbp-48h]

  v1 = this;
  if ( this->mEffectNode->mEndTime == this->mEffectNode->mStartTime
    || (v2 = UFG::TimeOfDayManager::GetInstance(),
        (unsigned __int8)Render::FXManager::IsInBetweenTime(
                           &Render::gFXManager,
                           v2->m_SecondsSinceMidnight,
                           v1->mEffectNode->mStartTime,
                           v1->mEffectNode->mEndTime)) )
  {
    if ( v1->mInstanceUid == -1 )
    {
      v4 = v1->mEffectNode;
      if ( v4->mAttachToObject )
      {
        v1->mInstanceUid = Render::FXManager::CreateEffect(
                             &Render::gFXManager,
                             v4->mNameUid.mUID,
                             (UFG::TransformNodeComponent *)v1->mTransformNode.m_pPointer,
                             0xFFFFFFFF,
                             0i64);
      }
      else
      {
        UFG::qMatrix44::operator*(&v4->mTransform, &result, &v1->mBodyTransform);
        v1->mInstanceUid = Render::FXManager::CreateEffect(
                             &Render::gFXManager,
                             v1->mEffectNode->mNameUid.mUID,
                             &result,
                             0xFFFFFFFF);
      }
    }
  }
  else
  {
    v3 = v1->mInstanceUid;
    if ( v3 != -1 )
    {
      if ( Render::FXManager::IsEffectLooping(&Render::gFXManager, v3) )
        Render::FXManager::KillEffect(&Render::gFXManager, v1->mInstanceUid, 0);
      v1->mInstanceUid = -1;
    }
  }
}

// File Line: 1270
// RVA: 0x45C820
UFG::AttachedEffect *__fastcall UFG::StateMachineComponent::CreateEffect(UFG::StateMachineComponent *this, UFG::StateMachineEffectNode *effect, UFG::qMatrix44 *partOffset)
{
  UFG::qMatrix44 *v3; // rsi
  UFG::StateMachineEffectNode *v4; // rbx
  UFG::StateMachineComponent *v5; // rdi
  UFG::allocator::free_link *v6; // rax
  __int64 v7; // rax
  __int64 v8; // r8
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> **v9; // rcx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v10; // rax
  UFG::qMatrix44 mat; // [rsp+40h] [rbp-88h]
  UFG::qMatrix44 result; // [rsp+80h] [rbp-48h]

  v3 = partOffset;
  v4 = effect;
  v5 = this;
  if ( effect->mNameUid.mUID == -1 )
    return 0i64;
  UFG::RigidBody::GetTransform((UFG::RigidBody *)this->mRigidBodyComponent.m_pPointer, &mat);
  UFG::qMatrix44::operator*(v3, &result, &mat);
  v6 = UFG::qMemoryPool::Allocate(&gPhysicsMemoryPool, 0x88ui64, "AttachedEffect", 0i64, 1u);
  if ( v6 )
  {
    UFG::AttachedEffect::AttachedEffect((UFG::AttachedEffect *)v6, &result, v4);
    v8 = v7;
  }
  else
  {
    v8 = 0i64;
  }
  v9 = (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> **)(v8 + 8);
  v10 = v5->mAttachedEffects.mNode.mPrev;
  v10->mNext = (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *)(v8 + 8);
  *v9 = v10;
  v9[1] = &v5->mAttachedEffects.mNode;
  v5->mAttachedEffects.mNode.mPrev = (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *)(v8 + 8);
  return (UFG::AttachedEffect *)v8;
}

// File Line: 1289
// RVA: 0x46AE90
char __fastcall UFG::StateMachineComponent::IsElementInFractureList(UFG::StateMachineComponent *this, unsigned int elementID)
{
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v2; // rax
  UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *v3; // rcx

  v2 = this->mFractureList.mNode.mNext;
  v3 = &this->mFractureList;
  if ( v2 == (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)v3 )
    return 0;
  while ( LODWORD(v2[1].mPrev) != elementID )
  {
    v2 = v2->mNext;
    if ( v2 == (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)v3 )
      return 0;
  }
  return 1;
}

// File Line: 1305
// RVA: 0x475FD0
void __fastcall UFG::StateMachineComponent::SpawnDestructionPhantomVolume(UFG::StateMachineComponent *this, unsigned int phantomUID, UFG::qVector3 *offset, UFG::qVector3 *extents)
{
  UFG::StateMachineComponent *v4; // rbx
  hkpRigidBody *v5; // rcx
  UFG::qVector3 *v6; // rsi
  UFG::qVector3 *v7; // rdi
  unsigned int v8; // er14
  float v9; // xmm2_4
  hkpEntity *v10; // rax
  UFG::qMatrix44 transform; // [rsp+20h] [rbp-D8h]
  UFG::qMatrix44 mat; // [rsp+60h] [rbp-98h]
  float v13; // [rsp+148h] [rbp+50h]

  v4 = this;
  v5 = this->mPhantomRigidBody;
  v6 = extents;
  v7 = offset;
  v8 = phantomUID;
  if ( v5 )
  {
    UFG::PhantomCallback::DestroyPhantom(v5);
    v4->mPhantomRigidBody = 0i64;
  }
  UFG::RigidBody::GetTransform((UFG::RigidBody *)v4->mRigidBodyComponent.m_pPointer, &mat);
  v9 = v7->y;
  transform.v3.z = v7->z;
  transform.v3.y = v9;
  transform.v0 = UFG::qMatrix44::msIdentity.v0;
  transform.v1 = UFG::qMatrix44::msIdentity.v1;
  transform.v2 = UFG::qMatrix44::msIdentity.v2;
  transform.v3.x = v7->x;
  LODWORD(transform.v3.w) = (_DWORD)FLOAT_1_0;
  transform.v0 = (UFG::qVector4)_mm_add_ps(
                                  _mm_add_ps(
                                    _mm_add_ps(
                                      _mm_add_ps(
                                        _mm_mul_ps(
                                          _mm_shuffle_ps(
                                            (__m128)UFG::qMatrix44::msIdentity.v0,
                                            (__m128)UFG::qMatrix44::msIdentity.v0,
                                            0),
                                          (__m128)mat.v0),
                                        (__m128)0i64),
                                      _mm_mul_ps(
                                        _mm_shuffle_ps(
                                          (__m128)UFG::qMatrix44::msIdentity.v0,
                                          (__m128)UFG::qMatrix44::msIdentity.v0,
                                          85),
                                        (__m128)mat.v1)),
                                    _mm_mul_ps(
                                      _mm_shuffle_ps(
                                        (__m128)UFG::qMatrix44::msIdentity.v0,
                                        (__m128)UFG::qMatrix44::msIdentity.v0,
                                        170),
                                      *(__m128 *)&mat.v1.z)),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v0,
                                      (__m128)UFG::qMatrix44::msIdentity.v0,
                                      255),
                                    *(__m128 *)&mat.v2.z));
  transform.v1 = (UFG::qVector4)_mm_add_ps(
                                  _mm_add_ps(
                                    _mm_add_ps(
                                      _mm_add_ps(
                                        _mm_mul_ps(
                                          _mm_shuffle_ps(
                                            (__m128)UFG::qMatrix44::msIdentity.v1,
                                            (__m128)UFG::qMatrix44::msIdentity.v1,
                                            0),
                                          (__m128)mat.v0),
                                        (__m128)0i64),
                                      _mm_mul_ps(
                                        _mm_shuffle_ps(
                                          (__m128)UFG::qMatrix44::msIdentity.v1,
                                          (__m128)UFG::qMatrix44::msIdentity.v1,
                                          85),
                                        (__m128)mat.v1)),
                                    _mm_mul_ps(
                                      _mm_shuffle_ps(
                                        (__m128)UFG::qMatrix44::msIdentity.v1,
                                        (__m128)UFG::qMatrix44::msIdentity.v1,
                                        170),
                                      *(__m128 *)&mat.v1.z)),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v1,
                                      (__m128)UFG::qMatrix44::msIdentity.v1,
                                      255),
                                    *(__m128 *)&mat.v2.z));
  transform.v2 = (UFG::qVector4)_mm_add_ps(
                                  _mm_add_ps(
                                    _mm_add_ps(
                                      _mm_add_ps(
                                        _mm_mul_ps(
                                          _mm_shuffle_ps(
                                            (__m128)UFG::qMatrix44::msIdentity.v2,
                                            (__m128)UFG::qMatrix44::msIdentity.v2,
                                            0),
                                          (__m128)mat.v0),
                                        (__m128)0i64),
                                      _mm_mul_ps(
                                        _mm_shuffle_ps(
                                          (__m128)UFG::qMatrix44::msIdentity.v2,
                                          (__m128)UFG::qMatrix44::msIdentity.v2,
                                          85),
                                        (__m128)mat.v1)),
                                    _mm_mul_ps(
                                      _mm_shuffle_ps(
                                        (__m128)UFG::qMatrix44::msIdentity.v2,
                                        (__m128)UFG::qMatrix44::msIdentity.v2,
                                        170),
                                      *(__m128 *)&mat.v1.z)),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v2,
                                      (__m128)UFG::qMatrix44::msIdentity.v2,
                                      255),
                                    *(__m128 *)&mat.v2.z));
  transform.v3 = (UFG::qVector4)_mm_add_ps(
                                  _mm_add_ps(
                                    _mm_add_ps(
                                      _mm_mul_ps(
                                        _mm_shuffle_ps((__m128)transform.v3, (__m128)transform.v3, 85),
                                        (__m128)mat.v1),
                                      _mm_add_ps(
                                        _mm_mul_ps(
                                          _mm_shuffle_ps((__m128)transform.v3, (__m128)transform.v3, 0),
                                          (__m128)mat.v0),
                                        (__m128)0i64)),
                                    _mm_mul_ps(
                                      _mm_shuffle_ps((__m128)transform.v3, (__m128)transform.v3, 170),
                                      *(__m128 *)&mat.v1.z)),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps((__m128)transform.v3, (__m128)transform.v3, 255),
                                    *(__m128 *)&mat.v2.z));
  v10 = UFG::PhantomCallback::CreatePhantom(v6, &transform, v8);
  v4->mPhantomTimer = v13;
  v4->mPhantomRigidBody = (hkpRigidBody *)v10;
}

// File Line: 1330
// RVA: 0x465510
void __fastcall UFG::StateMachineComponent::FractureNotification(UFG::StateMachineComponent *this, unsigned int maxNodeGuid3DS)
{
  unsigned int v2; // ebx
  UFG::StateMachineComponent *v3; // rdi
  UFG::allocator::free_link *v4; // rax
  UFG::allocator::free_link *v5; // r8
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v6; // rcx

  v2 = maxNodeGuid3DS;
  v3 = this;
  v4 = UFG::qMalloc(0x18ui64, "FractureInfo", 0i64);
  v5 = v4;
  if ( v4 )
  {
    v4->mNext = v4;
    v4[1].mNext = v4;
  }
  else
  {
    v5 = 0i64;
  }
  LODWORD(v5[2].mNext) = v2;
  v6 = v3->mFractureList.mNode.mNext;
  v3->mFractureList.mNode.mNext = (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)v5;
  v5->mNext = (UFG::allocator::free_link *)&v3->mFractureList;
  v5[1].mNext = (UFG::allocator::free_link *)v6;
  v6->mPrev = (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)v5;
}

// File Line: 1339
// RVA: 0x4688A0
void __fastcall UFG::StateMachineComponent::HandleNamedEvent(UFG::StateMachineComponent *this, UFG::Event *thisEvent)
{
  UFG::Event *v2; // r11
  UFG::qReflectObject *v3; // rbx
  unsigned int v4; // er10
  unsigned int v5; // edx
  signed __int64 v6; // r8
  _DWORD *v7; // rax

  v2 = thisEvent;
  if ( this->m_pSimObject == *(UFG::SimObject **)&thisEvent[1].m_EventUID )
  {
    v3 = this->mStateMachineDefinition.mData;
    v4 = 0;
    if ( LODWORD(v3[1].mBaseNode.mUID) )
    {
      do
      {
        v5 = 0;
        v6 = (signed __int64)&v3[1].vfptr[26 * v4];
        if ( *(_DWORD *)(v6 + 104) )
        {
          do
          {
            v7 = (_DWORD *)(*(_QWORD *)(v6 + 96) + 16i64 * v5);
            if ( *v7 == 8 && v7[2] == LODWORD(v2[1].vfptr) )
              this->mFlags |= 1u;
            ++v5;
          }
          while ( v5 < *(_DWORD *)(v6 + 104) );
        }
        ++v4;
      }
      while ( v4 < LODWORD(v3[1].mBaseNode.mUID) );
    }
  }
}

// File Line: 1367
// RVA: 0x4687D0
void __fastcall UFG::StateMachineComponent::HandleCollisionEvent(UFG::StateMachineComponent *this, UFG::Event *thisEvent)
{
  UFG::SimObject *v2; // rax
  UFG::EventVtbl *v3; // r11
  unsigned int v4; // er9
  UFG::qReflectObjectVtbl *v5; // r10
  float v6; // xmm1_4
  float v7; // xmm0_4
  unsigned __int16 v8; // r8
  float v9; // xmm0_4

  if ( !LODWORD(thisEvent[1].vfptr) )
  {
    v2 = this->m_pSimObject;
    if ( v2 )
    {
      v3 = thisEvent[2].vfptr;
      if ( v2 == (UFG::SimObject *)v3 )
      {
        v3 = *(UFG::EventVtbl **)&thisEvent[2].m_EventUID;
      }
      else if ( v2 != *(UFG::SimObject **)&thisEvent[2].m_EventUID )
      {
        return;
      }
      if ( v3 )
      {
        v4 = 0;
        v5 = &this->mStateMachineDefinition.mData[1].vfptr[26 * (unsigned int)this->mCurrentNodeIndex];
        if ( LODWORD(v5[6].GetTypeName) )
        {
          v6 = this->mCollisionEventData[0];
          do
          {
            v7 = *(float *)&thisEvent[1].m_NamePTR;
            if ( v6 < v7 )
            {
              v6 = *(float *)&thisEvent[1].m_NamePTR;
              this->mCollisionEventData[0] = v7;
            }
            v8 = WORD2(v3[9].__vecDelDtor);
            v9 = *(float *)&thisEvent[1].m_NamePTR;
            if ( (v8 >> 14) & 1 )
            {
              if ( v9 > this->mCollisionEventData[3] )
                this->mCollisionEventData[3] = v9;
            }
            else if ( (v8 & 0x8000u) == 0 )
            {
              if ( v9 > this->mCollisionEventData[1] )
                this->mCollisionEventData[1] = v9;
            }
            else if ( v9 > this->mCollisionEventData[2] )
            {
              this->mCollisionEventData[2] = v9;
            }
            ++v4;
          }
          while ( v4 < LODWORD(v5[6].GetTypeName) );
        }
      }
    }
  }
}

