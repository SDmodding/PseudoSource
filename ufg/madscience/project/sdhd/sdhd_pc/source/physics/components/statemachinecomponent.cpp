// File Line: 51
// RVA: 0x1519E70
__int64 UFG::_dynamic_initializer_for__gStateMachineEventChannel__()
{
  UFG::ChannelObj::ChannelObj(
    &UFG::gStateMachineEventChannel,
    "StateMachineEvent",
    "This is a generic event that gets generated by StateMachines.");
  return atexit((int (__fastcall *)())UFG::_dynamic_atexit_destructor_for__gStateMachineEventChannel__);
}

// File Line: 62
// RVA: 0x44DCD0
void __fastcall UFG::StateMachineEvent::StateMachineEvent(
        UFG::StateMachineEvent *this,
        UFG::qSymbol *name,
        UFG::SimObject *sender)
{
  unsigned int mUID; // r9d
  UFG::qSafePointer<UFG::SimObject,UFG::SimObject> *p_mSender; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *mPrev; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *mNext; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v8; // rax

  mUID = UFG::gStateMachineEventChannel.mUID;
  this->mPrev = &this->UFG::qNode<UFG::Event,UFG::Event>;
  this->mNext = &this->UFG::qNode<UFG::Event,UFG::Event>;
  this->vfptr = (UFG::EventVtbl *)&UFG::Event::`vftable;
  this->m_EventUID = mUID;
  this->m_NamePTR = 0i64;
  this->vfptr = (UFG::EventVtbl *)&UFG::StateMachineEvent::`vftable;
  this->mName = (UFG::qSymbol)name->mUID;
  p_mSender = &this->mSender;
  this->mSender.mPrev = &this->mSender;
  this->mSender.mNext = &this->mSender;
  this->mSender.m_pPointer = 0i64;
  if ( this->mSender.m_pPointer )
  {
    mPrev = p_mSender->mPrev;
    mNext = this->mSender.mNext;
    mPrev->mNext = mNext;
    mNext->mPrev = mPrev;
    p_mSender->mPrev = p_mSender;
    this->mSender.mNext = &this->mSender;
  }
  this->mSender.m_pPointer = sender;
  if ( sender )
  {
    v8 = sender->m_SafePointerList.UFG::qSafePointerNodeWithCallbacks<UFG::SimObject>::UFG::qSafePointerNode<UFG::SimObject>::mNode.mPrev;
    v8->mNext = p_mSender;
    p_mSender->mPrev = v8;
    this->mSender.mNext = &sender->m_SafePointerList.UFG::qSafePointerNodeWithCallbacks<UFG::SimObject>::UFG::qSafePointerNode<UFG::SimObject>::mNode;
    sender->m_SafePointerList.UFG::qSafePointerNodeWithCallbacks<UFG::SimObject>::UFG::qSafePointerNode<UFG::SimObject>::mNode.mPrev = p_mSender;
  }
}

// File Line: 86
// RVA: 0x15143F0
__int64 dynamic_initializer_for__UFG::StateMachineComponent::s_StateMachineComponentList__()
{
  return atexit((int (__fastcall *)())dynamic_atexit_destructor_for__UFG::StateMachineComponent::s_StateMachineComponentList__);
}

// File Line: 87
// RVA: 0x1513B00
__int64 dynamic_initializer_for__UFG::StateMachineComponent::_TypeIDesc__()
{
  UFG::ComponentIDDesc *v0; // rax
  __int64 result; // rax

  v0 = UFG::StateMachineComponent::AccessComponentDesc();
  *(_DWORD *)&UFG::StateMachineComponent::_TypeIDesc.mBaseTypeIndex = *(_DWORD *)&v0->mBaseTypeIndex;
  UFG::StateMachineComponent::_TypeIDesc.mChildBitMask = v0->mChildBitMask;
  result = v0->mChildren;
  UFG::StateMachineComponent::_TypeIDesc.mChildren = result;
  return result;
}

// File Line: 104
// RVA: 0x44D7C0
void __fastcall UFG::StateMachineComponent::StateMachineComponent(
        UFG::StateMachineComponent *this,
        unsigned __int64 dna_uid,
        int subPartIndex)
{
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v6; // rsi
  float y; // xmm1_4
  float z; // xmm2_4
  float w; // xmm3_4
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *mPrev; // rax
  UFG::qReflectObject *mData; // rax
  fastdelegate::detail::GenericClass *RCX; // rax
  fastdelegate::FastDelegate1<UFG::Event *,void> v13[4]; // [rsp+38h] [rbp-40h] BYREF

  UFG::SimComponent::SimComponent(this, 0xDEADBEEF);
  v6 = &this->UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent>;
  this->mPrev = &this->UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent>;
  this->mNext = &this->UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent>;
  this->vfptr = (UFG::qSafePointerNode<UFG::SimComponent>Vtbl *)&UFG::StateMachineComponent::`vftable;
  this->mRigidBodyComponent.mPrev = &this->mRigidBodyComponent;
  this->mRigidBodyComponent.mNext = &this->mRigidBodyComponent;
  this->mRigidBodyComponent.m_pPointer = 0i64;
  UFG::qReflectHandleBase::qReflectHandleBase(&this->mStateMachineDefinition);
  this->mStateMachineDefinition.mTypeUID = UFG::qStringHash64("UFG::StateMachineDefinition", 0xFFFFFFFFFFFFFFFFui64);
  this->mFractureList.mNode.mPrev = &this->mFractureList.mNode;
  this->mFractureList.mNode.mNext = &this->mFractureList.mNode;
  this->mAttachedEffects.mNode.mPrev = &this->mAttachedEffects.mNode;
  this->mAttachedEffects.mNode.mNext = &this->mAttachedEffects.mNode;
  this->mLastDamageSource.mPrev = &this->mLastDamageSource;
  this->mLastDamageSource.mNext = &this->mLastDamageSource;
  this->mLastDamageSource.m_pPointer = 0i64;
  this->mChildMachines.p = 0i64;
  *(_QWORD *)&this->mChildMachines.size = 0i64;
  this->mPhantomRigidBody = 0i64;
  y = UFG::qVector4::msZero.y;
  z = UFG::qVector4::msZero.z;
  w = UFG::qVector4::msZero.w;
  this->mThrusterForce.x = UFG::qVector4::msZero.x;
  this->mThrusterForce.y = y;
  this->mThrusterForce.z = z;
  this->mThrusterForce.w = w;
  this->mThrusterDuration = 0.0;
  this->mPhantomTimer = -1.0;
  this->mTimer = -1.0;
  this->mHealth = 1.0;
  this->mPrevHealthBeforeRunningStateMachine = 1.0;
  this->mSubPartIndex = subPartIndex;
  this->mCurrentNodeIndex = -1;
  this->mFlags = 0;
  *(_QWORD *)this->mCollisionEventData = 0xBF800000BF800000ui64;
  *(_QWORD *)&this->mCollisionEventData[2] = 0xBF800000BF800000ui64;
  if ( subPartIndex == -1 )
  {
    mPrev = UFG::StateMachineComponent::s_StateMachineComponentList.mNode.mPrev;
    UFG::StateMachineComponent::s_StateMachineComponentList.mNode.mPrev->mNext = v6;
    v6->mPrev = mPrev;
    this->mNext = (UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *)&UFG::StateMachineComponent::s_StateMachineComponentList;
    UFG::StateMachineComponent::s_StateMachineComponentList.mNode.mPrev = &this->UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent>;
  }
  UFG::SimComponent::AddType(this, UFG::StateMachineComponent::_StateMachineComponentTypeUID, "StateMachineComponent");
  UFG::qReflectHandleBase::Init(&this->mStateMachineDefinition, this->mStateMachineDefinition.mTypeUID, dna_uid);
  mData = this->mStateMachineDefinition.mData;
  if ( mData )
  {
    if ( LOBYTE(mData[1].mBaseNode.mNeighbours[0]) )
    {
      v13[0].m_Closure.m_pFunction = (void (__fastcall *)(fastdelegate::detail::GenericClass *))UFG::StateMachineComponent::HandleCollisionEvent;
      v13[0].m_Closure.m_pthis = (fastdelegate::detail::GenericClass *)Assembly::GetRCX(this);
      UFG::EventDispatcher::Register(&UFG::EventDispatcher::mInstance, v13, UFG::gCollisionEventChannel.mUID, 0i64, 0);
    }
    if ( BYTE1(this->mStateMachineDefinition.mData[1].mBaseNode.mNeighbours[0]) )
    {
      RCX = (fastdelegate::detail::GenericClass *)Assembly::GetRCX(this);
      v13[0].m_Closure.m_pFunction = (void (__fastcall *)(fastdelegate::detail::GenericClass *))UFG::StateMachineComponent::HandleNamedEvent;
      v13[0].m_Closure.m_pthis = RCX;
      UFG::EventDispatcher::Register(
        &UFG::EventDispatcher::mInstance,
        v13,
        UFG::gStateMachineEventChannel.mUID,
        0i64,
        0);
    }
  }
}

// File Line: 134
// RVA: 0x451330
void __fastcall UFG::StateMachineComponent::~StateMachineComponent(UFG::StateMachineComponent *this)
{
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v2; // rsi
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *mPrev; // rcx
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *mNext; // rax
  UFG::qReflectObject *mData; // rax
  unsigned int i; // edi
  UFG::StateMachineComponent *v7; // rcx
  UFG::StateMachineComponent **p; // rcx
  hkpRigidBody *mPhantomRigidBody; // rcx
  UFG::qList<UFG::AttachedEffect,UFG::AttachedEffect,1,0> *p_mAttachedEffects; // rdi
  UFG::StateMachineComponent *j; // rax
  UFG::qList<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList,1,0> *p_m_SafePointerList; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v13; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v14; // rax
  UFG::StateMachineComponent **v15; // rcx
  UFG::qSafePointer<UFG::SimObject,UFG::SimObject> *p_mLastDamageSource; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v17; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v18; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v19; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v20; // rax
  UFG::StateMachineComponent *k; // rax
  UFG::qList<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList,1,0> *v22; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v23; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v24; // rax
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v25; // rcx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v26; // rax
  UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *p_mFractureList; // rdi
  UFG::StateMachineComponent *v28; // rcx
  UFG::qSafePointerNode<UFG::SimComponent>Vtbl *vfptr; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v30; // rax
  UFG::qSafePointerNode<UFG::SimComponent>Vtbl *v31; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v32; // rax
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v33; // rcx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v34; // rax
  UFG::qSafePointer<UFG::SimComponent,UFG::RigidBodyComponent> *p_mRigidBodyComponent; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v36; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v37; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v38; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v39; // rax
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v40; // rcx
  UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent> *v41; // rax
  fastdelegate::FastDelegate1<UFG::Event *,void> v42[4]; // [rsp+28h] [rbp-40h] BYREF

  this->vfptr = (UFG::qSafePointerNode<UFG::SimComponent>Vtbl *)&UFG::StateMachineComponent::`vftable;
  if ( this == UFG::StateMachineComponent::s_StateMachineComponentpCurrentIterator )
    UFG::StateMachineComponent::s_StateMachineComponentpCurrentIterator = (UFG::StateMachineComponent *)&this->mPrev[-4];
  v2 = &this->UFG::qNode<UFG::StateMachineComponent,UFG::StateMachineComponent>;
  mPrev = this->mPrev;
  mNext = v2->mNext;
  mPrev->mNext = mNext;
  mNext->mPrev = mPrev;
  v2->mPrev = v2;
  v2->mNext = v2;
  mData = this->mStateMachineDefinition.mData;
  if ( mData )
  {
    if ( LOBYTE(mData[1].mBaseNode.mNeighbours[0]) )
    {
      v42[0].m_Closure.m_pFunction = (void (__fastcall *)(fastdelegate::detail::GenericClass *))UFG::StateMachineComponent::HandleCollisionEvent;
      v42[0].m_Closure.m_pthis = (fastdelegate::detail::GenericClass *)Assembly::GetRCX(this);
      UFG::EventDispatcher::UnRegister(&UFG::EventDispatcher::mInstance, v42, UFG::gCollisionEventChannel.mUID);
    }
    if ( BYTE1(this->mStateMachineDefinition.mData[1].mBaseNode.mNeighbours[0]) )
    {
      v42[0].m_Closure.m_pthis = 0i64;
      v42[0].m_Closure.m_pFunction = (void (__fastcall *)(fastdelegate::detail::GenericClass *))UFG::StateMachineComponent::HandleNamedEvent;
      v42[0].m_Closure.m_pthis = (fastdelegate::detail::GenericClass *)Assembly::GetRCX(this);
      UFG::EventDispatcher::UnRegister(&UFG::EventDispatcher::mInstance, v42, UFG::gStateMachineEventChannel.mUID);
    }
  }
  for ( i = 0; i < this->mChildMachines.size; ++i )
  {
    v7 = this->mChildMachines.p[i];
    if ( v7 )
      v7->vfptr->__vecDelDtor(v7, 1u);
  }
  p = this->mChildMachines.p;
  if ( p )
    operator delete[](p);
  this->mChildMachines.p = 0i64;
  *(_QWORD *)&this->mChildMachines.size = 0i64;
  mPhantomRigidBody = this->mPhantomRigidBody;
  if ( mPhantomRigidBody )
    UFG::PhantomCallback::DestroyPhantom(mPhantomRigidBody);
  p_mAttachedEffects = &this->mAttachedEffects;
  for ( j = (UFG::StateMachineComponent *)&this->mAttachedEffects.mNode.mNext[-1].mNext;
        j != (UFG::StateMachineComponent *)&this->mFractureList.mNode.mNext;
        j = (UFG::StateMachineComponent *)&this->mAttachedEffects.mNode.mNext[-1].mNext )
  {
    p_m_SafePointerList = &j->m_SafePointerList;
    v13 = j->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev;
    v14 = j->m_SafePointerList.mNode.mNext;
    v13->mNext = v14;
    v14->mPrev = v13;
    p_m_SafePointerList->mNode.mPrev = &p_m_SafePointerList->mNode;
    p_m_SafePointerList->mNode.mNext = &p_m_SafePointerList->mNode;
    if ( p_m_SafePointerList != (UFG::qList<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList,1,0> *)8 )
      ((void (__fastcall *)(UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> **, __int64))p_m_SafePointerList[-1].mNode.mNext->mPrev)(
        &p_m_SafePointerList[-1].mNode.mNext,
        1i64);
  }
  v15 = this->mChildMachines.p;
  if ( v15 )
    operator delete[](v15);
  this->mChildMachines.p = 0i64;
  *(_QWORD *)&this->mChildMachines.size = 0i64;
  p_mLastDamageSource = &this->mLastDamageSource;
  if ( this->mLastDamageSource.m_pPointer )
  {
    v17 = p_mLastDamageSource->mPrev;
    v18 = this->mLastDamageSource.mNext;
    v17->mNext = v18;
    v18->mPrev = v17;
    p_mLastDamageSource->mPrev = p_mLastDamageSource;
    this->mLastDamageSource.mNext = &this->mLastDamageSource;
  }
  this->mLastDamageSource.m_pPointer = 0i64;
  v19 = p_mLastDamageSource->mPrev;
  v20 = this->mLastDamageSource.mNext;
  v19->mNext = v20;
  v20->mPrev = v19;
  p_mLastDamageSource->mPrev = p_mLastDamageSource;
  this->mLastDamageSource.mNext = &this->mLastDamageSource;
  for ( k = (UFG::StateMachineComponent *)&this->mAttachedEffects.mNode.mNext[-1].mNext;
        k != (UFG::StateMachineComponent *)&this->mFractureList.mNode.mNext;
        k = (UFG::StateMachineComponent *)&this->mAttachedEffects.mNode.mNext[-1].mNext )
  {
    v22 = &k->m_SafePointerList;
    v23 = k->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev;
    v24 = k->m_SafePointerList.mNode.mNext;
    v23->mNext = v24;
    v24->mPrev = v23;
    v22->mNode.mPrev = &v22->mNode;
    v22->mNode.mNext = &v22->mNode;
    if ( v22 != (UFG::qList<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList,1,0> *)8 )
      ((void (__fastcall *)(UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> **, __int64))v22[-1].mNode.mNext->mPrev)(
        &v22[-1].mNode.mNext,
        1i64);
  }
  v25 = p_mAttachedEffects->mNode.mPrev;
  v26 = this->mAttachedEffects.mNode.mNext;
  v25->mNext = v26;
  v26->mPrev = v25;
  p_mAttachedEffects->mNode.mPrev = &p_mAttachedEffects->mNode;
  this->mAttachedEffects.mNode.mNext = &this->mAttachedEffects.mNode;
  p_mFractureList = &this->mFractureList;
  v28 = (UFG::StateMachineComponent *)this->mFractureList.mNode.mNext;
  if ( v28 != (UFG::StateMachineComponent *)&this->mFractureList )
  {
    do
    {
      vfptr = v28->vfptr;
      v30 = v28->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev;
      vfptr[1].__vecDelDtor = (void *(__fastcall *)(UFG::qSafePointerNode<UFG::SimComponent> *, unsigned int))v30;
      v30->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)vfptr;
      v28->vfptr = (UFG::qSafePointerNode<UFG::SimComponent>Vtbl *)v28;
      v28->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)v28;
      v31 = v28->vfptr;
      v32 = v28->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev;
      v31[1].__vecDelDtor = (void *(__fastcall *)(UFG::qSafePointerNode<UFG::SimComponent> *, unsigned int))v32;
      v32->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)v31;
      v28->vfptr = (UFG::qSafePointerNode<UFG::SimComponent>Vtbl *)v28;
      v28->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)v28;
      operator delete[](v28);
      v28 = (UFG::StateMachineComponent *)this->mFractureList.mNode.mNext;
    }
    while ( v28 != (UFG::StateMachineComponent *)p_mFractureList );
  }
  v33 = p_mFractureList->mNode.mPrev;
  v34 = this->mFractureList.mNode.mNext;
  v33->mNext = v34;
  v34->mPrev = v33;
  p_mFractureList->mNode.mPrev = &p_mFractureList->mNode;
  this->mFractureList.mNode.mNext = &this->mFractureList.mNode;
  UFG::qReflectHandleBase::~qReflectHandleBase(&this->mStateMachineDefinition);
  p_mRigidBodyComponent = &this->mRigidBodyComponent;
  if ( this->mRigidBodyComponent.m_pPointer )
  {
    v36 = p_mRigidBodyComponent->mPrev;
    v37 = this->mRigidBodyComponent.mNext;
    v36->mNext = v37;
    v37->mPrev = v36;
    p_mRigidBodyComponent->mPrev = p_mRigidBodyComponent;
    this->mRigidBodyComponent.mNext = &this->mRigidBodyComponent;
  }
  this->mRigidBodyComponent.m_pPointer = 0i64;
  v38 = p_mRigidBodyComponent->mPrev;
  v39 = this->mRigidBodyComponent.mNext;
  v38->mNext = v39;
  v39->mPrev = v38;
  p_mRigidBodyComponent->mPrev = p_mRigidBodyComponent;
  this->mRigidBodyComponent.mNext = &this->mRigidBodyComponent;
  v40 = v2->mPrev;
  v41 = v2->mNext;
  v40->mNext = v41;
  v41->mPrev = v40;
  v2->mPrev = v2;
  v2->mNext = v2;
  UFG::SimComponent::~SimComponent(this);
}

// File Line: 166
// RVA: 0x4764F0
void __fastcall UFG::StateMachineComponent::Suspend(UFG::StateMachineComponent *this)
{
  hkpRigidBody *mPhantomRigidBody; // rdx

  mPhantomRigidBody = this->mPhantomRigidBody;
  if ( mPhantomRigidBody )
  {
    UFG::BasePhysicsSystem::RemoveEntity(UFG::BasePhysicsSystem::mInstance, mPhantomRigidBody, 0);
    this->m_Flags |= 2u;
  }
  else
  {
    this->m_Flags |= 2u;
  }
}

// File Line: 180
// RVA: 0x473FD0
void __fastcall UFG::StateMachineComponent::Restore(UFG::StateMachineComponent *this)
{
  hkpRigidBody *mPhantomRigidBody; // rdx

  mPhantomRigidBody = this->mPhantomRigidBody;
  if ( mPhantomRigidBody )
    UFG::BasePhysicsSystem::AddEntity(UFG::BasePhysicsSystem::mInstance, mPhantomRigidBody, 1);
  this->m_Flags &= ~2u;
}

// File Line: 193
// RVA: 0x47D500
_BOOL8 __fastcall UFG::StateMachineComponent::Update(
        UFG::StateMachineComponent *this,
        UFG::qMatrix44 *mat,
        float deltaTime)
{
  UFG::qMatrix44 *v4; // rbp
  unsigned __int8 v6; // si
  unsigned int i; // edi
  UFG::StateMachineComponent **p; // rax
  UFG::SimComponent *m_pPointer; // rax
  int mPrev; // eax
  bool v11; // cl
  int v12; // eax
  bool v13; // al
  UFG::qReflectObject *mData; // r8
  float mPrevHealthBeforeRunningStateMachine; // xmm8_4
  float mHealth; // xmm0_4
  int mCurrentNodeIndex; // esi
  __int64 v18; // rbp
  __int64 v19; // rdi
  unsigned __int8 v20; // dl
  UFG::qReflectObjectVtbl *vfptr; // rax
  float v22; // xmm0_4
  bool v23; // cl
  UFG::qReflectObject *v24; // rax
  int v25; // ecx
  __int64 v26; // rsi
  bool v27; // zf
  UFG::qReflectObjectVtbl *v28; // rsi
  float v29; // xmm1_4
  float v30; // xmm1_4
  float v31; // xmm0_4
  float mThrusterDuration; // xmm0_4
  float v33; // xmm3_4
  float y; // xmm11_4
  __m128 x_low; // xmm10
  float z; // xmm12_4
  float w; // xmm13_4
  __m128 v38; // xmm2
  float v39; // xmm8_4
  __m128 vecDelDtor_low; // xmm9
  float v41; // xmm5_4
  float v42; // xmm4_4
  __m128 v43; // xmm2
  float v44; // xmm1_4
  UFG::RigidBody *v45; // rcx
  float v46; // xmm1_4
  float v47; // xmm2_4
  float v48; // xmm3_4
  hkpRigidBody *mPhantomRigidBody; // rcx
  float mPhantomTimer; // xmm0_4
  float v51; // xmm0_4
  char v52; // r8
  float mTimer; // xmm0_4
  float v54; // xmm0_4
  int NamedNode; // esi
  unsigned int v56; // ebp
  UFG::qReflectObjectVtbl *v57; // rdx
  __int64 v58; // rdi
  bool v59; // cc
  UFG::StateMachineComponent *j; // rcx
  UFG::qSafePointerNode<UFG::SimComponent>Vtbl *v61; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v62; // rax
  UFG::qSafePointerNode<UFG::SimComponent>Vtbl *v63; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v64; // rax
  unsigned __int8 v66; // [rsp+20h] [rbp-118h]
  UFG::qReflectObjectVtbl *v67; // [rsp+28h] [rbp-110h]
  bool v68; // [rsp+30h] [rbp-108h]
  UFG::qVector4 v69; // [rsp+38h] [rbp-100h] BYREF
  UFG::qVector3 point; // [rsp+48h] [rbp-F0h] BYREF
  UFG::qVector4 result; // [rsp+58h] [rbp-E0h] BYREF
  __int64 v72; // [rsp+68h] [rbp-D0h]
  UFG::qReflectHandleBase v73; // [rsp+70h] [rbp-C8h] BYREF
  bool v74; // [rsp+140h] [rbp+8h]
  __int64 mUID_low; // [rsp+158h] [rbp+20h]
  char v77; // [rsp+158h] [rbp+20h]

  v72 = -2i64;
  v4 = mat;
  v6 = 0;
  v66 = 0;
  for ( i = 0; i < this->mChildMachines.size; ++i )
  {
    p = this->mChildMachines.p;
    if ( p[i] )
      UFG::StateMachineComponent::Update(p[i], v4, deltaTime);
  }
  if ( this->mStateMachineDefinition.mData )
  {
    m_pPointer = this->mRigidBodyComponent.m_pPointer;
    if ( m_pPointer )
      mPrev = (int)m_pPointer[4].m_SafePointerList.mNode.mPrev;
    else
      LOBYTE(mPrev) = 0;
    v11 = (mPrev & 0x10) != 0;
    v68 = v11;
    if ( this->mSubPartIndex == -1 )
      v12 = mPrev & 0x20;
    else
      v12 = 0;
    v13 = v12 != 0;
    v74 = v13;
    if ( this->mPrevHealthBeforeRunningStateMachine != this->mHealth || v13 || v11 )
    {
      UFG::qReflectHandleBase::qReflectHandleBase(&v73, &this->mStateMachineDefinition);
      mData = v73.mData;
      if ( v73.mData )
      {
        mPrevHealthBeforeRunningStateMachine = this->mPrevHealthBeforeRunningStateMachine;
        mHealth = this->mHealth;
        this->mPrevHealthBeforeRunningStateMachine = mHealth;
        if ( mHealth < 0.0 )
          this->mHealth = 0.0;
        mCurrentNodeIndex = 0;
        if ( this->mCurrentNodeIndex != -1 )
          mCurrentNodeIndex = this->mCurrentNodeIndex;
        v18 = mCurrentNodeIndex;
        mUID_low = LODWORD(mData[1].mBaseNode.mUID);
        if ( mCurrentNodeIndex < mUID_low )
        {
          v19 = 26i64 * mCurrentNodeIndex;
          v20 = 0;
          do
          {
            if ( v20 )
              break;
            vfptr = mData[1].vfptr;
            v22 = *((float *)&vfptr[v19 + 18].GetTypeName + 1);
            v23 = v22 >= this->mHealth && mPrevHealthBeforeRunningStateMachine > v22;
            if ( v74 && BYTE3(vfptr[v19 + 24].__vecDelDtor) || v68 && BYTE4(vfptr[v19 + 24].__vecDelDtor) || v23 )
            {
              v20 = UFG::StateMachineComponent::DoStateTransition(this, mCurrentNodeIndex);
              mData = v73.mData;
            }
            ++mCurrentNodeIndex;
            ++v18;
            v19 += 26i64;
          }
          while ( v18 < mUID_low );
          v66 = v20;
        }
        v4 = mat;
        v6 = v66;
      }
      UFG::qReflectHandleBase::~qReflectHandleBase(&v73);
    }
    v24 = this->mStateMachineDefinition.mData;
    if ( v24 )
    {
      v25 = this->mCurrentNodeIndex;
      if ( v25 != -1 && v25 < SLODWORD(v24[1].mBaseNode.mUID) )
      {
        v26 = 26i64 * (unsigned int)v25;
        v27 = &v24[1].vfptr[v26] == 0;
        v28 = &v24[1].vfptr[v26];
        v67 = v28;
        if ( v27 )
          goto LABEL_86;
        v29 = *(float *)&v28[19].GetTypeName;
        if ( v29 != 0.0 )
        {
          v30 = v29 * deltaTime;
          if ( v30 > 0.0 )
          {
            v31 = this->mHealth - v30;
            this->mHealth = v31;
            if ( v31 < 0.0 )
              this->mHealth = 0.0;
          }
        }
        UFG::StateMachineComponent::UpdateAttachedEffects(this, v4);
        if ( BYTE2(v28[24].__vecDelDtor) )
        {
          mThrusterDuration = this->mThrusterDuration;
          if ( mThrusterDuration > 0.0 )
          {
            this->mThrusterDuration = mThrusterDuration - deltaTime;
            v33 = deltaTime * *(float *)&v28[20].__vecDelDtor;
            y = this->mThrusterForce.y;
            x_low = (__m128)LODWORD(this->mThrusterForce.x);
            z = this->mThrusterForce.z;
            w = this->mThrusterForce.w;
            v38 = x_low;
            v38.m128_f32[0] = (float)((float)((float)(x_low.m128_f32[0] * x_low.m128_f32[0]) + (float)(y * y))
                                    + (float)(z * z))
                            + (float)(w * w);
            if ( _mm_sqrt_ps(v38).m128_f32[0] <= v33 )
            {
              v46 = UFG::qVector4::msZero.y;
              v47 = UFG::qVector4::msZero.z;
              v48 = UFG::qVector4::msZero.w;
              this->mThrusterForce.x = UFG::qVector4::msZero.x;
              this->mThrusterForce.y = v46;
              this->mThrusterForce.z = v47;
              this->mThrusterForce.w = v48;
            }
            else
            {
              v39 = *((float *)&v28[9].__vecDelDtor + 1);
              vecDelDtor_low = (__m128)LODWORD(v28[9].__vecDelDtor);
              v41 = *(float *)&v28[9].GetTypeName;
              v42 = *((float *)&v28[9].GetTypeName + 1);
              v43 = vecDelDtor_low;
              v43.m128_f32[0] = (float)((float)((float)(vecDelDtor_low.m128_f32[0] * vecDelDtor_low.m128_f32[0])
                                              + (float)(v39 * v39))
                                      + (float)(v41 * v41))
                              + (float)(v42 * v42);
              if ( v43.m128_f32[0] == 0.0 )
                v44 = 0.0;
              else
                v44 = 1.0 / _mm_sqrt_ps(v43).m128_f32[0];
              this->mThrusterForce.x = x_low.m128_f32[0] - (float)((float)(vecDelDtor_low.m128_f32[0] * v44) * v33);
              this->mThrusterForce.y = y - (float)((float)(v39 * v44) * v33);
              this->mThrusterForce.z = z - (float)((float)(v41 * v44) * v33);
              this->mThrusterForce.w = w - (float)((float)(v42 * v44) * v33);
              UFG::operator*(&result, (UFG::qVector4 *)&v28[9], v4);
              UFG::operator*(&v69, (UFG::qVector4 *)&v28[10], v4);
              v45 = (UFG::RigidBody *)this->mRigidBodyComponent.m_pPointer;
              if ( v45 )
              {
                point.x = v69.x;
                point.y = v69.y;
                point.z = v69.z;
                v69.x = result.x;
                v69.y = result.y;
                v69.z = result.z;
                UFG::RigidBody::ApplyForce(v45, deltaTime, (UFG::qVector3 *)&v69, &point);
              }
            }
          }
        }
        mPhantomRigidBody = this->mPhantomRigidBody;
        if ( mPhantomRigidBody )
        {
          mPhantomTimer = this->mPhantomTimer;
          if ( mPhantomTimer != -1.0 )
          {
            v51 = mPhantomTimer - deltaTime;
            this->mPhantomTimer = v51;
            if ( v51 < 0.0 )
            {
              UFG::PhantomCallback::DestroyPhantom(mPhantomRigidBody);
              this->mPhantomRigidBody = 0i64;
            }
          }
        }
        v52 = 0;
        v77 = 0;
        mTimer = this->mTimer;
        if ( mTimer >= 0.0 )
        {
          v54 = mTimer - deltaTime;
          this->mTimer = v54;
          if ( v54 <= 0.0 )
          {
            v52 = 1;
            v77 = 1;
            this->mTimer = -1.0;
          }
        }
        NamedNode = -1;
        v56 = 0;
        v57 = v67;
        if ( !LODWORD(v67[6].GetTypeName) )
          goto LABEL_86;
        do
        {
          if ( NamedNode == -1 )
          {
            v58 = (__int64)v57[6].__vecDelDtor + 16 * v56;
            switch ( *(_DWORD *)v58 )
            {
              case 0:
                v59 = *(float *)(v58 + 4) <= this->mHealth;
                goto LABEL_65;
              case 1:
                if ( v74 )
                  goto $LN8_41;
                break;
              case 2:
                v59 = this->mCollisionEventData[0] <= *(float *)(v58 + 4);
                goto LABEL_65;
              case 3:
                v59 = this->mCollisionEventData[1] <= *(float *)(v58 + 4);
                goto LABEL_65;
              case 4:
                v59 = this->mCollisionEventData[2] <= *(float *)(v58 + 4);
                goto LABEL_65;
              case 5:
                v59 = this->mCollisionEventData[3] <= *(float *)(v58 + 4);
LABEL_65:
                if ( !v59 )
                  goto $LN8_41;
                break;
              case 6:
                if ( v52 )
                  goto $LN8_41;
                break;
              case 7:
                if ( v68 )
                  goto $LN8_41;
                break;
              case 8:
                if ( (this->mFlags & 1) != 0 )
                  goto $LN8_41;
                break;
              case 9:
                if ( UFG::qRandom(1.0, (unsigned int *)&UFG::qDefaultSeed) <= *(float *)(v58 + 4) )
                  goto $LN8_41;
                goto LABEL_81;
              case 0xA:
$LN8_41:
                NamedNode = UFG::StateMachineDefinition::FindNamedNode(
                              (UFG::StateMachineDefinition *)this->mStateMachineDefinition.mData,
                              (UFG::qSymbol *)(v58 + 12));
LABEL_81:
                v57 = v67;
                break;
              default:
                break;
            }
          }
          ++v56;
          v52 = v77;
        }
        while ( v56 < LODWORD(v57[6].GetTypeName) );
        if ( NamedNode == -1 || NamedNode == this->mCurrentNodeIndex )
LABEL_86:
          v6 = v66;
        else
          v6 = UFG::StateMachineComponent::DoStateTransition(this, NamedNode);
      }
    }
    for ( j = (UFG::StateMachineComponent *)this->mFractureList.mNode.mNext;
          j != (UFG::StateMachineComponent *)&this->mFractureList;
          j = (UFG::StateMachineComponent *)this->mFractureList.mNode.mNext )
    {
      v61 = j->vfptr;
      v62 = j->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev;
      v61[1].__vecDelDtor = (void *(__fastcall *)(UFG::qSafePointerNode<UFG::SimComponent> *, unsigned int))v62;
      v62->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)v61;
      j->vfptr = (UFG::qSafePointerNode<UFG::SimComponent>Vtbl *)j;
      j->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)j;
      v63 = j->vfptr;
      v64 = j->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev;
      v63[1].__vecDelDtor = (void *(__fastcall *)(UFG::qSafePointerNode<UFG::SimComponent> *, unsigned int))v64;
      v64->mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)v63;
      j->vfptr = (UFG::qSafePointerNode<UFG::SimComponent>Vtbl *)j;
      j->m_SafePointerList.mNode.UFG::SimComponent::UFG::qSafePointerNode<UFG::SimComponent>::mPrev = (UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *)j;
      operator delete[](j);
    }
    if ( this->mSubPartIndex != -1 )
      v6 = 0;
  }
  *(_QWORD *)this->mCollisionEventData = 0xBF800000BF800000ui64;
  *(_QWORD *)&this->mCollisionEventData[2] = 0xBF800000BF800000ui64;
  this->mFlags &= ~1u;
  return v6;
}

// File Line: 421
// RVA: 0x462090
__int64 __fastcall UFG::StateMachineComponent::DoStateTransition(
        UFG::StateMachineComponent *this,
        int nodeToTransitionInto)
{
  UFG::StateMachineComponent *v2; // rdi
  int mSubPartIndex; // r8d
  UFG::Event *v4; // r12
  UFG::qSymbol *v5; // r15
  UFG::qReflectObject *mData; // rcx
  int mCurrentNodeIndex; // eax
  __int64 v8; // rbx
  UFG::SimObjectGame *m_pSimObject; // rcx
  __int16 m_Flags; // dx
  UFG::SimComponent *m_pComponent; // rax
  UFG::SimObjectGame *v12; // rcx
  __int16 v13; // dx
  UFG::SimComponent *v14; // r13
  UFG::SimComponent *v15; // rax
  unsigned int v16; // esi
  ModelType *mNext; // rdi
  __int64 v18; // rax
  unsigned int v19; // r14d
  UFG::qBaseNodeRB *Skeleton; // rax
  unsigned int BoneID; // eax
  unsigned int mUID; // esi
  __int64 v23; // rbx
  UFG::qPropertySet *PropertySet; // r13
  UFG::qMatrix44 *v25; // rax
  UFG::SimObject *v26; // rax
  __m128 v27; // xmm2
  __m128 v28; // xmm2
  UFG::RigidBody *ComponentOfType; // rax
  UFG::RigidBody *v30; // r14
  float v31; // xmm5_4
  float v32; // xmm4_4
  float v33; // xmm6_4
  float v34; // xmm5_4
  float v35; // xmm4_4
  float v36; // xmm6_4
  float v37; // xmm1_4
  float v38; // xmm2_4
  UFG::SimObject *v39; // r14
  UFG::allocator::free_link *v40; // rax
  __int64 v41; // rax
  UFG::qNode<UFG::ExplosionManager::Explosion,UFG::ExplosionManager::Explosion> *v42; // rcx
  UFG::qNode<UFG::ExplosionManager::Explosion,UFG::ExplosionManager::Explosion> *v43; // rax
  float v44; // xmm1_4
  float v45; // xmm2_4
  float v46; // xmm3_4
  unsigned int v47; // esi
  hkpRigidBody *v48; // r10
  UFG::Constraint *v49; // rbx
  unsigned __int64 v50; // rdx
  int v51; // ecx
  int v52; // ecx
  float v53; // xmm1_4
  float v54; // xmm2_4
  float v55; // xmm1_4
  float v56; // xmm2_4
  UFG::Constraint *StiffSpringContraint; // rax
  float v58; // xmm1_4
  float v59; // xmm2_4
  float v60; // xmm1_4
  float v61; // xmm2_4
  int v62; // xmm1_4
  int v63; // xmm2_4
  unsigned int v64; // eax
  UFG::eStimulusType StimulusType; // ebx
  float v66; // xmm1_4
  float v67; // xmm2_4
  UFG::SimObjectGame *v68; // rcx
  __int16 v69; // dx
  UFG::SimComponent *ComponentOfTypeHK; // rax
  unsigned int v71; // esi
  __int64 *v72; // rbx
  __int64 v73; // rbx
  UFG::qResourceInventory *Inventory; // rax
  UFG::qResourceWarehouse *v75; // rax
  __int64 v76; // rax
  __int64 v77; // rsi
  __int64 v78; // r14
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v79; // r13
  unsigned int i; // ebx
  __int64 v81; // rcx
  unsigned int v82; // edx
  bool v83; // zf
  UFG::RigidBody *m_pPointer; // rcx
  unsigned int v85; // ebx
  unsigned int v86; // eax
  const char *v87; // r14
  const char *v88; // r8
  unsigned int v89; // eax
  UFG::SimObjectGame *v90; // rcx
  __int16 v91; // dx
  UFG::SimComponent *v92; // rsi
  UFG::SimComponent *v93; // rax
  ActionPath *v94; // rax
  ActionPath *v95; // rbx
  const char *v96; // rdx
  ActionNode *v97; // rax
  ActionNodePlayable *v98; // r13
  __int64 v99; // rax
  __int64 mOffset; // rax
  __int64 v101; // rax
  char *v102; // rcx
  unsigned __int8 v103; // r13
  UFG::SimObjectGame *v104; // rcx
  __int16 v105; // dx
  UFG::SimComponent *v106; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v107; // rcx
  UFG::SimObjectGame *v108; // rcx
  __int16 v109; // dx
  UFG::SimComponent *v110; // rax
  Render::IDecalScenery *v111; // rcx
  UFG::SimObjectGame *v112; // rcx
  __int16 v113; // dx
  UFG::SimComponent *v114; // rax
  Render::IDecalScenery **v115; // rcx
  UFG::RigidBody *v116; // rcx
  int m_collisionFilterInfo_high; // r8d
  int v118; // r9d
  int v119; // eax
  hkpRigidBody *mBody; // rdx
  unsigned int v121; // eax
  UFG::Constraint *ConstraintByName; // rax
  UFG::Constraint *v123; // rsi
  char *v124; // rax
  unsigned int v125; // eax
  UFG::Constraint *v126; // rax
  UFG::Constraint *v127; // rsi
  char *v128; // rax
  UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *mPrev; // rax
  int m_EnumValue; // r9d
  UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *v131; // rcx
  UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > *v132; // rax
  unsigned int v133; // eax
  const char *v134; // rcx
  unsigned int v135; // eax
  UFG::SimObjectGame *v136; // rcx
  __int16 v137; // dx
  UFG::PhysicsRenderHelper *v138; // rax
  UFG::SimObjectGame *v139; // rcx
  __int16 v140; // dx
  UFG::SimComponent *v141; // rax
  UFG::SimObjectGame *v142; // rcx
  __int16 v143; // dx
  UFG::SimComponent *v144; // rax
  UFG::qVector4 v145; // xmm0
  __m128 v146; // xmm1
  UFG::RoadNetworkTrafficLightLocation *TrafficLightNearPosition; // rax
  __m128 v148; // xmm9
  UFG::RoadNetworkTrafficLightLocation *v149; // rax
  hkpRigidBody *mPhantomRigidBody; // rcx
  unsigned int v151; // xmm1_4
  unsigned int v152; // xmm2_4
  unsigned int v153; // xmm3_4
  float v154; // xmm0_4
  UFG::allocator::free_link *v155; // rax
  UFG::Event *v156; // rax
  UFG::RigidBody *v157; // rcx
  float v158; // xmm3_4
  float v159; // xmm2_4
  float v160; // xmm9_4
  float v161; // xmm14_4
  float v162; // xmm1_4
  float v163; // xmm0_4
  float v164; // xmm2_4
  float v165; // xmm2_4
  UFG::RigidBody *v166; // rcx
  __int64 v167; // rax
  float v168; // xmm0_4
  TracksEnumBinding<unsigned long> pTrackEnumBinding; // [rsp+40h] [rbp-80h] BYREF
  UFG::qMatrix44 mat; // [rsp+60h] [rbp-60h] BYREF
  UFG::qMatrix44 d; // [rsp+A0h] [rbp-20h] BYREF
  UFG::qVector3 axis; // [rsp+E0h] [rbp+20h] BYREF
  hkpPhysicsSystem transformOut; // [rsp+F0h] [rbp+30h] BYREF
  __int64 v174; // [rsp+160h] [rbp+A0h]
  UFG::qSymbol name[2]; // [rsp+260h] [rbp+1A0h] BYREF
  UFG::qSymbol result; // [rsp+268h] [rbp+1A8h] BYREF
  UFG::qSymbol *v177; // [rsp+270h] [rbp+1B0h]

  v174 = -2i64;
  v2 = this;
  this->mCurrentNodeIndex = nodeToTransitionInto;
  d = UFG::qMatrix44::msIdentity;
  mSubPartIndex = this->mSubPartIndex;
  if ( mSubPartIndex != -1 )
  {
    UFG::GetTransformFromShapeKey(
      (hkTransformf *)&transformOut,
      *(hkpShape **)(*(_QWORD *)&this->mRigidBodyComponent.m_pPointer[2].m_Flags + 192i64),
      mSubPartIndex);
    hkTransformf::get4x4ColumnMajor((hkTransformf *)&transformOut, &d.v0.x);
  }
  v4 = 0i64;
  v5 = 0i64;
  v177 = 0i64;
  mData = v2->mStateMachineDefinition.mData;
  if ( mData )
  {
    mCurrentNodeIndex = v2->mCurrentNodeIndex;
    if ( mCurrentNodeIndex != -1 && mCurrentNodeIndex < SLODWORD(mData[1].mBaseNode.mUID) )
    {
      v5 = (UFG::qSymbol *)&mData[1].vfptr[26 * (unsigned int)mCurrentNodeIndex];
      v177 = v5;
    }
  }
  if ( BYTE1(v5[97].mUID) )
    UFG::StateMachineComponent::KillEffects(v2);
  LODWORD(v8) = v5[6];
  while ( (_DWORD)v8 )
  {
    v8 = (unsigned int)(v8 - 1);
    UFG::StateMachineComponent::CreateEffect(v2, (UFG::StateMachineEffectNode *)(*(_QWORD *)&v5[4].mUID + 80 * v8), &d);
  }
  if ( v5[14].mUID )
  {
    m_pSimObject = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( m_pSimObject )
    {
      m_Flags = m_pSimObject->m_Flags;
      if ( (m_Flags & 0x4000) != 0 )
      {
        m_pComponent = m_pSimObject->m_Components.p[9].m_pComponent;
      }
      else if ( m_Flags >= 0 )
      {
        if ( (m_Flags & 0x2000) != 0 )
          m_pComponent = m_pSimObject->m_Components.p[8].m_pComponent;
        else
          m_pComponent = (m_Flags & 0x1000) != 0
                       ? UFG::SimObjectGame::GetComponentOfTypeHK(m_pSimObject, UFG::BaseAnimationComponent::_TypeUID)
                       : UFG::SimObject::GetComponentOfType(m_pSimObject, UFG::BaseAnimationComponent::_TypeUID);
      }
      else
      {
        m_pComponent = m_pSimObject->m_Components.p[9].m_pComponent;
      }
      if ( m_pComponent )
      {
        v12 = (UFG::SimObjectGame *)v2->m_pSimObject;
        if ( v12 )
        {
          v13 = v12->m_Flags;
          if ( (v13 & 0x4000) != 0 )
          {
            v14 = v12->m_Components.p[14].m_pComponent;
          }
          else if ( v13 >= 0 )
          {
            if ( (v13 & 0x2000) != 0 )
            {
              v14 = v12->m_Components.p[9].m_pComponent;
            }
            else
            {
              v15 = (v13 & 0x1000) != 0
                  ? UFG::SimObjectGame::GetComponentOfTypeHK(v12, UFG::CompositeDrawableComponent::_TypeUID)
                  : UFG::SimObject::GetComponentOfType(v12, UFG::CompositeDrawableComponent::_TypeUID);
              v14 = v15;
            }
          }
          else
          {
            v14 = v12->m_Components.p[14].m_pComponent;
          }
          if ( v14 )
          {
            v16 = 0;
            if ( v5[14].mUID )
            {
              mNext = (ModelType *)v14[22].m_SafePointerList.mNode.mNext;
              do
              {
                v18 = *(_QWORD *)&v5[12].mUID;
                v19 = *(_DWORD *)(v18 + 8i64 * v16);
                ModelType::SetRigidModelVisibilityOnBone(mNext, v19, *(_BYTE *)(v18 + 8i64 * v16 + 4));
                if ( *(_BYTE *)(*(_QWORD *)&v5[12].mUID + 8i64 * v16 + 5) )
                {
                  Skeleton = ModelType::GetSkeleton(mNext);
                  BoneID = Skeleton::GetBoneID((Skeleton *)Skeleton, v19);
                  Render::IDecalScenery::RemoveAttachedDecals((Render::IDecalScenery *)&v14[1], BoneID);
                }
                ++v16;
              }
              while ( v16 < v5[14].mUID );
              v2 = *(UFG::StateMachineComponent **)&name[0].mUID;
            }
          }
        }
      }
    }
  }
  if ( v5[10].mUID )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, &mat);
    mUID = v5[10].mUID;
    do
    {
      v23 = *(_QWORD *)&v5[8].mUID + 92i64 * --mUID;
      PropertySet = UFG::PropertySetManager::FindPropertySet((UFG::qSymbol *)(v23 + 88));
      if ( PropertySet )
      {
        UFG::Simulation::GenerateUniqueName(&UFG::gSim, &result, (UFG::qSymbol *)(v23 + 88));
        v25 = UFG::qMatrix44::operator*((UFG::qMatrix44 *)v23, (UFG::qMatrix44 *)&transformOut, &mat);
        v26 = UFG::SpawnInfoInterface::SpawnObject(&result, PropertySet, v25, Count, 0i64, 0i64);
        v27 = (__m128)*(unsigned int *)(v23 + 64);
        v27.m128_f32[0] = (float)((float)(v27.m128_f32[0] * v27.m128_f32[0])
                                + (float)(*(float *)(v23 + 68) * *(float *)(v23 + 68)))
                        + (float)(*(float *)(v23 + 72) * *(float *)(v23 + 72));
        if ( _mm_sqrt_ps(v27).m128_f32[0] > 0.0
          || (v28 = (__m128)*(unsigned int *)(v23 + 76),
              v28.m128_f32[0] = (float)((float)(v28.m128_f32[0] * v28.m128_f32[0])
                                      + (float)(*(float *)(v23 + 80) * *(float *)(v23 + 80)))
                              + (float)(*(float *)(v23 + 84) * *(float *)(v23 + 84)),
              _mm_sqrt_ps(v28).m128_f32[0] != 0.0) )
        {
          if ( v26 )
          {
            ComponentOfType = (UFG::RigidBody *)UFG::SimObject::GetComponentOfType(
                                                  v26,
                                                  UFG::RigidBodyComponent::_TypeUID);
            v30 = ComponentOfType;
            if ( ComponentOfType )
            {
              v31 = *(float *)(v23 + 68);
              v32 = *(float *)(v23 + 64);
              v33 = *(float *)(v23 + 72);
              mat.v2.w = (float)((float)(mat.v0.x * v32) + (float)(mat.v1.x * v31))
                       + (float)(*(float *)&pTrackEnumBinding.mPrev * v33);
              mat.v3.x = (float)((float)(mat.v0.y * v32) + (float)(mat.v1.y * v31))
                       + (float)(*((float *)&pTrackEnumBinding.mPrev + 1) * v33);
              mat.v3.y = (float)((float)(mat.v0.z * v32) + (float)(mat.v1.z * v31))
                       + (float)(*(float *)&pTrackEnumBinding.mNext * v33);
              UFG::RigidBody::ApplyLinearImpulse(ComponentOfType, (UFG::qVector3 *)&mat.v2.w);
              v34 = *(float *)(v23 + 80);
              v35 = *(float *)(v23 + 76);
              v36 = *(float *)(v23 + 84);
              mat.v2.x = (float)((float)(mat.v0.x * v35) + (float)(mat.v1.x * v34))
                       + (float)(*(float *)&pTrackEnumBinding.mPrev * v36);
              mat.v2.y = (float)((float)(mat.v0.y * v35) + (float)(mat.v1.y * v34))
                       + (float)(*((float *)&pTrackEnumBinding.mPrev + 1) * v36);
              mat.v2.z = (float)((float)(mat.v0.z * v35) + (float)(mat.v1.z * v34))
                       + (float)(*(float *)&pTrackEnumBinding.mNext * v36);
              UFG::RigidBody::ApplyAngularImpulse(v30, (UFG::qVector3 *)&mat.v2);
            }
          }
        }
      }
    }
    while ( mUID );
  }
  if ( v5[68].mUID != -1 )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (UFG::qMatrix44 *)&transformOut);
    v37 = *(float *)&v5[50].mUID + *(float *)&transformOut.m_actions.m_size;
    v38 = *(float *)&v5[49].mUID + *((float *)&transformOut.m_actions.m_data + 1);
    mat.v2.x = *(float *)&v5[48].mUID + *(float *)&transformOut.m_actions.m_data;
    mat.v2.y = v38;
    mat.v2.z = v37;
    v39 = v2->m_pSimObject;
    v40 = UFG::qMalloc(0xB0ui64, UFG::gGlobalNewName, 0i64);
    *(_QWORD *)&name[0].mUID = v40;
    if ( v40 )
      UFG::ExplosionManager::Explosion::Explosion(
        (UFG::ExplosionManager::Explosion *)v40,
        (UFG::qVector3 *)&mat.v2,
        v5 + 68,
        v39);
    else
      v41 = 0i64;
    v42 = (UFG::qNode<UFG::ExplosionManager::Explosion,UFG::ExplosionManager::Explosion> *)(v41 + 8);
    v43 = UFG::ExplosionManager::mActiveExplosions.mNode.mNext;
    UFG::ExplosionManager::mActiveExplosions.mNode.mNext = v42;
    v42->mPrev = (UFG::qNode<UFG::ExplosionManager::Explosion,UFG::ExplosionManager::Explosion> *)&UFG::ExplosionManager::mActiveExplosions;
    v42->mNext = v43;
    v43->mPrev = v42;
  }
  if ( BYTE2(v5[96].mUID) )
  {
    LODWORD(v2->mThrusterDuration) = (UFG::qSymbol)v5[79].mUID;
    v44 = *(float *)&v5[37].mUID;
    v45 = *(float *)&v5[38].mUID;
    v46 = *(float *)&v5[39].mUID;
    LODWORD(v2->mThrusterForce.x) = (UFG::qSymbol)v5[36].mUID;
    v2->mThrusterForce.y = v44;
    v2->mThrusterForce.z = v45;
    v2->mThrusterForce.w = v46;
  }
  v47 = 0;
  if ( v5[18].mUID )
  {
    while ( 1 )
    {
      v48 = (hkpRigidBody *)v2->mRigidBodyComponent.m_pPointer[2].m_pSimObject;
      if ( v48 )
        break;
LABEL_67:
      if ( ++v47 >= v5[18].mUID )
        goto LABEL_68;
    }
    v49 = 0i64;
    v50 = *(_QWORD *)&v5[16].mUID + ((unsigned __int64)v47 << 6);
    v51 = *(_DWORD *)(v50 + 60);
    if ( v51 )
    {
      v52 = v51 - 1;
      if ( v52 )
      {
        if ( v52 != 1 )
        {
LABEL_66:
          UFG::RigidBody::AddConstraint((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, v49);
          UFG::BasePhysicsSystem::AddConstraint(UFG::BasePhysicsSystem::mInstance, v49->mConstraintInstance);
          goto LABEL_67;
        }
        v53 = *(float *)(v50 + 20);
        v54 = *(float *)(v50 + 24);
        mat.v2.x = *(float *)(v50 + 16);
        mat.v2.y = v53;
        mat.v2.z = v54;
        v55 = *(float *)(v50 + 4);
        v56 = *(float *)(v50 + 8);
        mat.v2.w = *(float *)v50;
        mat.v3.x = v55;
        mat.v3.y = v56;
        StiffSpringContraint = UFG::Constraint::CreateStiffSpringContraint(
                                 v48,
                                 0i64,
                                 (UFG::qSymbol *)(v50 + 56),
                                 (UFG::qVector3 *)&mat.v2.w,
                                 (UFG::qVector3 *)&mat.v2);
      }
      else
      {
        v58 = *(float *)(v50 + 36);
        v59 = *(float *)(v50 + 40);
        axis.x = *(float *)(v50 + 32);
        axis.y = v58;
        axis.z = v59;
        v60 = *(float *)(v50 + 4);
        v61 = *(float *)(v50 + 8);
        mat.v0.x = *(float *)v50;
        mat.v0.y = v60;
        mat.v0.z = v61;
        StiffSpringContraint = UFG::Constraint::CreateHingeConstraint(
                                 v48,
                                 0i64,
                                 (UFG::qSymbol *)(v50 + 56),
                                 (UFG::qVector3 *)&mat,
                                 &axis,
                                 *(float *)(v50 + 48),
                                 *(float *)(v50 + 52));
      }
    }
    else
    {
      v62 = *(_DWORD *)(v50 + 4);
      v63 = *(_DWORD *)(v50 + 8);
      LODWORD(pTrackEnumBinding.mPrev) = *(_DWORD *)v50;
      HIDWORD(pTrackEnumBinding.mPrev) = v62;
      LODWORD(pTrackEnumBinding.mNext) = v63;
      StiffSpringContraint = UFG::Constraint::CreateBallAndSocketConstraint(
                               v48,
                               0i64,
                               (UFG::qSymbol *)(v50 + 56),
                               (UFG::qVector3 *)&pTrackEnumBinding);
    }
    v49 = StiffSpringContraint;
    goto LABEL_66;
  }
LABEL_68:
  v64 = v5[69].mUID;
  if ( *(float *)&v64 != NAN )
  {
    *(_QWORD *)&name[0].mUID = &result;
    result.mUID = v64;
    StimulusType = (unsigned int)UFG::StimulusManager::GetStimulusType(&result);
    UFG::RigidBody::GetCentreOfMass(
      (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
      (UFG::qVector3 *)&pTrackEnumBinding);
    mat.v0.x = UFG::qVector3::msZero.x;
    mat.v0.y = UFG::qVector3::msZero.y;
    mat.v0.z = UFG::qVector3::msZero.z;
    mat.v0.w = NAN;
    mat.v1.x = -1.0;
    mat.v1.y = -1.0;
    LODWORD(mat.v0.w) = v5[70].mUID == UFG::qSymbol::create_from_string(&result, "eSTIMULUS_EMISSION_CONTINUOUS")->mUID;
    LODWORD(mat.v1.y) = (UFG::qSymbol)v5[74].mUID;
    LODWORD(mat.v1.x) = (UFG::qSymbol)v5[73].mUID;
    v66 = *(float *)&v5[52].mUID;
    v67 = *(float *)&v5[53].mUID;
    LODWORD(mat.v0.x) = (UFG::qSymbol)v5[51].mUID;
    mat.v0.y = v66;
    mat.v0.z = v67;
    UFG::StimulusManager::BeginStimulus(
      UFG::StimulusManager::s_pInstance,
      StimulusType,
      (UFG::StimulusParameters *)&mat,
      (UFG::qVector3 *)&pTrackEnumBinding);
  }
  if ( v5[84].mUID != -1 )
  {
    v68 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v68 )
    {
      v69 = v68->m_Flags;
      if ( (v69 & 0x4000) != 0 || v69 < 0 || (v69 & 0x2000) != 0 || (v69 & 0x1000) != 0 )
        ComponentOfTypeHK = UFG::SimObjectGame::GetComponentOfTypeHK(v68, UFG::PhysicsRenderHelper::_TypeUID);
      else
        ComponentOfTypeHK = UFG::SimObject::GetComponentOfType(v68, UFG::PhysicsRenderHelper::_TypeUID);
      if ( ComponentOfTypeHK )
      {
        v71 = v5[84].mUID;
        v72 = *(__int64 **)&ComponentOfTypeHK[1].m_TypeUID;
        if ( v72 )
        {
          v73 = *v72;
          Inventory = `UFG::qGetResourceInventory<Illusion::Model>::`2::result;
          if ( !`UFG::qGetResourceInventory<Illusion::Model>::`2::result )
          {
            v75 = UFG::qResourceWarehouse::Instance();
            Inventory = UFG::qResourceWarehouse::GetInventory(v75, 0xA2ADCD77);
            `UFG::qGetResourceInventory<Illusion::Model>::`2::result = Inventory;
          }
          UFG::qResourceHandle::Init((UFG::qResourceHandle *)(v73 + 136), 0xA2ADCD77, v71, Inventory);
        }
      }
    }
  }
  if ( BYTE1(v5[96].mUID) )
  {
    hkpPhysicsSystem::hkpPhysicsSystem(&transformOut);
    UFG::Destruction::ForceFracture(
      UFG::Destruction::mInstance,
      (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
      &transformOut,
      -1);
    hkpPhysicsSystem::~hkpPhysicsSystem(&transformOut);
  }
  if ( v5[22].mUID )
  {
    v76 = 0i64;
    *(float *)&result.mUID = 0.0;
    do
    {
      v77 = 3 * v76;
      v78 = *(_QWORD *)&v5[20].mUID;
      if ( *(_DWORD *)(v78 + 24 * v76) == -1 )
      {
        v85 = 0;
        if ( *(_DWORD *)(v78 + 24 * v76 + 16) )
        {
          do
            UFG::RigidBody::DisableFracturePartByGuid(
              (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
              *(_DWORD *)(*(_QWORD *)(v78 + 8 * v77 + 8) + 8i64 * v85++));
          while ( v85 < *(_DWORD *)(v78 + 8 * v77 + 16) );
        }
      }
      else
      {
        v79 = v2->mFractureList.mNode.mNext;
        if ( v79 != (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)&v2->mFractureList )
        {
          do
          {
            if ( LODWORD(v79[1].mPrev) == *(_DWORD *)(v78 + 8 * v77) )
            {
              for ( i = 0; i < *(_DWORD *)(v78 + 8 * v77 + 16); ++i )
              {
                v81 = *(_QWORD *)(v78 + 8 * v77 + 8);
                v82 = *(_DWORD *)(v81 + 8i64 * i);
                v83 = *(_DWORD *)(v81 + 8i64 * i + 4) == 1;
                m_pPointer = (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer;
                if ( v83 )
                  UFG::RigidBody::DisableFracturePartByGuid(m_pPointer, v82);
                else
                  UFG::RigidBody::EnableFracturePartByGuid(m_pPointer, v82, FRACTURE_STRENGTH_NORMAL);
              }
            }
            v79 = v79->mNext;
          }
          while ( v79 != (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)&v2->mFractureList );
          v5 = v177;
        }
      }
      v76 = result.mUID + 1;
      result.mUID = v76;
    }
    while ( (unsigned int)v76 < v5[22].mUID );
  }
  v86 = v5[34].mUID;
  v87 = &customCaption;
  if ( v86 && (v86 != 1 || **(_BYTE **)&v5[32].mUID) )
  {
    if ( v5[34].mUID )
      v88 = *(const char **)&v5[32].mUID;
    else
      v88 = &customCaption;
    UFG::qPrintf("StateMachineComponent debug print: (%x) %s\n", v2, v88);
  }
  v89 = v5[30].mUID;
  if ( v89 && (v89 != 1 || **(_BYTE **)&v5[28].mUID) )
  {
    v90 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v90 )
    {
      v91 = v90->m_Flags;
      if ( (v91 & 0x4000) != 0 )
      {
        v92 = v90->m_Components.p[7].m_pComponent;
      }
      else if ( v91 >= 0 )
      {
        if ( (v91 & 0x2000) != 0 )
        {
          v92 = v90->m_Components.p[6].m_pComponent;
        }
        else
        {
          v93 = (v91 & 0x1000) != 0
              ? UFG::SimObjectGame::GetComponentOfTypeHK(v90, UFG::ActionTreeComponent::_TypeUID)
              : UFG::SimObject::GetComponentOfType(v90, UFG::ActionTreeComponent::_TypeUID);
          v92 = v93;
        }
      }
      else
      {
        v92 = v90->m_Components.p[7].m_pComponent;
      }
      if ( v92 )
      {
        v94 = (ActionPath *)UFG::qMalloc(0x10ui64, UFG::gGlobalNewName, 0i64);
        v95 = v94;
        *(_QWORD *)&name[0].mUID = v94;
        if ( v94 )
        {
          if ( v5[30].mUID )
            v96 = *(const char **)&v5[28].mUID;
          else
            v96 = &customCaption;
          v94->mPath.mCount = 0;
          v94->mPath.mData.mOffset = 0i64;
          ActionPath::Append(v94, v96);
        }
        else
        {
          v95 = 0i64;
        }
        v97 = ActionNode::Find(v95, 0i64);
        v98 = (ActionNodePlayable *)v97;
        if ( v97 )
        {
          v99 = (__int64)v97->vfptr[3].GetClassname(v97);
          if ( !v99
            || (*(unsigned __int8 (__fastcall **)(__int64, UFG::qNode<UFG::RebindingComponentHandleBase,UFG::RebindingComponentHandleBase> *))(*(_QWORD *)v99 + 80i64))(
                 v99,
                 v92[2].m_BoundComponentHandles.mNode.mNext) )
          {
            ActionController::Play((ActionController *)&v92[3], v98, 0);
          }
        }
        *(_QWORD *)&name[0].mUID = v95;
        if ( v95 )
        {
          if ( v95->mPath.mCount >= 0 )
          {
            mOffset = v95->mPath.mData.mOffset;
            if ( mOffset && (UFG::qOffset64<ActionID *> *)((char *)&v95->mPath.mData + mOffset) )
            {
              v101 = v95->mPath.mData.mOffset;
              if ( v101 )
                v102 = (char *)&v95->mPath.mData + v101;
              else
                v102 = 0i64;
              operator delete[](v102);
            }
            v95->mPath.mData.mOffset = 0i64;
            v95->mPath.mCount &= 0x80000000;
          }
          operator delete[](v95);
        }
      }
    }
  }
  if ( LOBYTE(v5[96].mUID) )
  {
    *(_DWORD *)(*(_QWORD *)&v2->mRigidBodyComponent.m_pPointer[2].m_TypeUID + 88i64) |= 2u;
    v103 = 1;
    v104 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v104 )
    {
      v105 = v104->m_Flags;
      if ( (v105 & 0x4000) != 0 )
      {
        v106 = v104->m_Components.p[9].m_pComponent;
      }
      else if ( v105 >= 0 )
      {
        if ( (v105 & 0x2000) != 0 )
          v106 = v104->m_Components.p[8].m_pComponent;
        else
          v106 = (v105 & 0x1000) != 0
               ? UFG::SimObjectGame::GetComponentOfTypeHK(v104, UFG::BaseAnimationComponent::_TypeUID)
               : UFG::SimObject::GetComponentOfType(v104, UFG::BaseAnimationComponent::_TypeUID);
      }
      else
      {
        v106 = v104->m_Components.p[9].m_pComponent;
      }
      if ( v106 )
      {
        v107 = v106[2].m_SafePointerList.mNode.mNext;
        if ( v107 )
          LODWORD(v107[5].mPrev) |= 1u;
      }
    }
  }
  else
  {
    v103 = 0;
  }
  if ( BYTE1(v5[98].mUID) )
    UFG::RigidBody::SetCollisionLayer((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, 0x15u, -1, -1, -1);
  if ( BYTE2(v5[98].mUID) )
  {
    v108 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v108 )
    {
      v109 = v108->m_Flags;
      if ( (v109 & 0x4000) != 0 )
      {
        v110 = v108->m_Components.p[14].m_pComponent;
      }
      else if ( v109 >= 0 )
      {
        if ( (v109 & 0x2000) != 0 )
          v110 = v108->m_Components.p[9].m_pComponent;
        else
          v110 = (v109 & 0x1000) != 0
               ? UFG::SimObjectGame::GetComponentOfTypeHK(v108, UFG::CompositeDrawableComponent::_TypeUID)
               : UFG::SimObject::GetComponentOfType(v108, UFG::CompositeDrawableComponent::_TypeUID);
      }
      else
      {
        v110 = v108->m_Components.p[14].m_pComponent;
      }
      if ( v110 )
      {
        v111 = (Render::IDecalScenery *)&v110[1];
LABEL_184:
        Render::IDecalScenery::RemoveAttachedDecals(v111, 0xFFFFFFFF);
        goto LABEL_185;
      }
    }
    v112 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v112 )
    {
      v113 = v112->m_Flags;
      if ( (v113 & 0x4000) != 0 || v113 < 0 || (v113 & 0x2000) != 0 || (v113 & 0x1000) != 0 )
        v114 = UFG::SimObjectGame::GetComponentOfTypeHK(v112, UFG::PhysicsRenderHelper::_TypeUID);
      else
        v114 = UFG::SimObject::GetComponentOfType(v112, UFG::PhysicsRenderHelper::_TypeUID);
      if ( v114 )
      {
        v115 = *(Render::IDecalScenery ***)&v114[1].m_TypeUID;
        if ( v115 )
        {
          v111 = *v115;
          goto LABEL_184;
        }
      }
    }
  }
LABEL_185:
  if ( LOBYTE(v5[92].mUID) )
    UFG::RigidBody::SetMotionType((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, v5[93].mUID);
  if ( LOBYTE(v5[94].mUID) )
  {
    v116 = (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer;
    if ( v116 )
    {
      m_collisionFilterInfo_high = 0;
      v118 = 0;
      v119 = 0;
      mBody = v116->mBody;
      if ( mBody )
      {
        m_collisionFilterInfo_high = HIWORD(mBody->m_collidable.m_broadPhaseHandle.m_collisionFilterInfo);
        v118 = (mBody->m_collidable.m_broadPhaseHandle.m_collisionFilterInfo >> 5) & 0x1F;
        v119 = (mBody->m_collidable.m_broadPhaseHandle.m_collisionFilterInfo >> 10) & 0x1F;
      }
      UFG::RigidBody::SetCollisionLayer(v116, v5[95].mUID, m_collisionFilterInfo_high, v118, v119);
    }
  }
  v121 = v5[71].mUID;
  if ( v121 != -1 )
  {
    v177 = name;
    name[0].mUID = v121;
    ConstraintByName = UFG::RigidBody::GetConstraintByName(
                         (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
                         (int *)name);
    v123 = ConstraintByName;
    if ( ConstraintByName )
    {
      if ( hkpConstraintInstance::isEnabled(ConstraintByName->mConstraintInstance, (hkBool *)&result)->m_bool )
        hkpConstraintInstance::disable(v123->mConstraintInstance);
    }
    else
    {
      v124 = UFG::qSymbol::as_cstr_dbg((UFG::qSymbolUC *)&v5[71]);
      UFG::qPrintf("warning, state machine is trying to disable non-existing constraint %s\n", v124);
    }
  }
  v125 = v5[72].mUID;
  if ( v125 != -1 )
  {
    v177 = name;
    name[0].mUID = v125;
    v126 = UFG::RigidBody::GetConstraintByName((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (int *)name);
    v127 = v126;
    if ( v126 )
    {
      if ( !hkpConstraintInstance::isEnabled(v126->mConstraintInstance, (hkBool *)&result)->m_bool )
        hkpConstraintInstance::enable(v127->mConstraintInstance);
    }
    else
    {
      v128 = UFG::qSymbol::as_cstr_dbg((UFG::qSymbolUC *)&v5[71]);
      UFG::qPrintf("warning, state machine is trying to disable non-existing constraint %s\n", v128);
    }
  }
  if ( BYTE2(v5[97].mUID) )
    UFG::RigidBody::EnableAllConstraints((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer);
  if ( HIBYTE(v5[97].mUID) )
    UFG::RigidBody::DisableAllConstraints((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer);
  if ( LOBYTE(v5[98].mUID) )
    UFG::RigidBody::DeleteAllConstraints((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer);
  if ( v5[86].mUID != -1 )
  {
    pTrackEnumBinding.mPrev = &pTrackEnumBinding;
    pTrackEnumBinding.mNext = &pTrackEnumBinding;
    pTrackEnumBinding.m_EnumSymbol.mUID = -1;
    pTrackEnumBinding.m_EnumSymbol = v5[86];
    *(_QWORD *)&pTrackEnumBinding.m_EnumValue = 0i64;
    pTrackEnumBinding.m_uEnumUID = 0;
    if ( gVisualTreatmentEnum.m_enumLists.size )
    {
      TracksEnum<unsigned long>::ResolveBinding(&gVisualTreatmentEnum, &pTrackEnumBinding);
    }
    else
    {
      mPrev = gVisualTreatmentEnum.m_UnresolvedTracksEnumBindingList.mNode.mPrev;
      gVisualTreatmentEnum.m_UnresolvedTracksEnumBindingList.mNode.mPrev->mNext = &pTrackEnumBinding;
      pTrackEnumBinding.mPrev = mPrev;
      pTrackEnumBinding.mNext = &gVisualTreatmentEnum.m_UnresolvedTracksEnumBindingList.mNode;
      gVisualTreatmentEnum.m_UnresolvedTracksEnumBindingList.mNode.mPrev = &pTrackEnumBinding;
    }
    m_EnumValue = pTrackEnumBinding.m_EnumValue;
    v131 = pTrackEnumBinding.mPrev;
    v132 = pTrackEnumBinding.mNext;
    pTrackEnumBinding.mPrev->mNext = pTrackEnumBinding.mNext;
    v132->mPrev = v131;
    pTrackEnumBinding.mPrev = &pTrackEnumBinding;
    pTrackEnumBinding.mNext = &pTrackEnumBinding;
    UFG::RenderWorld::VisualTreatmentPostEffect_StartVisualTreatment(m_EnumValue, 0, 0);
  }
  v133 = v5[90].mUID;
  if ( v133 && (v133 != 1 || **(_BYTE **)&v5[88].mUID) )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (UFG::qMatrix44 *)&transformOut);
    *(_QWORD *)&name[0].mUID = 0i64;
    UFG::OneShotPool::GetOneShotHandle((UFG::OneShotHandle *)name, (UFG::qMatrix44 *)&transformOut);
    if ( UFG::OneShotHandle::IsValid((UFG::OneShotHandle *)name) )
    {
      UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, &mat);
      if ( v5[90].mUID )
        v134 = *(const char **)&v5[88].mUID;
      else
        v134 = &customCaption;
      v135 = UFG::qToUInt32(v134, 0);
      if ( !v135 )
      {
        if ( v5[90].mUID )
          v87 = *(const char **)&v5[88].mUID;
        v135 = UFG::TiDo::CalcWwiseUid(v87);
      }
      UFG::OneShot::Play(*(UFG::OneShot **)&name[0].mUID, v135);
    }
    UFG::OneShotHandle::Release((UFG::OneShotHandle *)name);
  }
  if ( HIBYTE(v5[98].mUID) )
  {
    v136 = (UFG::SimObjectGame *)v2->m_pSimObject;
    if ( v136 )
    {
      v137 = v136->m_Flags;
      if ( (v137 & 0x4000) != 0 || v137 < 0 || (v137 & 0x2000) != 0 || (v137 & 0x1000) != 0 )
        v138 = (UFG::PhysicsRenderHelper *)UFG::SimObjectGame::GetComponentOfTypeHK(
                                             v136,
                                             UFG::PhysicsRenderHelper::_TypeUID);
      else
        v138 = (UFG::PhysicsRenderHelper *)UFG::SimObject::GetComponentOfType(v136, UFG::PhysicsRenderHelper::_TypeUID);
      if ( v138 )
        UFG::PhysicsRenderHelper::DisableSelfIllumination(v138);
    }
  }
  if ( LOBYTE(v5[99].mUID) )
  {
    if ( UFG::RigidBody::GetPercentFractured((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer) >= *(float *)&v5[76].mUID )
    {
      v139 = (UFG::SimObjectGame *)v2->m_pSimObject;
      if ( v139 )
      {
        v140 = v139->m_Flags;
        if ( (v140 & 0x4000) != 0 || v140 < 0 || (v140 & 0x2000) != 0 || (v140 & 0x1000) != 0 )
          v141 = UFG::SimObjectGame::GetComponentOfTypeHK(v139, UFG::ParkourComponent::_TypeUID);
        else
          v141 = UFG::SimObject::GetComponentOfType(v139, UFG::ParkourComponent::_TypeUID);
        if ( v141 )
          LODWORD(v141[2].m_BoundComponentHandles.mNode.mNext) |= 8u;
      }
    }
  }
  if ( BYTE1(v5[99].mUID) )
  {
    if ( UFG::RigidBody::GetPercentFractured((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer) >= *(float *)&v5[77].mUID )
    {
      v142 = (UFG::SimObjectGame *)v2->m_pSimObject;
      if ( v142 )
      {
        v143 = v142->m_Flags;
        if ( (v143 & 0x4000) != 0 || v143 < 0 || (v143 & 0x2000) != 0 || (v143 & 0x1000) != 0 )
          v144 = UFG::SimObjectGame::GetComponentOfTypeHK(v142, UFG::DynamicCoverComponent::_TypeUID);
        else
          v144 = UFG::SimObject::GetComponentOfType(v142, UFG::DynamicCoverComponent::_TypeUID);
        if ( v144 )
          LOBYTE(v144[2].vfptr) = 0;
      }
    }
  }
  if ( BYTE2(v5[99].mUID) )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, &mat);
    pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)d.v3;
    v145 = mat.v0;
    mat.v0 = (UFG::qVector4)_mm_mul_ps(_mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 0), (__m128)mat.v0);
    v146 = _mm_add_ps(
             _mm_mul_ps(
               _mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 255),
               *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID),
             _mm_add_ps(
               _mm_add_ps(
                 _mm_add_ps(_mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 0), (__m128)v145), (__m128)0i64),
                 _mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 85), (__m128)mat.v1)),
               _mm_mul_ps(
                 _mm_shuffle_ps(
                   (__m128)pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >,
                   (__m128)pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >,
                   170),
                 (__m128)d.v3)));
    transformOut.hkReferencedObject = (hkReferencedObject)_mm_add_ps(
                                                            _mm_add_ps(
                                                              _mm_add_ps(
                                                                _mm_add_ps((__m128)mat.v0, _xmm),
                                                                _mm_mul_ps(
                                                                  _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 85),
                                                                  (__m128)mat.v1)),
                                                              _mm_mul_ps(
                                                                _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 170),
                                                                (__m128)d.v3)),
                                                            _mm_mul_ps(
                                                              _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 255),
                                                              *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_rigidBodies = (hkArray<hkpRigidBody *,hkContainerHeapAllocator>)_mm_add_ps(
                                                                                     _mm_add_ps(
                                                                                       _mm_add_ps(
                                                                                         _mm_add_ps(
                                                                                           _mm_mul_ps(
                                                                                             _mm_shuffle_ps(
                                                                                               (__m128)d.v1,
                                                                                               (__m128)d.v1,
                                                                                               0),
                                                                                             (__m128)v145),
                                                                                           (__m128)0i64),
                                                                                         _mm_mul_ps(
                                                                                           _mm_shuffle_ps(
                                                                                             (__m128)d.v1,
                                                                                             (__m128)d.v1,
                                                                                             85),
                                                                                           (__m128)mat.v1)),
                                                                                       _mm_mul_ps(
                                                                                         _mm_shuffle_ps(
                                                                                           (__m128)d.v1,
                                                                                           (__m128)d.v1,
                                                                                           170),
                                                                                         (__m128)d.v3)),
                                                                                     _mm_mul_ps(
                                                                                       _mm_shuffle_ps(
                                                                                         (__m128)d.v1,
                                                                                         (__m128)d.v1,
                                                                                         255),
                                                                                       *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_constraints = (hkArray<hkpConstraintInstance *,hkContainerHeapAllocator>)_mm_add_ps(
                                                                                              _mm_add_ps(
                                                                                                _mm_add_ps(
                                                                                                  _mm_add_ps(
                                                                                                    _mm_mul_ps(_mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 0), (__m128)v145),
                                                                                                    (__m128)0i64),
                                                                                                  _mm_mul_ps(
                                                                                                    _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 85),
                                                                                                    (__m128)mat.v1)),
                                                                                                _mm_mul_ps(
                                                                                                  _mm_shuffle_ps(
                                                                                                    (__m128)d.v2,
                                                                                                    (__m128)d.v2,
                                                                                                    170),
                                                                                                  (__m128)d.v3)),
                                                                                              _mm_mul_ps(
                                                                                                _mm_shuffle_ps(
                                                                                                  (__m128)d.v2,
                                                                                                  (__m128)d.v2,
                                                                                                  255),
                                                                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    LODWORD(pTrackEnumBinding.mPrev) = v146.m128_i32[0];
    HIDWORD(pTrackEnumBinding.mPrev) = _mm_shuffle_ps(v146, v146, 85).m128_u32[0];
    LODWORD(pTrackEnumBinding.mNext) = _mm_shuffle_ps(v146, v146, 170).m128_u32[0];
    TrafficLightNearPosition = UFG::RoadNetworkResource::GetTrafficLightNearPosition(
                                 UFG::gpRoadNetworkResource,
                                 (UFG::qVector3 *)&pTrackEnumBinding);
    if ( TrafficLightNearPosition )
      UFG::RoadNetworkTrafficLightLocation::DisableEffects(TrafficLightNearPosition);
  }
  if ( HIBYTE(v5[99].mUID) )
  {
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, &mat);
    v148 = _mm_add_ps(
             _mm_add_ps(
               _mm_add_ps(
                 _mm_add_ps((__m128)0i64, _mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 0), (__m128)mat.v0)),
                 _mm_mul_ps(_mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 85), (__m128)mat.v1)),
               _mm_mul_ps(
                 _mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 170),
                 (__m128)pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)),
             _mm_mul_ps(
               _mm_shuffle_ps((__m128)d.v3, (__m128)d.v3, 255),
               *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.hkReferencedObject = (hkReferencedObject)_mm_add_ps(
                                                            _mm_add_ps(
                                                              _mm_add_ps(
                                                                _mm_add_ps(
                                                                  (__m128)0i64,
                                                                  _mm_mul_ps(
                                                                    _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 0),
                                                                    (__m128)mat.v0)),
                                                                _mm_mul_ps(
                                                                  _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 85),
                                                                  (__m128)mat.v1)),
                                                              _mm_mul_ps(
                                                                _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 170),
                                                                (__m128)pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)),
                                                            _mm_mul_ps(
                                                              _mm_shuffle_ps((__m128)d.v0, (__m128)d.v0, 255),
                                                              *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_rigidBodies = (hkArray<hkpRigidBody *,hkContainerHeapAllocator>)_mm_add_ps(
                                                                                     _mm_add_ps(
                                                                                       _mm_add_ps(
                                                                                         _mm_add_ps(
                                                                                           (__m128)0i64,
                                                                                           _mm_mul_ps(
                                                                                             _mm_shuffle_ps(
                                                                                               (__m128)d.v1,
                                                                                               (__m128)d.v1,
                                                                                               0),
                                                                                             (__m128)mat.v0)),
                                                                                         _mm_mul_ps(
                                                                                           _mm_shuffle_ps(
                                                                                             (__m128)d.v1,
                                                                                             (__m128)d.v1,
                                                                                             85),
                                                                                           (__m128)mat.v1)),
                                                                                       _mm_mul_ps(
                                                                                         _mm_shuffle_ps(
                                                                                           (__m128)d.v1,
                                                                                           (__m128)d.v1,
                                                                                           170),
                                                                                         (__m128)pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)),
                                                                                     _mm_mul_ps(
                                                                                       _mm_shuffle_ps(
                                                                                         (__m128)d.v1,
                                                                                         (__m128)d.v1,
                                                                                         255),
                                                                                       *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    transformOut.m_constraints = (hkArray<hkpConstraintInstance *,hkContainerHeapAllocator>)_mm_add_ps(
                                                                                              _mm_add_ps(
                                                                                                _mm_add_ps(
                                                                                                  _mm_add_ps(
                                                                                                    (__m128)0i64,
                                                                                                    _mm_mul_ps(_mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 0), (__m128)mat.v0)),
                                                                                                  _mm_mul_ps(
                                                                                                    _mm_shuffle_ps((__m128)d.v2, (__m128)d.v2, 85),
                                                                                                    (__m128)mat.v1)),
                                                                                                _mm_mul_ps(
                                                                                                  _mm_shuffle_ps(
                                                                                                    (__m128)d.v2,
                                                                                                    (__m128)d.v2,
                                                                                                    170),
                                                                                                  (__m128)pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)),
                                                                                              _mm_mul_ps(
                                                                                                _mm_shuffle_ps(
                                                                                                  (__m128)d.v2,
                                                                                                  (__m128)d.v2,
                                                                                                  255),
                                                                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID));
    LODWORD(pTrackEnumBinding.mPrev) = v148.m128_i32[0];
    HIDWORD(pTrackEnumBinding.mPrev) = _mm_shuffle_ps(v148, v148, 85).m128_u32[0];
    LODWORD(pTrackEnumBinding.mNext) = _mm_shuffle_ps(v148, v148, 170).m128_u32[0];
    v149 = UFG::RoadNetworkResource::GetTrafficLightNearPosition(
             UFG::gpRoadNetworkResource,
             (UFG::qVector3 *)&pTrackEnumBinding);
    if ( v149 )
      UFG::RoadNetworkTrafficLightLocation::EnableEffects(v149);
  }
  if ( v5[83].mUID != -1 )
  {
    mPhantomRigidBody = v2->mPhantomRigidBody;
    if ( mPhantomRigidBody )
    {
      UFG::PhantomCallback::DestroyPhantom(mPhantomRigidBody);
      v2->mPhantomRigidBody = 0i64;
    }
    UFG::RigidBody::GetTransform((UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer, (UFG::qMatrix44 *)&transformOut);
    mat.v0 = UFG::qMatrix44::msIdentity.v0;
    mat.v1 = UFG::qMatrix44::msIdentity.v1;
    pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)UFG::qMatrix44::msIdentity.v2;
    v151 = v5[45].mUID;
    v152 = v5[46].mUID;
    v153 = v5[47].mUID;
    pTrackEnumBinding.m_EnumSymbol = v5[44];
    pTrackEnumBinding.m_EnumValue = v151;
    pTrackEnumBinding.m_uEnumIndex = v152;
    pTrackEnumBinding.m_uEnumUID = v153;
    mat.v0 = (UFG::qVector4)_mm_mul_ps(
                              _mm_shuffle_ps(
                                (__m128)UFG::qMatrix44::msIdentity.v0,
                                (__m128)UFG::qMatrix44::msIdentity.v0,
                                0),
                              (__m128)transformOut.hkReferencedObject);
    mat.v0 = (UFG::qVector4)_mm_add_ps(
                              _mm_add_ps(
                                _mm_add_ps(
                                  _mm_add_ps((__m128)mat.v0, _xmm),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v0,
                                      (__m128)UFG::qMatrix44::msIdentity.v0,
                                      85),
                                    (__m128)transformOut.m_rigidBodies)),
                                _mm_mul_ps(
                                  _mm_shuffle_ps(
                                    (__m128)UFG::qMatrix44::msIdentity.v0,
                                    (__m128)UFG::qMatrix44::msIdentity.v0,
                                    170),
                                  (__m128)transformOut.m_constraints)),
                              _mm_mul_ps(
                                _mm_shuffle_ps(
                                  (__m128)UFG::qMatrix44::msIdentity.v0,
                                  (__m128)UFG::qMatrix44::msIdentity.v0,
                                  255),
                                (__m128)transformOut.m_actions));
    mat.v1 = (UFG::qVector4)_mm_add_ps(
                              _mm_add_ps(
                                _mm_add_ps(
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v1,
                                      (__m128)UFG::qMatrix44::msIdentity.v1,
                                      85),
                                    (__m128)transformOut.m_rigidBodies),
                                  _mm_add_ps(
                                    _mm_mul_ps(
                                      _mm_shuffle_ps(
                                        (__m128)UFG::qMatrix44::msIdentity.v1,
                                        (__m128)UFG::qMatrix44::msIdentity.v1,
                                        0),
                                      (__m128)transformOut.hkReferencedObject),
                                    (__m128)0i64)),
                                _mm_mul_ps(
                                  _mm_shuffle_ps(
                                    (__m128)UFG::qMatrix44::msIdentity.v1,
                                    (__m128)UFG::qMatrix44::msIdentity.v1,
                                    170),
                                  (__m128)transformOut.m_constraints)),
                              _mm_mul_ps(
                                _mm_shuffle_ps(
                                  (__m128)UFG::qMatrix44::msIdentity.v1,
                                  (__m128)UFG::qMatrix44::msIdentity.v1,
                                  255),
                                (__m128)transformOut.m_actions));
    pTrackEnumBinding.UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> > = (UFG::qNode<TracksEnumBinding<unsigned long>,TracksEnumBinding<unsigned long> >)_mm_add_ps(_mm_add_ps(_mm_add_ps(_mm_add_ps(_mm_mul_ps(_mm_shuffle_ps((__m128)UFG::qMatrix44::msIdentity.v2, (__m128)UFG::qMatrix44::msIdentity.v2, 0), (__m128)transformOut.hkReferencedObject), (__m128)0i64), _mm_mul_ps(_mm_shuffle_ps((__m128)UFG::qMatrix44::msIdentity.v2, (__m128)UFG::qMatrix44::msIdentity.v2, 85), (__m128)transformOut.m_rigidBodies)), _mm_mul_ps(_mm_shuffle_ps((__m128)UFG::qMatrix44::msIdentity.v2, (__m128)UFG::qMatrix44::msIdentity.v2, 170), (__m128)transformOut.m_constraints)), _mm_mul_ps(_mm_shuffle_ps((__m128)UFG::qMatrix44::msIdentity.v2, (__m128)UFG::qMatrix44::msIdentity.v2, 255), (__m128)transformOut.m_actions));
    *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID = _mm_add_ps(
                                                        _mm_add_ps(
                                                          _mm_add_ps(
                                                            _mm_add_ps(
                                                              (__m128)0i64,
                                                              _mm_mul_ps(
                                                                _mm_shuffle_ps(
                                                                  *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                                  *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                                  0),
                                                                (__m128)transformOut.hkReferencedObject)),
                                                            _mm_mul_ps(
                                                              _mm_shuffle_ps(
                                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                                *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                                85),
                                                              (__m128)transformOut.m_rigidBodies)),
                                                          _mm_mul_ps(
                                                            _mm_shuffle_ps(
                                                              *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                              *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                              170),
                                                            (__m128)transformOut.m_constraints)),
                                                        _mm_mul_ps(
                                                          _mm_shuffle_ps(
                                                            *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                            *(__m128 *)&pTrackEnumBinding.m_EnumSymbol.mUID,
                                                            255),
                                                          (__m128)transformOut.m_actions));
    v2->mPhantomRigidBody = (hkpRigidBody *)UFG::PhantomCallback::CreatePhantom(
                                              (UFG::qVector3 *)&v5[54],
                                              &mat,
                                              v5[83].mUID);
    LODWORD(v2->mPhantomTimer) = (UFG::qSymbol)v5[81].mUID;
  }
  v154 = *(float *)&v5[101].mUID;
  if ( v154 > 0.0 )
    v2->mTimer = v154;
  if ( v5[102].mUID != -1 )
  {
    v155 = UFG::qMalloc(0x58ui64, UFG::gGlobalNewName, 0i64);
    *(_QWORD *)&name[0].mUID = v155;
    if ( v155 )
    {
      UFG::StateMachineEvent::StateMachineEvent((UFG::StateMachineEvent *)v155, v5 + 102, v2->m_pSimObject);
      v4 = v156;
    }
    UFG::EventDispatcher::QueueEvent(&UFG::EventDispatcher::mInstance, v4);
  }
  if ( *(float *)&v5[63].mUID > 0.0 )
  {
    v157 = (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer;
    if ( v157 )
    {
      UFG::RigidBody::GetTransform(v157, &mat);
      v158 = *(float *)&v5[63].mUID * *(float *)&v5[57].mUID;
      v159 = *(float *)&v5[63].mUID * *(float *)&v5[58].mUID;
      v160 = *(float *)&v5[63].mUID * *(float *)&v5[59].mUID;
      *(float *)&result.mUID = (float)((float)((float)(mat.v1.x * v159) + (float)(mat.v0.x * v158))
                                     + (float)(*(float *)&pTrackEnumBinding.mPrev * v160))
                             + (float)(*(float *)&pTrackEnumBinding.m_EnumSymbol.mUID * 0.0);
      *(float *)&name[0].mUID = (float)((float)((float)(mat.v1.y * v159) + (float)(mat.v0.y * v158))
                                      + (float)(*((float *)&pTrackEnumBinding.mPrev + 1) * v160))
                              + (float)(*(float *)&pTrackEnumBinding.m_EnumValue * 0.0);
      v161 = (float)((float)(mat.v1.z * v159) + (float)(mat.v0.z * v158))
           + (float)(*(float *)&pTrackEnumBinding.mNext * v160);
      v162 = *(float *)&v5[60].mUID;
      v163 = *(float *)&v5[61].mUID;
      v164 = *(float *)&v5[62].mUID;
      *(float *)&pTrackEnumBinding.mPrev = (float)((float)((float)(mat.v1.x * v163) + (float)(mat.v0.x * v162))
                                                 + (float)(*(float *)&pTrackEnumBinding.mPrev * v164))
                                         + *(float *)&pTrackEnumBinding.m_EnumSymbol.mUID;
      *((float *)&pTrackEnumBinding.mPrev + 1) = (float)((float)((float)(mat.v1.y * v163) + (float)(mat.v0.y * v162))
                                                       + (float)(*((float *)&pTrackEnumBinding.mPrev + 1) * v164))
                                               + *(float *)&pTrackEnumBinding.m_EnumValue;
      *(float *)&pTrackEnumBinding.mNext = (float)((float)((float)(mat.v1.z * v163) + (float)(mat.v0.z * v162))
                                                 + (float)(*(float *)&pTrackEnumBinding.mNext * v164))
                                         + *(float *)&pTrackEnumBinding.m_uEnumIndex;
      LODWORD(mat.v0.x) = (UFG::qSymbol)result.mUID;
      LODWORD(mat.v0.y) = name[0];
      mat.v0.z = v161 + (float)(*(float *)&pTrackEnumBinding.m_uEnumIndex * 0.0);
      UFG::RigidBody::ApplyLinearImpulse(
        (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer,
        (UFG::qVector3 *)&mat,
        (UFG::qVector3 *)&pTrackEnumBinding);
    }
  }
  v165 = *(float *)&v5[67].mUID;
  if ( v165 > 0.0 )
  {
    v166 = (UFG::RigidBody *)v2->mRigidBodyComponent.m_pPointer;
    if ( v166 )
    {
      *(float *)&pTrackEnumBinding.mPrev = v165 * *(float *)&v5[64].mUID;
      *((float *)&pTrackEnumBinding.mPrev + 1) = v165 * *(float *)&v5[65].mUID;
      *(float *)&pTrackEnumBinding.mNext = v165 * *(float *)&v5[66].mUID;
      UFG::RigidBody::ApplyAngularImpulse(v166, (UFG::qVector3 *)&pTrackEnumBinding);
    }
  }
  v167 = v103;
  if ( v2->mSubPartIndex == -1 )
  {
    v168 = *(float *)&v5[82].mUID;
    if ( v168 != -1.0 )
      *(float *)&v2->mRigidBodyComponent.m_pPointer[7].m_SafePointerList.mNode.mPrev = v168;
  }
  return v167;
}

// File Line: 985
// RVA: 0x454C90
void __fastcall UFG::StateMachineComponent::AddChildMachine(
        UFG::StateMachineComponent *this,
        UFG::qReflectInventoryBase *smc)
{
  UFG::qArray<UFG::qReflectInventoryBase *,0> *p_mChildMachines; // rdi
  __int64 size; // rsi
  unsigned int capacity; // edx
  unsigned int v6; // ebx
  unsigned int v7; // edx
  UFG::qReflectInventoryBase **p; // rax

  p_mChildMachines = (UFG::qArray<UFG::qReflectInventoryBase *,0> *)&this->mChildMachines;
  size = this->mChildMachines.size;
  capacity = this->mChildMachines.capacity;
  v6 = size + 1;
  if ( (int)size + 1 > capacity )
  {
    if ( capacity )
      v7 = 2 * capacity;
    else
      v7 = 1;
    for ( ; v7 < v6; v7 *= 2 )
      ;
    if ( v7 <= 2 )
      v7 = 2;
    if ( v7 - v6 > 0x10000 )
      v7 = size + 65537;
    UFG::qArray<UFG::CompositeDrawableComponent *,32>::Reallocate(p_mChildMachines, v7, "qArray.Add");
  }
  p = p_mChildMachines->p;
  p_mChildMachines->size = v6;
  p[size] = smc;
}

// File Line: 993
// RVA: 0x460B90
void __fastcall UFG::StateMachineComponent::DeleteChildMachine(UFG::StateMachineComponent *this, int subPartIndex)
{
  unsigned int size; // r9d
  __int64 v3; // rax
  UFG::StateMachineComponent **p; // rcx
  UFG::StateMachineComponent **i; // r8
  __int64 v7; // rbx
  UFG::StateMachineComponent *v8; // rcx

  size = this->mChildMachines.size;
  v3 = 0i64;
  if ( size )
  {
    p = this->mChildMachines.p;
    for ( i = p; !*i || (*i)->mSubPartIndex != subPartIndex; ++i )
    {
      v3 = (unsigned int)(v3 + 1);
      if ( (unsigned int)v3 >= size )
        return;
    }
    v7 = v3;
    v8 = p[v3];
    if ( v8 )
      v8->vfptr->__vecDelDtor(v8, 1u);
    this->mChildMachines.p[v7] = 0i64;
  }
}

// File Line: 1008
// RVA: 0x46B550
void __fastcall UFG::StateMachineComponent::KillEffects(UFG::StateMachineComponent *this)
{
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *mNext; // rax
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **i; // rdi
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v4; // rcx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *mPrev; // rdx

  mNext = this->mAttachedEffects.mNode.mNext;
  for ( i = &this->mFractureList.mNode.mNext;
        &mNext[-1].mNext != (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> **)i;
        mNext = this->mAttachedEffects.mNode.mNext )
  {
    v4 = mNext->mNext;
    mPrev = mNext->mPrev;
    mPrev->mNext = v4;
    v4->mPrev = mPrev;
    mNext->mPrev = mNext;
    mNext->mNext = mNext;
    if ( mNext != (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *)8 )
      ((void (__fastcall *)(UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> **, __int64))mNext[-1].mNext->mPrev)(
        &mNext[-1].mNext,
        1i64);
  }
}

// File Line: 1033
// RVA: 0x4663D0
float __fastcall UFG::StateMachineComponent::GetDamage(UFG::StateMachineComponent *this)
{
  return 1.0 - this->mHealth;
}

// File Line: 1040
// RVA: 0x474A70
void __fastcall UFG::StateMachineComponent::SetDamage(UFG::StateMachineComponent *this, float damage)
{
  float v2; // xmm0_4

  v2 = 1.0 - damage;
  if ( (float)(1.0 - damage) <= 0.0 )
  {
    v2 = 0.0;
  }
  else if ( v2 >= 1.0 )
  {
    LODWORD(this->mHealth) = (_DWORD)FLOAT_1_0;
    return;
  }
  this->mHealth = v2;
}

// File Line: 1047
// RVA: 0x458220
void __fastcall UFG::StateMachineComponent::ApplyImpactEffect(UFG::StateMachineComponent *this, UFG::qMatrix44 *mat)
{
  UFG::qReflectObject *mData; // r8
  int mCurrentNodeIndex; // eax
  __int64 v6; // rbx
  UFG::allocator::free_link *v7; // rax
  UFG::StateMachineEffectNode *v8; // rax
  UFG::StateMachineEffectNode *v9; // rsi
  UFG::qMatrix44 *v10; // rax
  UFG::qVector4 v11; // xmm3
  UFG::qVector4 v12; // xmm2
  UFG::qVector4 v13; // xmm1
  UFG::qMatrix44 mata; // [rsp+40h] [rbp-C8h] BYREF
  UFG::qMatrix44 d; // [rsp+80h] [rbp-88h] BYREF
  UFG::qMatrix44 result; // [rsp+C0h] [rbp-48h] BYREF

  mData = this->mStateMachineDefinition.mData;
  if ( mData )
  {
    mCurrentNodeIndex = this->mCurrentNodeIndex;
    if ( mCurrentNodeIndex != -1 && mCurrentNodeIndex < SLODWORD(mData[1].mBaseNode.mUID) )
    {
      v6 = (__int64)&mData[1].vfptr[26 * (unsigned int)mCurrentNodeIndex];
      if ( v6 )
      {
        if ( *(_DWORD *)(v6 + 340) != -1 )
        {
          v7 = UFG::qMemoryPool::Allocate(&gPhysicsMemoryPool, 0x50ui64, "StateMachineEffectNode", 0i64, 1u);
          if ( v7 )
          {
            UFG::StateMachineEffectNode::StateMachineEffectNode((UFG::StateMachineEffectNode *)v7);
            v9 = v8;
          }
          else
          {
            v9 = 0i64;
          }
          v9->mNameUid.mUID = *(_DWORD *)(v6 + 340);
          v9->mAttachToObject = 1;
          UFG::RigidBody::GetTransform((UFG::RigidBody *)this->mRigidBodyComponent.m_pPointer, &mata);
          UFG::qInverseAffine(&d, &mata);
          v10 = UFG::qMatrix44::operator*(mat, &result, &d);
          v11 = v10->v1;
          v12 = v10->v2;
          v13 = v10->v3;
          v9->mTransform.v0 = v10->v0;
          v9->mTransform.v1 = v11;
          v9->mTransform.v2 = v12;
          v9->mTransform.v3 = v13;
          UFG::StateMachineComponent::CreateEffect(this, v9, &UFG::qMatrix44::msIdentity)->mRuntimeEffectNode = v9;
        }
      }
    }
  }
}

// File Line: 1071
// RVA: 0x458360
void __fastcall UFG::StateMachineComponent::ApplyImpactEffect(
        UFG::StateMachineComponent *this,
        UFG::qVector3 *position,
        UFG::qVector3 *normal)
{
  __m128 x_low; // xmm7
  float y; // xmm8_4
  float z; // xmm9_4
  UFG::qVector3 *v6; // rax
  __m128 v7; // xmm3
  float v8; // xmm1_4
  float x; // xmm10_4
  float v10; // xmm8_4
  float v11; // xmm9_4
  float v12; // xmm7_4
  __int128 y_low; // xmm1
  float v14; // xmm0_4
  __int128 v15; // xmm11
  __m128 z_low; // xmm3
  float v17; // xmm10_4
  __m128 v18; // xmm5
  float v19; // xmm1_4
  float v20; // xmm5_4
  __m128 v21; // xmm6
  float v22; // xmm3_4
  __m128 v23; // xmm7
  float v24; // xmm2_4
  float v25; // xmm0_4
  float v26; // xmm1_4
  float v27; // xmm5_4
  float v28; // xmm6_4
  float v29; // xmm3_4
  float v30; // xmm2_4
  UFG::qMatrix44 mat; // [rsp+20h] [rbp-A8h] BYREF

  x_low = (__m128)LODWORD(normal->x);
  y = normal->y;
  z = normal->z;
  v7 = x_low;
  v6 = &UFG::qVector3::msDirLeft;
  v7.m128_f32[0] = (float)((float)(x_low.m128_f32[0] * x_low.m128_f32[0]) + (float)(y * y)) + (float)(z * z);
  if ( COERCE_FLOAT(COERCE_UNSIGNED_INT(
                      (float)((float)(normal->x * UFG::qVector3::msDirUp.x) + (float)(y * UFG::qVector3::msDirUp.y))
                    + (float)(z * UFG::qVector3::msDirUp.z)) & _xmm) <= 0.99000001 )
    v6 = &UFG::qVector3::msDirUp;
  if ( v7.m128_f32[0] == 0.0 )
    v8 = 0.0;
  else
    v8 = 1.0 / _mm_sqrt_ps(v7).m128_f32[0];
  z_low = (__m128)LODWORD(v6->z);
  x = v6->x;
  v10 = y * v8;
  v11 = z * v8;
  v12 = x_low.m128_f32[0] * v8;
  y_low = LODWORD(v6->y);
  v14 = v6->z;
  mat.v2.y = v10;
  mat.v2.x = v12;
  v15 = y_low;
  mat.v2.z = v11;
  *(float *)&v15 = (float)(*(float *)&y_low * v11) - (float)(v14 * v10);
  z_low.m128_f32[0] = (float)(z_low.m128_f32[0] * v12) - (float)(x * v11);
  v17 = (float)(x * v10) - (float)(*(float *)&y_low * v12);
  v18 = z_low;
  v18.m128_f32[0] = (float)((float)(z_low.m128_f32[0] * z_low.m128_f32[0]) + (float)(*(float *)&v15 * *(float *)&v15))
                  + (float)(v17 * v17);
  if ( v18.m128_f32[0] == 0.0 )
    v19 = 0.0;
  else
    v19 = 1.0 / _mm_sqrt_ps(v18).m128_f32[0];
  *(float *)&v15 = *(float *)&v15 * v19;
  v21 = (__m128)v15;
  mat.v0.y = z_low.m128_f32[0] * v19;
  mat.v0.z = v17 * v19;
  LODWORD(mat.v0.x) = v15;
  v20 = (float)((float)(v17 * v19) * v10) - (float)((float)(z_low.m128_f32[0] * v19) * v11);
  v21.m128_f32[0] = (float)(*(float *)&v15 * v11) - (float)((float)(v17 * v19) * v12);
  v22 = (float)((float)(z_low.m128_f32[0] * v19) * v12) - (float)(*(float *)&v15 * v10);
  v23 = v21;
  v23.m128_f32[0] = (float)((float)(v21.m128_f32[0] * v21.m128_f32[0]) + (float)(v20 * v20)) + (float)(v22 * v22);
  if ( v23.m128_f32[0] == 0.0 )
    v24 = 0.0;
  else
    v24 = 1.0 / _mm_sqrt_ps(v23).m128_f32[0];
  v25 = position->x;
  v26 = position->y;
  v27 = v20 * v24;
  v28 = v21.m128_f32[0] * v24;
  v29 = v22 * v24;
  mat.v0.w = 0.0;
  mat.v1.w = 0.0;
  mat.v2.w = 0.0;
  mat.v3.w = 1.0;
  v30 = position->z;
  mat.v3.x = v25;
  mat.v3.y = v26;
  mat.v1.x = v27;
  mat.v1.y = v28;
  mat.v1.z = v29;
  mat.v3.z = v30;
  UFG::StateMachineComponent::ApplyImpactEffect(this, &mat);
}

// File Line: 1095
// RVA: 0x4570D0
void __fastcall UFG::StateMachineComponent::ApplyDamage(
        UFG::StateMachineComponent *this,
        float damage,
        UFG::StateMachineComponent::DamageType type,
        UFG::SimObject *source)
{
  UFG::qSafePointer<UFG::SimObject,UFG::SimObject> *p_mLastDamageSource; // r10
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *mPrev; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *mNext; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimObject>,UFG::qSafePointerNodeList> *v9; // rax
  float *mData; // r8
  UFG::SimComponent *m_pPointer; // rax

  if ( damage > 0.0 )
  {
    if ( source )
    {
      p_mLastDamageSource = &this->mLastDamageSource;
      if ( this->mLastDamageSource.m_pPointer )
      {
        mPrev = p_mLastDamageSource->mPrev;
        mNext = p_mLastDamageSource->mNext;
        mPrev->mNext = mNext;
        mNext->mPrev = mPrev;
        p_mLastDamageSource->mPrev = p_mLastDamageSource;
        p_mLastDamageSource->mNext = p_mLastDamageSource;
      }
      p_mLastDamageSource->m_pPointer = source;
      v9 = source->m_SafePointerList.UFG::qSafePointerNodeWithCallbacks<UFG::SimObject>::UFG::qSafePointerNode<UFG::SimObject>::mNode.mPrev;
      v9->mNext = p_mLastDamageSource;
      p_mLastDamageSource->mPrev = v9;
      p_mLastDamageSource->mNext = &source->m_SafePointerList.UFG::qSafePointerNodeWithCallbacks<UFG::SimObject>::UFG::qSafePointerNode<UFG::SimObject>::mNode;
      source->m_SafePointerList.UFG::qSafePointerNodeWithCallbacks<UFG::SimObject>::UFG::qSafePointerNode<UFG::SimObject>::mNode.mPrev = p_mLastDamageSource;
    }
    mData = (float *)this->mStateMachineDefinition.mData;
    if ( mData )
    {
      switch ( type )
      {
        case IMPACT_DAMAGE:
          m_pPointer = this->mRigidBodyComponent.m_pPointer;
          if ( m_pPointer && *((float *)&m_pPointer[7].m_SafePointerList.mNode.mPrev + 1) > 1.5 )
          {
            if ( damage <= mData[28] )
              damage = 0.0;
            else
              damage = damage * mData[27];
            goto $LN18_18;
          }
          break;
        case BULLET_DAMAGE:
          this->mHealth = this->mHealth - (float)(damage * mData[25]);
          break;
        case EXPLOSION_DAMAGE:
          this->mHealth = this->mHealth - (float)(damage * mData[26]);
          break;
        case ATTACK_DAMAGE:
          this->mHealth = this->mHealth - (float)(damage * mData[29]);
          break;
        case ABSOLUTE_DAMAGE:
$LN18_18:
          this->mHealth = this->mHealth - damage;
          break;
        case SET_DAMAGE_HEALTH:
          this->mHealth = damage;
          break;
        default:
          break;
      }
      if ( this->mHealth < 0.0 )
        this->mHealth = 0.0;
    }
  }
}

// File Line: 1153
// RVA: 0x47E0E0
void __fastcall UFG::StateMachineComponent::UpdateAttachedEffects(
        UFG::StateMachineComponent *this,
        UFG::qMatrix44 *mat)
{
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **p_mNext; // rbp
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **v4; // rbx
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *v5; // rsi
  __int64 v6; // rdi
  UFG::qMatrix44 result; // [rsp+20h] [rbp-48h] BYREF

  p_mNext = &this->mFractureList.mNode.mNext;
  v4 = (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **)&this->mAttachedEffects.mNode.mNext[-1].mNext;
  if ( v4 != &this->mFractureList.mNode.mNext )
  {
    do
    {
      v5 = v4[14];
      v6 = (__int64)&v4[2][-1].mNext;
      UFG::AttachedEffect::ActivateBasedOnTimeOfDay((UFG::AttachedEffect *)v4);
      if ( LODWORD(v5[4].mNext) != -1 && BYTE4(v5[4].mNext) )
      {
        if ( v4[13] )
        {
          UFG::qMatrix44::operator*((UFG::qMatrix44 *)v5, &result, mat);
          UFG::TransformNodeComponent::SetWorldTransform((UFG::TransformNodeComponent *)v4[13], &result);
        }
      }
      v4 = (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **)v6;
    }
    while ( (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> **)v6 != p_mNext );
  }
}

// File Line: 1185
// RVA: 0x448180
void __fastcall UFG::AttachedEffect::AttachedEffect(
        UFG::AttachedEffect *this,
        UFG::qMatrix44 *bodyTransform,
        UFG::StateMachineEffectNode *effect)
{
  float y; // xmm1_4
  float z; // xmm2_4
  float w; // xmm3_4
  float v7; // xmm1_4
  float v8; // xmm2_4
  float v9; // xmm3_4
  float v10; // xmm1_4
  float v11; // xmm2_4
  float v12; // xmm3_4
  float v13; // xmm1_4
  float v14; // xmm2_4
  float v15; // xmm3_4
  UFG::qSafePointer<UFG::SimComponent,UFG::TransformNodeComponent> *p_mTransformNode; // rbx
  UFG::SimComponent *v17; // rdi
  UFG::qMemoryPool *SimulationMemoryPool; // rax
  UFG::allocator::free_link *v19; // rax
  UFG::SimComponent *v20; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *mPrev; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *mNext; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v23; // rax
  UFG::qMatrix44 m; // [rsp+40h] [rbp-48h] BYREF

  this->mPrev = &this->UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect>;
  this->mNext = &this->UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect>;
  this->vfptr = (UFG::AttachedEffectVtbl *)&UFG::AttachedEffect::`vftable;
  y = bodyTransform->v0.y;
  z = bodyTransform->v0.z;
  w = bodyTransform->v0.w;
  this->mBodyTransform.v0.x = bodyTransform->v0.x;
  this->mBodyTransform.v0.y = y;
  this->mBodyTransform.v0.z = z;
  this->mBodyTransform.v0.w = w;
  v7 = bodyTransform->v1.y;
  v8 = bodyTransform->v1.z;
  v9 = bodyTransform->v1.w;
  this->mBodyTransform.v1.x = bodyTransform->v1.x;
  this->mBodyTransform.v1.y = v7;
  this->mBodyTransform.v1.z = v8;
  this->mBodyTransform.v1.w = v9;
  v10 = bodyTransform->v2.y;
  v11 = bodyTransform->v2.z;
  v12 = bodyTransform->v2.w;
  this->mBodyTransform.v2.x = bodyTransform->v2.x;
  this->mBodyTransform.v2.y = v10;
  this->mBodyTransform.v2.z = v11;
  this->mBodyTransform.v2.w = v12;
  v13 = bodyTransform->v3.y;
  v14 = bodyTransform->v3.z;
  v15 = bodyTransform->v3.w;
  this->mBodyTransform.v3.x = bodyTransform->v3.x;
  this->mBodyTransform.v3.y = v13;
  this->mBodyTransform.v3.z = v14;
  this->mBodyTransform.v3.w = v15;
  p_mTransformNode = &this->mTransformNode;
  this->mTransformNode.mPrev = &this->mTransformNode;
  this->mTransformNode.mNext = &this->mTransformNode;
  v17 = 0i64;
  this->mTransformNode.m_pPointer = 0i64;
  this->mEffectNode = effect;
  this->mRuntimeEffectNode = 0i64;
  this->mInstanceUid = -1;
  UFG::qMatrix44::operator*(&effect->mTransform, &m, &this->mBodyTransform);
  if ( this->mEffectNode->mAttachToObject )
  {
    if ( (_S16_1 & 1) == 0 )
    {
      _S16_1 |= 1u;
      id = UFG::qStringHash32("TransformNode", 0xFFFFFFFF);
    }
    SimulationMemoryPool = UFG::GetSimulationMemoryPool();
    v19 = UFG::qMemoryPool::Allocate(SimulationMemoryPool, 0x110ui64, "TransformNodeComponent", 0i64, 1u);
    if ( v19 )
    {
      UFG::TransformNodeComponent::TransformNodeComponent((UFG::TransformNodeComponent *)v19, id, 0i64, 0);
      v17 = v20;
    }
    if ( p_mTransformNode->m_pPointer )
    {
      mPrev = p_mTransformNode->mPrev;
      mNext = p_mTransformNode->mNext;
      mPrev->mNext = mNext;
      mNext->mPrev = mPrev;
      p_mTransformNode->mPrev = p_mTransformNode;
      p_mTransformNode->mNext = p_mTransformNode;
    }
    p_mTransformNode->m_pPointer = v17;
    if ( v17 )
    {
      v23 = v17->m_SafePointerList.mNode.mPrev;
      v23->mNext = p_mTransformNode;
      p_mTransformNode->mPrev = v23;
      p_mTransformNode->mNext = &v17->m_SafePointerList.mNode;
      v17->m_SafePointerList.mNode.mPrev = p_mTransformNode;
    }
    UFG::TransformNodeComponent::SetWorldTransform((UFG::TransformNodeComponent *)this->mTransformNode.m_pPointer, &m);
  }
  UFG::AttachedEffect::ActivateBasedOnTimeOfDay(this);
}

// File Line: 1201
// RVA: 0x44F530
void __fastcall UFG::AttachedEffect::~AttachedEffect(UFG::AttachedEffect *this)
{
  unsigned int mInstanceUid; // edx
  UFG::SimComponent *m_pPointer; // rdx
  char *mRuntimeEffectNode; // rdx
  UFG::qSafePointer<UFG::SimComponent,UFG::TransformNodeComponent> *p_mTransformNode; // rdx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *mPrev; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *mNext; // rax
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v8; // rcx
  UFG::qNode<UFG::qSafePointerBase<UFG::SimComponent>,UFG::qSafePointerNodeList> *v9; // rax
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v10; // rcx
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *v11; // rax

  this->vfptr = (UFG::AttachedEffectVtbl *)&UFG::AttachedEffect::`vftable;
  mInstanceUid = this->mInstanceUid;
  if ( mInstanceUid != -1 && Render::FXManager::IsEffectLooping(&Render::gFXManager, mInstanceUid) )
    Render::FXManager::KillEffect(&Render::gFXManager, this->mInstanceUid, FXKILLOPTION_DEFAULT);
  m_pPointer = this->mTransformNode.m_pPointer;
  if ( m_pPointer )
    UFG::Simulation::DestroySimComponent(&UFG::gSim, m_pPointer);
  mRuntimeEffectNode = (char *)this->mRuntimeEffectNode;
  if ( mRuntimeEffectNode )
    UFG::qMemoryPool::Free(&gPhysicsMemoryPool, mRuntimeEffectNode);
  p_mTransformNode = &this->mTransformNode;
  if ( this->mTransformNode.m_pPointer )
  {
    mPrev = p_mTransformNode->mPrev;
    mNext = this->mTransformNode.mNext;
    mPrev->mNext = mNext;
    mNext->mPrev = mPrev;
    p_mTransformNode->mPrev = p_mTransformNode;
    this->mTransformNode.mNext = &this->mTransformNode;
  }
  this->mTransformNode.m_pPointer = 0i64;
  v8 = p_mTransformNode->mPrev;
  v9 = this->mTransformNode.mNext;
  v8->mNext = v9;
  v9->mPrev = v8;
  p_mTransformNode->mPrev = p_mTransformNode;
  this->mTransformNode.mNext = &this->mTransformNode;
  v10 = this->mPrev;
  v11 = this->mNext;
  v10->mNext = v11;
  v11->mPrev = v10;
  this->mPrev = &this->UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect>;
  this->mNext = &this->UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect>;
}

// File Line: 1225
// RVA: 0x454690
void __fastcall UFG::AttachedEffect::ActivateBasedOnTimeOfDay(UFG::AttachedEffect *this)
{
  UFG::TimeOfDayManager *Instance; // rax
  unsigned int mInstanceUid; // edx
  UFG::StateMachineEffectNode *mEffectNode; // rcx
  UFG::qMatrix44 result; // [rsp+30h] [rbp-48h] BYREF

  if ( this->mEffectNode->mEndTime == this->mEffectNode->mStartTime
    || (Instance = UFG::TimeOfDayManager::GetInstance(),
        (unsigned __int8)Render::FXManager::IsInBetweenTime(
                           &Render::gFXManager,
                           Instance->m_SecondsSinceMidnight,
                           this->mEffectNode->mStartTime,
                           this->mEffectNode->mEndTime)) )
  {
    if ( this->mInstanceUid == -1 )
    {
      mEffectNode = this->mEffectNode;
      if ( mEffectNode->mAttachToObject )
      {
        this->mInstanceUid = Render::FXManager::CreateEffect(
                               &Render::gFXManager,
                               mEffectNode->mNameUid.mUID,
                               (UFG::TransformNodeComponent *)this->mTransformNode.m_pPointer,
                               0xFFFFFFFF,
                               0i64);
      }
      else
      {
        UFG::qMatrix44::operator*(&mEffectNode->mTransform, &result, &this->mBodyTransform);
        this->mInstanceUid = Render::FXManager::CreateEffect(
                               &Render::gFXManager,
                               this->mEffectNode->mNameUid.mUID,
                               &result,
                               0xFFFFFFFF);
      }
    }
  }
  else
  {
    mInstanceUid = this->mInstanceUid;
    if ( mInstanceUid != -1 )
    {
      if ( Render::FXManager::IsEffectLooping(&Render::gFXManager, mInstanceUid) )
        Render::FXManager::KillEffect(&Render::gFXManager, this->mInstanceUid, FXKILLOPTION_DEFAULT);
      this->mInstanceUid = -1;
    }
  }
}

// File Line: 1270
// RVA: 0x45C820
UFG::AttachedEffect *__fastcall UFG::StateMachineComponent::CreateEffect(
        UFG::StateMachineComponent *this,
        UFG::StateMachineEffectNode *effect,
        UFG::qMatrix44 *partOffset)
{
  UFG::allocator::free_link *v6; // rax
  __int64 v7; // rax
  __int64 v8; // r8
  UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *mPrev; // rax
  UFG::qMatrix44 mat; // [rsp+40h] [rbp-88h] BYREF
  UFG::qMatrix44 result; // [rsp+80h] [rbp-48h] BYREF

  if ( effect->mNameUid.mUID == -1 )
    return 0i64;
  UFG::RigidBody::GetTransform((UFG::RigidBody *)this->mRigidBodyComponent.m_pPointer, &mat);
  UFG::qMatrix44::operator*(partOffset, &result, &mat);
  v6 = UFG::qMemoryPool::Allocate(&gPhysicsMemoryPool, 0x88ui64, "AttachedEffect", 0i64, 1u);
  if ( v6 )
  {
    UFG::AttachedEffect::AttachedEffect((UFG::AttachedEffect *)v6, &result, effect);
    v8 = v7;
  }
  else
  {
    v8 = 0i64;
  }
  mPrev = this->mAttachedEffects.mNode.mPrev;
  mPrev->mNext = (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = mPrev;
  *(_QWORD *)(v8 + 16) = &this->mAttachedEffects;
  this->mAttachedEffects.mNode.mPrev = (UFG::qNode<UFG::AttachedEffect,UFG::AttachedEffect> *)(v8 + 8);
  return (UFG::AttachedEffect *)v8;
}

// File Line: 1289
// RVA: 0x46AE90
char __fastcall UFG::StateMachineComponent::IsElementInFractureList(
        UFG::StateMachineComponent *this,
        unsigned int elementID)
{
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *mNext; // rax
  UFG::qList<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo,1,0> *p_mFractureList; // rcx

  mNext = this->mFractureList.mNode.mNext;
  p_mFractureList = &this->mFractureList;
  if ( mNext == (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)p_mFractureList )
    return 0;
  while ( LODWORD(mNext[1].mPrev) != elementID )
  {
    mNext = mNext->mNext;
    if ( mNext == (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)p_mFractureList )
      return 0;
  }
  return 1;
}

// File Line: 1305
// RVA: 0x475FD0
void __fastcall UFG::StateMachineComponent::SpawnDestructionPhantomVolume(
        UFG::StateMachineComponent *this,
        unsigned int phantomUID,
        UFG::qVector3 *offset,
        UFG::qVector3 *extents)
{
  hkpRigidBody *mPhantomRigidBody; // rcx
  float y; // xmm2_4
  hkpRigidBody *v10; // rax
  UFG::qMatrix44 transform; // [rsp+20h] [rbp-D8h] BYREF
  UFG::qMatrix44 mat; // [rsp+60h] [rbp-98h] BYREF
  float v13; // [rsp+148h] [rbp+50h]

  mPhantomRigidBody = this->mPhantomRigidBody;
  if ( mPhantomRigidBody )
  {
    UFG::PhantomCallback::DestroyPhantom(mPhantomRigidBody);
    this->mPhantomRigidBody = 0i64;
  }
  UFG::RigidBody::GetTransform((UFG::RigidBody *)this->mRigidBodyComponent.m_pPointer, &mat);
  y = offset->y;
  transform.v3.z = offset->z;
  transform.v3.y = y;
  transform.v0 = UFG::qMatrix44::msIdentity.v0;
  transform.v1 = UFG::qMatrix44::msIdentity.v1;
  transform.v2 = UFG::qMatrix44::msIdentity.v2;
  transform.v3.x = offset->x;
  LODWORD(transform.v3.w) = (_DWORD)FLOAT_1_0;
  transform.v0 = (UFG::qVector4)_mm_add_ps(
                                  _mm_add_ps(
                                    _mm_add_ps(
                                      _mm_add_ps(
                                        _mm_mul_ps(
                                          _mm_shuffle_ps(
                                            (__m128)UFG::qMatrix44::msIdentity.v0,
                                            (__m128)UFG::qMatrix44::msIdentity.v0,
                                            0),
                                          (__m128)mat.v0),
                                        (__m128)0i64),
                                      _mm_mul_ps(
                                        _mm_shuffle_ps(
                                          (__m128)UFG::qMatrix44::msIdentity.v0,
                                          (__m128)UFG::qMatrix44::msIdentity.v0,
                                          85),
                                        (__m128)mat.v1)),
                                    _mm_mul_ps(
                                      _mm_shuffle_ps(
                                        (__m128)UFG::qMatrix44::msIdentity.v0,
                                        (__m128)UFG::qMatrix44::msIdentity.v0,
                                        170),
                                      *(__m128 *)&mat.v1.z)),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v0,
                                      (__m128)UFG::qMatrix44::msIdentity.v0,
                                      255),
                                    *(__m128 *)&mat.v2.z));
  transform.v1 = (UFG::qVector4)_mm_add_ps(
                                  _mm_add_ps(
                                    _mm_add_ps(
                                      _mm_add_ps(
                                        _mm_mul_ps(
                                          _mm_shuffle_ps(
                                            (__m128)UFG::qMatrix44::msIdentity.v1,
                                            (__m128)UFG::qMatrix44::msIdentity.v1,
                                            0),
                                          (__m128)mat.v0),
                                        (__m128)0i64),
                                      _mm_mul_ps(
                                        _mm_shuffle_ps(
                                          (__m128)UFG::qMatrix44::msIdentity.v1,
                                          (__m128)UFG::qMatrix44::msIdentity.v1,
                                          85),
                                        (__m128)mat.v1)),
                                    _mm_mul_ps(
                                      _mm_shuffle_ps(
                                        (__m128)UFG::qMatrix44::msIdentity.v1,
                                        (__m128)UFG::qMatrix44::msIdentity.v1,
                                        170),
                                      *(__m128 *)&mat.v1.z)),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v1,
                                      (__m128)UFG::qMatrix44::msIdentity.v1,
                                      255),
                                    *(__m128 *)&mat.v2.z));
  transform.v2 = (UFG::qVector4)_mm_add_ps(
                                  _mm_add_ps(
                                    _mm_add_ps(
                                      _mm_add_ps(
                                        _mm_mul_ps(
                                          _mm_shuffle_ps(
                                            (__m128)UFG::qMatrix44::msIdentity.v2,
                                            (__m128)UFG::qMatrix44::msIdentity.v2,
                                            0),
                                          (__m128)mat.v0),
                                        (__m128)0i64),
                                      _mm_mul_ps(
                                        _mm_shuffle_ps(
                                          (__m128)UFG::qMatrix44::msIdentity.v2,
                                          (__m128)UFG::qMatrix44::msIdentity.v2,
                                          85),
                                        (__m128)mat.v1)),
                                    _mm_mul_ps(
                                      _mm_shuffle_ps(
                                        (__m128)UFG::qMatrix44::msIdentity.v2,
                                        (__m128)UFG::qMatrix44::msIdentity.v2,
                                        170),
                                      *(__m128 *)&mat.v1.z)),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps(
                                      (__m128)UFG::qMatrix44::msIdentity.v2,
                                      (__m128)UFG::qMatrix44::msIdentity.v2,
                                      255),
                                    *(__m128 *)&mat.v2.z));
  transform.v3 = (UFG::qVector4)_mm_add_ps(
                                  _mm_add_ps(
                                    _mm_add_ps(
                                      _mm_mul_ps(
                                        _mm_shuffle_ps((__m128)transform.v3, (__m128)transform.v3, 85),
                                        (__m128)mat.v1),
                                      _mm_add_ps(
                                        _mm_mul_ps(
                                          _mm_shuffle_ps((__m128)transform.v3, (__m128)transform.v3, 0),
                                          (__m128)mat.v0),
                                        (__m128)0i64)),
                                    _mm_mul_ps(
                                      _mm_shuffle_ps((__m128)transform.v3, (__m128)transform.v3, 170),
                                      *(__m128 *)&mat.v1.z)),
                                  _mm_mul_ps(
                                    _mm_shuffle_ps((__m128)transform.v3, (__m128)transform.v3, 255),
                                    *(__m128 *)&mat.v2.z));
  v10 = (hkpRigidBody *)UFG::PhantomCallback::CreatePhantom(extents, &transform, phantomUID);
  this->mPhantomTimer = v13;
  this->mPhantomRigidBody = v10;
}

// File Line: 1330
// RVA: 0x465510
void __fastcall UFG::StateMachineComponent::FractureNotification(
        UFG::StateMachineComponent *this,
        unsigned int maxNodeGuid3DS)
{
  UFG::allocator::free_link *v4; // rax
  UFG::allocator::free_link *v5; // r8
  UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *mNext; // rcx

  v4 = UFG::qMalloc(0x18ui64, "FractureInfo", 0i64);
  v5 = v4;
  if ( v4 )
  {
    v4->mNext = v4;
    v4[1].mNext = v4;
  }
  else
  {
    v5 = 0i64;
  }
  LODWORD(v5[2].mNext) = maxNodeGuid3DS;
  mNext = this->mFractureList.mNode.mNext;
  this->mFractureList.mNode.mNext = (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)v5;
  v5->mNext = (UFG::allocator::free_link *)&this->mFractureList;
  v5[1].mNext = (UFG::allocator::free_link *)mNext;
  mNext->mPrev = (UFG::qNode<UFG::StateMachineComponent::FractureInfo,UFG::StateMachineComponent::FractureInfo> *)v5;
}

// File Line: 1339
// RVA: 0x4688A0
void __fastcall UFG::StateMachineComponent::HandleNamedEvent(UFG::StateMachineComponent *this, UFG::Event *thisEvent)
{
  UFG::qReflectObject *mData; // rbx
  unsigned int i; // r10d
  unsigned int v5; // edx
  __int64 v6; // r8
  _DWORD *v7; // rax

  if ( this->m_pSimObject == *(UFG::SimObject **)&thisEvent[1].m_EventUID )
  {
    mData = this->mStateMachineDefinition.mData;
    for ( i = 0; i < LODWORD(mData[1].mBaseNode.mUID); ++i )
    {
      v5 = 0;
      v6 = (__int64)&mData[1].vfptr[26 * i];
      if ( *(_DWORD *)(v6 + 104) )
      {
        do
        {
          v7 = (_DWORD *)(*(_QWORD *)(v6 + 96) + 16i64 * v5);
          if ( *v7 == 8 && v7[2] == LODWORD(thisEvent[1].vfptr) )
            this->mFlags |= 1u;
          ++v5;
        }
        while ( v5 < *(_DWORD *)(v6 + 104) );
      }
    }
  }
}

// File Line: 1367
// RVA: 0x4687D0
void __fastcall UFG::StateMachineComponent::HandleCollisionEvent(
        UFG::StateMachineComponent *this,
        UFG::Event *thisEvent)
{
  UFG::SimObject *m_pSimObject; // rax
  UFG::EventVtbl *vfptr; // r11
  unsigned int v4; // r9d
  UFG::qReflectObjectVtbl *v5; // r10
  float v6; // xmm1_4
  float v7; // xmm0_4
  __int16 v8; // r8
  float v9; // xmm0_4

  if ( !LODWORD(thisEvent[1].vfptr) )
  {
    m_pSimObject = this->m_pSimObject;
    if ( m_pSimObject )
    {
      vfptr = thisEvent[2].vfptr;
      if ( m_pSimObject == (UFG::SimObject *)vfptr )
      {
        vfptr = *(UFG::EventVtbl **)&thisEvent[2].m_EventUID;
      }
      else if ( m_pSimObject != *(UFG::SimObject **)&thisEvent[2].m_EventUID )
      {
        return;
      }
      if ( vfptr )
      {
        v4 = 0;
        v5 = &this->mStateMachineDefinition.mData[1].vfptr[26 * (unsigned int)this->mCurrentNodeIndex];
        if ( LODWORD(v5[6].GetTypeName) )
        {
          v6 = this->mCollisionEventData[0];
          do
          {
            v7 = *(float *)&thisEvent[1].m_NamePTR;
            if ( v6 < v7 )
            {
              v6 = *(float *)&thisEvent[1].m_NamePTR;
              this->mCollisionEventData[0] = v7;
            }
            v8 = WORD2(vfptr[9].__vecDelDtor);
            v9 = *(float *)&thisEvent[1].m_NamePTR;
            if ( (v8 & 0x4000) != 0 )
            {
              if ( v9 > this->mCollisionEventData[3] )
                this->mCollisionEventData[3] = v9;
            }
            else if ( v8 >= 0 )
            {
              if ( v9 > this->mCollisionEventData[1] )
                this->mCollisionEventData[1] = v9;
            }
            else if ( v9 > this->mCollisionEventData[2] )
            {
              this->mCollisionEventData[2] = v9;
            }
            ++v4;
          }
          while ( v4 < LODWORD(v5[6].GetTypeName) );
        }
      }
    }
  }
}

