// File Line: 763
// RVA: 0xF5CF0
void __fastcall std::vector<RVO::Line>::_Construct<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line>>>>(
        std::vector<RVO::Line> *this,
        std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line> > > _First,
        std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line> > > _Last)
{
  std::forward_iterator_tag __formal; // [rsp+68h] [rbp+20h]

  std::vector<RVO::Line>::_Insert<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line>>>>(
    this,
    (std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line> > >)this->_Myfirst,
    _First,
    _Last,
    __formal);
}

// File Line: 767
// RVA: 0x134AC50
`std::vector<RVO::Line,std::allocator<RVO::Line> >::_Construct<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line> > > >'::`1'::catch$0

// File Line: 836
// RVA: 0xF9D40
void __fastcall std::vector<std::pair<float,RVO::Obstacle const *>>::push_back(
        std::vector<std::pair<float,RVO::Obstacle const *>> *this,
        std::pair<float,RVO::Obstacle const *> *_Val)
{
  std::pair<float,RVO::Obstacle const *> *Mylast; // rax
  std::pair<float,RVO::Obstacle const *> *Myfirst; // rcx
  signed __int64 v6; // rdi
  char *v7; // rdi
  std::pair<float,RVO::Obstacle const *> *v8; // rcx
  std::pair<float,RVO::Obstacle const *> *v9; // rcx

  Mylast = this->_Mylast;
  if ( _Val >= Mylast || (Myfirst = this->_Myfirst, Myfirst > _Val) )
  {
    if ( Mylast == this->_Myend )
      std::vector<std::pair<float,RVO::Obstacle const *>>::_Reserve(this, 1ui64);
    v9 = this->_Mylast;
    if ( v9 )
    {
      v9->first = _Val->first;
      v9->second = _Val->second;
    }
  }
  else
  {
    v6 = (char *)_Val - (char *)Myfirst;
    if ( Mylast == this->_Myend )
      std::vector<std::pair<float,RVO::Obstacle const *>>::_Reserve(this, 1ui64);
    v7 = (char *)this->_Myfirst + (v6 & 0xFFFFFFFFFFFFFFF0ui64);
    v8 = this->_Mylast;
    if ( v8 )
    {
      v8->first = *(float *)v7;
      v8->second = (RVO::Obstacle *)*((_QWORD *)v7 + 1);
    }
  }
  ++this->_Mylast;
}

// File Line: 899
// RVA: 0xF79A0
void __fastcall std::vector<std::pair<float,RVO::Agent const *>>::~vector<std::pair<float,RVO::Agent const *>>(
        std::vector<RVO::Line> *this)
{
  RVO::Line *Myfirst; // rcx

  Myfirst = this->_Myfirst;
  if ( Myfirst )
  {
    operator delete[](Myfirst);
    this->_Myfirst = 0i64;
    this->_Mylast = 0i64;
    this->_Myend = 0i64;
  }
}

// File Line: 1184
// RVA: 0xF9DF0
void __fastcall std::vector<RVO::Line>::push_back(std::vector<RVO::Line> *this, RVO::Line *_Val)
{
  RVO::Line *Mylast; // rax
  RVO::Line *Myfirst; // rcx
  signed __int64 v6; // rdi
  float *v7; // rdi
  RVO::Line *v8; // rcx
  RVO::Line *v9; // rcx

  Mylast = this->_Mylast;
  if ( _Val >= Mylast || (Myfirst = this->_Myfirst, Myfirst > _Val) )
  {
    if ( Mylast == this->_Myend )
      std::vector<RVO::Line>::_Reserve(this, 1ui64);
    v9 = this->_Mylast;
    if ( v9 )
    {
      v9->point.x_ = _Val->point.x_;
      v9->point.y_ = _Val->point.y_;
      v9->direction.x_ = _Val->direction.x_;
      v9->direction.y_ = _Val->direction.y_;
    }
  }
  else
  {
    v6 = (char *)_Val - (char *)Myfirst;
    if ( Mylast == this->_Myend )
      std::vector<RVO::Line>::_Reserve(this, 1ui64);
    v7 = (float *)((char *)&this->_Myfirst->point + (v6 & 0xFFFFFFFFFFFFFFF0ui64));
    v8 = this->_Mylast;
    if ( v8 )
    {
      v8->point.x_ = *v7;
      v8->point.y_ = v7[1];
      v8->direction.x_ = v7[2];
      v8->direction.y_ = v7[3];
    }
  }
  ++this->_Mylast;
}

// File Line: 1294
// RVA: 0xF5D30
void __fastcall std::vector<RVO::Line>::_Insert<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line>>>>(
        std::vector<RVO::Line> *this,
        std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line> > > _Where,
        std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line> > > _First,
        std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line> > > _Last)
{
  unsigned __int64 v6; // rdi
  RVO::Line *Myend; // rbx
  RVO::Line *Mylast; // r8
  RVO::Line *Myfirst; // rcx
  __int64 v10; // r8
  unsigned __int64 v11; // rbx
  unsigned __int64 v12; // rbx
  char *v13; // r14
  unsigned __int64 v14; // rdi
  __int64 v15; // rdi
  RVO::Line *v16; // rdx
  RVO::Line *v17; // r8
  std::_Wrap_alloc<std::allocator<RVO::Line> > v18; // [rsp+30h] [rbp-38h] BYREF
  char *v19; // [rsp+38h] [rbp-30h]
  RVO::Line *v20; // [rsp+40h] [rbp-28h]
  __int64 v21; // [rsp+48h] [rbp-20h]

  v21 = -2i64;
  v6 = _Last._Ptr - _First._Ptr;
  if ( v6 )
  {
    Myend = this->_Myend;
    Mylast = this->_Mylast;
    if ( Myend - Mylast >= v6 )
    {
      std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line>>>,RVO::Line *,std::allocator<RVO::Line>>(
        _First,
        _Last,
        Mylast,
        &v18,
        (std::_Nonscalar_ptr_iterator_tag)_Last._Ptr);
      v15 = v6;
      v16 = this->_Mylast;
      v17 = &v16[v15];
      if ( _Where._Ptr != v16 && v16 != v17 )
        std::_Rotate<RVO::Line *,__int64,RVO::Line>(_Where._Ptr, v16, v17, 0i64, 0i64);
      this->_Mylast = (RVO::Line *)((char *)this->_Mylast + v15 * 16);
    }
    else
    {
      Myfirst = this->_Myfirst;
      v10 = Mylast - Myfirst;
      if ( 0xFFFFFFFFFFFFFFFi64 - v10 < v6 )
        std::_Xlength_error("vector<T> too long");
      v11 = Myend - Myfirst;
      if ( 0xFFFFFFFFFFFFFFFi64 - (v11 >> 1) >= v11 )
        v12 = (v11 >> 1) + v11;
      else
        v12 = 0i64;
      if ( v12 < v10 + v6 )
        v12 = v10 + v6;
      v13 = 0i64;
      v19 = 0i64;
      if ( v12 )
      {
        if ( v12 > 0xFFFFFFFFFFFFFFFi64
          || (v13 = UFG::qMalloc(16 * v12, UFG::gGlobalNewName, 0i64), (v19 = v13) == 0i64) )
        {
          std::_Xbad_alloc();
        }
      }
      v20 = std::_Uninit_move<RVO::Line *,RVO::Line *,std::allocator<RVO::Line>,RVO::Line>(
              this->_Myfirst,
              _Where._Ptr,
              (RVO::Line *)v13,
              &v18,
              0i64,
              (std::_Nonscalar_ptr_iterator_tag)_Last._Ptr);
      v20 = std::_Uninit_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line>>>,RVO::Line *,std::allocator<RVO::Line>>(
              _First,
              _Last,
              v20,
              &v18,
              (std::_Nonscalar_ptr_iterator_tag)_Last._Ptr);
      std::_Uninit_move<RVO::Line *,RVO::Line *,std::allocator<RVO::Line>,RVO::Line>(
        _Where._Ptr,
        this->_Mylast,
        v20,
        &v18,
        0i64,
        (std::_Nonscalar_ptr_iterator_tag)_Last._Ptr);
      v14 = this->_Mylast - this->_Myfirst + v6;
      if ( this->_Myfirst )
        operator delete[](this->_Myfirst);
      this->_Myend = (RVO::Line *)&v13[16 * v12];
      this->_Mylast = (RVO::Line *)&v13[16 * v14];
      this->_Myfirst = (RVO::Line *)v13;
    }
  }
}

// File Line: 1325
// RVA: 0x134AC70
`std::vector<RVO::Line,std::allocator<RVO::Line> >::_Insert<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<RVO::Line> > > >'::`1'::catch$0

// File Line: 1500
// RVA: 0xF7650
void __fastcall std::vector<std::pair<float,RVO::Obstacle const *>>::_Reallocate(
        std::vector<std::pair<float,RVO::Obstacle const *>> *this,
        unsigned __int64 _Count)
{
  char *v4; // rsi
  signed __int64 v5; // rbx
  std::_Wrap_alloc<std::allocator<std::pair<float,RVO::Obstacle const *> > > v6; // [rsp+68h] [rbp+10h] BYREF
  char *v7; // [rsp+70h] [rbp+18h]

  v4 = 0i64;
  v7 = 0i64;
  if ( _Count )
  {
    if ( _Count > 0xFFFFFFFFFFFFFFFi64 || (v4 = UFG::qMalloc(16 * _Count, UFG::gGlobalNewName, 0i64), (v7 = v4) == 0i64) )
      std::_Xbad_alloc();
  }
  std::_Uninit_move<std::pair<float,RVO::Agent const *> *,std::pair<float,RVO::Agent const *> *,std::allocator<std::pair<float,RVO::Agent const *>>,std::pair<float,RVO::Agent const *>>(
    this->_Myfirst,
    this->_Mylast,
    (std::pair<float,RVO::Obstacle const *> *)v4,
    &v6);
  v5 = (char *)this->_Mylast - (char *)this->_Myfirst;
  if ( this->_Myfirst )
    operator delete[](this->_Myfirst);
  this->_Myend = (std::pair<float,RVO::Obstacle const *> *)&v4[16 * _Count];
  this->_Mylast = (std::pair<float,RVO::Obstacle const *> *)&v4[v5 & 0xFFFFFFFFFFFFFFF0ui64];
  this->_Myfirst = (std::pair<float,RVO::Obstacle const *> *)v4;
}

// File Line: 1505
// RVA: 0x134AF10
`std::vector<RVO::Line,std::allocator<RVO::Line> >::_Reallocate'::`1'::catch$0

// File Line: 1525
// RVA: 0xF7880
void __fastcall std::vector<std::pair<float,RVO::Obstacle const *>>::_Reserve(
        std::vector<std::pair<float,RVO::Obstacle const *>> *this,
        unsigned __int64 _Count)
{
  std::pair<float,RVO::Obstacle const *> *Mylast; // r8
  __int64 v4; // r8
  unsigned __int64 v5; // r11
  unsigned __int64 v6; // rdx
  unsigned __int64 v7; // rdx

  Mylast = this->_Mylast;
  if ( this->_Myend - Mylast < _Count )
  {
    v4 = Mylast - this->_Myfirst;
    if ( 0xFFFFFFFFFFFFFFFi64 - v4 < _Count )
      std::_Xlength_error("vector<T> too long");
    v5 = v4 + _Count;
    v6 = this->_Myend - this->_Myfirst;
    if ( 0xFFFFFFFFFFFFFFFi64 - (v6 >> 1) >= v6 )
    {
      v7 = (v6 >> 1) + v6;
      if ( v7 < v5 )
        v7 = v4 + _Count;
    }
    else
    {
      v7 = 0i64;
      if ( v5 )
        v7 = v4 + _Count;
    }
    std::vector<std::pair<float,RVO::Obstacle const *>>::_Reallocate(this, v7);
  }
}

