// File Line: 3395
// RVA: 0xF5F40
void __fastcall std::_Rotate<RVO::Line *,__int64,RVO::Line>(RVO::Line *_First, RVO::Line *_Mid, RVO::Line *_Last, __int64 *__formal)
{
  RVO::Line *v4; // rbx
  RVO::Line *v5; // rdi
  signed __int64 v6; // r9
  signed __int64 v7; // r10
  signed __int64 v8; // r11
  signed __int64 i; // rcx
  signed __int64 v10; // rax
  signed __int64 v11; // r10
  signed __int64 v12; // rdx
  RVO::Line *v13; // rcx
  float *v14; // r8
  float v15; // xmm0_4
  float v16; // xmm1_4
  float v17; // xmm2_4
  float v18; // xmm3_4
  signed __int64 v19; // rax

  v4 = _First;
  v5 = _Last;
  v6 = _Mid - _First;
  v7 = _Last - _First;
  v8 = _Last - _First;
  for ( i = v6; i; i = v10 % i )
  {
    v10 = v8;
    v8 = i;
  }
  if ( v8 < v7 && v8 > 0 )
  {
    v11 = 16 * v6;
    v12 = (signed __int64)&v4[v8];
    do
    {
      v13 = (RVO::Line *)(v12 + v11);
      v14 = (float *)v12;
      if ( (RVO::Line *)(v12 + v11) == v5 )
        v13 = v4;
      do
      {
        v15 = *v14;
        v16 = v14[1];
        v17 = v14[2];
        v18 = v14[3];
        *v14 = v13->point.x_;
        v14[1] = v13->point.y_;
        v14[2] = v13->direction.x_;
        v14[3] = v13->direction.y_;
        v14 = (float *)&v13->point;
        v13->point.x_ = v15;
        v13->point.y_ = v16;
        v13->direction.x_ = v17;
        v19 = v5 - v13;
        v13->direction.y_ = v18;
        if ( v6 >= v19 )
          v13 = &v4[v6 - v19];
        else
          v13 = (RVO::Line *)((char *)v13 + v11);
      }
      while ( v13 != (RVO::Line *)v12 );
      --v8;
      v12 -= 16i64;
    }
    while ( v8 > 0 );
  }
}

