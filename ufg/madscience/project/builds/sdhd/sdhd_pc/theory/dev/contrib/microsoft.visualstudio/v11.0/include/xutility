// File Line: 3395
// RVA: 0xF5F40
void __fastcall std::_Rotate<RVO::Line *,__int64,RVO::Line>(
        RVO::Line *_First,
        RVO::Line *_Mid,
        RVO::Line *_Last,
        __int64 *__formal)
{
  __int64 v6; // r9
  __int64 v7; // r10
  __int64 v8; // r11
  __int64 i; // rcx
  __int64 v10; // rax
  __int64 v11; // r10
  RVO::Line *v12; // rdx
  RVO::Line *v13; // rcx
  RVO::Line *v14; // r8
  float x; // xmm0_4
  float y; // xmm1_4
  float v17; // xmm2_4
  float v18; // xmm3_4
  __int64 v19; // rax

  v6 = _Mid - _First;
  v7 = _Last - _First;
  v8 = v7;
  for ( i = v6; i; i = v10 % i )
  {
    v10 = v8;
    v8 = i;
  }
  if ( v8 < v7 && v8 > 0 )
  {
    v11 = v6;
    v12 = &_First[v8];
    do
    {
      v13 = &v12[v11];
      v14 = v12;
      if ( &v12[v11] == _Last )
        v13 = _First;
      do
      {
        x = v14->point.x_;
        y = v14->point.y_;
        v17 = v14->direction.x_;
        v18 = v14->direction.y_;
        v14->point.x_ = v13->point.x_;
        v14->point.y_ = v13->point.y_;
        v14->direction.x_ = v13->direction.x_;
        v14->direction.y_ = v13->direction.y_;
        v14 = v13;
        v13->point.x_ = x;
        v13->point.y_ = y;
        v13->direction.x_ = v17;
        v19 = _Last - v13;
        v13->direction.y_ = v18;
        if ( v6 >= v19 )
          v13 = &_First[v6 - v19];
        else
          v13 = (RVO::Line *)((char *)v13 + v11 * 16);
      }
      while ( v13 != v12 );
      --v8;
      --v12;
    }
    while ( v8 > 0 );
  }
}

